# ****************************************************************
# Date: 12-10-2023
# Author: jchau
#
# Job description:
# 1. setup R
# 2. install R-package dependencies
# 3. build source R-package and upload as artifact
# 4. build binary R-package and upload as artifact
# ****************************************************************

name: build-binary-unix-workflow

on:
  workflow_call:
    inputs:
      os:
        description: 'Distro used to execute job'
        required: true
        type: string
        default: 'ubuntu-latest'
      rver:
        description: 'R-version used to execute job'
        required: true
        type: string
        default: 'release'
      build_source:
        description: 'Build/upload source version of R-package'
        required: true
        type: boolean
        default: false
      build_binary:
        description: 'Build/upload binary version of R-package'
        required: true
        type: boolean
        default: true

jobs:
  check-upload:
    runs-on: ${{ inputs.os }}
    name: ${{ inputs.os }} (R-${{ inputs.rver }})
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      R_VER: ${{ inputs.rver }}
    steps:
      - uses: actions/checkout@v4
      # - uses: r-lib/actions/setup-pandoc@v2
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.rver }}
          use-public-rspm: true
          extra-repositories: 'https://mc-stan.org/r-packages/'
      - name: install BMABMDR dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            pkgbuild
            remotes
      - name: set compiler flags
        run: |
          ## update src files
          rstantools::rstan_config()
          Rcpp::compileAttributes()
          ## edit global Makevars
          dotR <- file.path(Sys.getenv("HOME"), ".R")
          if (!file.exists(dotR)) { dir.create(dotR) }
          MAKEVARS <- file.path(dotR, "Makevars")
          if (!file.exists(MAKEVARS)) { file.create(MAKEVARS) }
          cat("\nCXX=g++ -std=c++1y",
            "CXX17FLAGS += -Wno-unused-variable -Wno-unused-function -Wno-unknown-pragmas -Wno-ignored-attributes -Wno-deprecated -Wno-pedantic",
            "PKG_CPPFLAGS += -DUSE_STANC3\n", file = MAKEVARS, sep = "\n", append = TRUE)
        shell: Rscript {0}
      - name: make 'configure' script executable
        run: chmod +x configure
      - name: re-install specific versions rstan, StanHeaders, brms
        if: ${{ inputs.rver != '4.0' && inputs.rver != '4.1' }}
        run: |
          invisible(
            mapply(
              remotes::install_version,
              package = c("StanHeaders", "rstan", "brms"),
              version = c("2.26.28", "2.32.3", "2.20.4"),
              upgrade = FALSE
            )
          )
        shell: Rscript {0}
      - name: build source R-package
        id: build-source
        run: |
          ## build source pkg
          pkg <- pkgbuild::build()
          cat("name=", basename(pkg), "\n", "path=", file.path(pkg), "\n", file = Sys.getenv("GITHUB_OUTPUT"), sep = "", append = TRUE)
          if(Sys.getenv("BUILD_SOURCE") == "true") {
            dir.create("pkg_source")
            file.copy(from = pkg, to = file.path("pkg_source", basename(pkg)))
          }
        shell: Rscript {0}
        env:
          BUILD_SOURCE: ${{ inputs.build_source }}
      - name: make artifact folder
        run: mkdir ${{ inputs.rver }}
      - name: upload source R-package
        if: inputs.build_source
        uses: actions/upload-artifact@v4
        with:
          name: src
          path: pkg_source
          if-no-files-found: ignore
      - name: build binary R-package
        id: build-binary
        if: inputs.build_binary
        run: pkgbuild::build(binary = TRUE, dest_path = Sys.getenv("R_VER"))
        shell: Rscript {0}
      - name: upload binary R-package
        if: success() && inputs.build_binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.os }}_R-${{ inputs.rver }}
          path: ${{ inputs.rver }}
          if-no-files-found: error
          
