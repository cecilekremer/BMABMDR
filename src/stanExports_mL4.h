// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mL4_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 136> locations_array__ =
  {" (found before start of program)",
  " (in 'mL4', line 36, column 1 to column 20)",
  " (in 'mL4', line 37, column 1 to column 20)",
  " (in 'mL4', line 38, column 1 to column 37)",
  " (in 'mL4', line 39, column 1 to column 46)",
  " (in 'mL4', line 40, column 1 to column 11)",
  " (in 'mL4', line 41, column 1 to column 11)",
  " (in 'mL4', line 44, column 2 to column 9)",
  " (in 'mL4', line 45, column 2 to column 9)",
  " (in 'mL4', line 46, column 2 to column 9)",
  " (in 'mL4', line 47, column 2 to column 12)",
  " (in 'mL4', line 48, column 2 to column 9)",
  " (in 'mL4', line 49, column 2 to column 9)",
  " (in 'mL4', line 50, column 2 to column 14)",
  " (in 'mL4', line 51, column 2 to column 17)",
  " (in 'mL4', line 52, column 2 to column 12)",
  " (in 'mL4', line 53, column 2 to column 14)",
  " (in 'mL4', line 57, column 4 to column 36)",
  " (in 'mL4', line 56, column 30 to line 58, column 3)",
  " (in 'mL4', line 56, column 8 to line 58, column 3)",
  " (in 'mL4', line 55, column 4 to column 25)",
  " (in 'mL4', line 54, column 24 to line 56, column 3)",
  " (in 'mL4', line 54, column 2 to line 58, column 3)",
  " (in 'mL4', line 59, column 2 to column 21)",
  " (in 'mL4', line 70, column 6 to column 28)",
  " (in 'mL4', line 69, column 28 to line 71, column 5)",
  " (in 'mL4', line 69, column 10 to line 71, column 5)",
  " (in 'mL4', line 68, column 6 to column 15)",
  " (in 'mL4', line 67, column 22 to line 69, column 5)",
  " (in 'mL4', line 67, column 4 to line 71, column 5)",
  " (in 'mL4', line 66, column 44 to line 72, column 3)",
  " (in 'mL4', line 66, column 8 to line 72, column 3)",
  " (in 'mL4', line 64, column 6 to column 30)",
  " (in 'mL4', line 63, column 28 to line 65, column 5)",
  " (in 'mL4', line 63, column 10 to line 65, column 5)",
  " (in 'mL4', line 62, column 6 to column 17)",
  " (in 'mL4', line 61, column 22 to line 63, column 5)",
  " (in 'mL4', line 61, column 4 to line 65, column 5)",
  " (in 'mL4', line 60, column 38 to line 66, column 3)",
  " (in 'mL4', line 60, column 2 to line 72, column 3)",
  " (in 'mL4', line 83, column 6 to column 71)",
  " (in 'mL4', line 82, column 28 to line 84, column 5)",
  " (in 'mL4', line 82, column 10 to line 84, column 5)",
  " (in 'mL4', line 81, column 6 to column 45)",
  " (in 'mL4', line 80, column 22 to line 82, column 5)",
  " (in 'mL4', line 80, column 4 to line 84, column 5)",
  " (in 'mL4', line 79, column 44 to line 85, column 3)",
  " (in 'mL4', line 79, column 8 to line 85, column 3)",
  " (in 'mL4', line 77, column 6 to column 71)",
  " (in 'mL4', line 76, column 28 to line 78, column 5)",
  " (in 'mL4', line 76, column 10 to line 78, column 5)",
  " (in 'mL4', line 75, column 6 to column 45)",
  " (in 'mL4', line 74, column 22 to line 76, column 5)",
  " (in 'mL4', line 74, column 4 to line 78, column 5)",
  " (in 'mL4', line 73, column 38 to line 79, column 3)",
  " (in 'mL4', line 73, column 2 to line 85, column 3)",
  " (in 'mL4', line 86, column 2 to column 16)",
  " (in 'mL4', line 87, column 2 to column 16)",
  " (in 'mL4', line 95, column 4 to column 83)",
  " (in 'mL4', line 94, column 26 to line 96, column 3)",
  " (in 'mL4', line 94, column 8 to line 96, column 3)",
  " (in 'mL4', line 93, column 4 to column 74)",
  " (in 'mL4', line 92, column 26 to line 94, column 3)",
  " (in 'mL4', line 92, column 8 to line 96, column 3)",
  " (in 'mL4', line 91, column 4 to column 83)",
  " (in 'mL4', line 90, column 26 to line 92, column 3)",
  " (in 'mL4', line 90, column 8 to line 96, column 3)",
  " (in 'mL4', line 89, column 4 to column 78)",
  " (in 'mL4', line 88, column 20 to line 90, column 3)",
  " (in 'mL4', line 88, column 2 to line 96, column 3)",
  " (in 'mL4', line 97, column 2 to column 22)",
  " (in 'mL4', line 100, column 4 to column 67)",
  " (in 'mL4', line 101, column 4 to column 67)",
  " (in 'mL4', line 102, column 4 to column 67)",
  " (in 'mL4', line 103, column 4 to column 56)",
  " (in 'mL4', line 103, column 48 to column 54)",
  " (in 'mL4', line 104, column 4 to column 46)",
  " (in 'mL4', line 125, column 5 to line 126, column 128)",
  " (in 'mL4', line 124, column 20 to line 127, column 7)",
  " (in 'mL4', line 124, column 6 to line 127, column 7)",
  " (in 'mL4', line 123, column 28 to line 128, column 5)",
  " (in 'mL4', line 123, column 10 to line 128, column 5)",
  " (in 'mL4', line 120, column 5 to line 121, column 116)",
  " (in 'mL4', line 119, column 20 to line 122, column 7)",
  " (in 'mL4', line 119, column 6 to line 122, column 7)",
  " (in 'mL4', line 118, column 22 to line 123, column 5)",
  " (in 'mL4', line 118, column 4 to line 128, column 5)",
  " (in 'mL4', line 117, column 30 to line 129, column 3)",
  " (in 'mL4', line 117, column 8 to line 129, column 3)",
  " (in 'mL4', line 113, column 5 to line 114, column 89)",
  " (in 'mL4', line 112, column 20 to line 115, column 7)",
  " (in 'mL4', line 112, column 6 to line 115, column 7)",
  " (in 'mL4', line 111, column 28 to line 116, column 5)",
  " (in 'mL4', line 111, column 10 to line 116, column 5)",
  " (in 'mL4', line 108, column 5 to line 109, column 77)",
  " (in 'mL4', line 107, column 21 to line 110, column 7)",
  " (in 'mL4', line 107, column 7 to line 110, column 7)",
  " (in 'mL4', line 106, column 22 to line 111, column 5)",
  " (in 'mL4', line 106, column 4 to line 116, column 5)",
  " (in 'mL4', line 105, column 24 to line 117, column 3)",
  " (in 'mL4', line 105, column 2 to line 129, column 3)",
  " (in 'mL4', line 15, column 2 to column 8)",
  " (in 'mL4', line 16, column 9 to column 10)",
  " (in 'mL4', line 16, column 2 to column 14)",
  " (in 'mL4', line 17, column 9 to column 10)",
  " (in 'mL4', line 17, column 2 to column 14)",
  " (in 'mL4', line 18, column 9 to column 10)",
  " (in 'mL4', line 18, column 2 to column 14)",
  " (in 'mL4', line 19, column 9 to column 10)",
  " (in 'mL4', line 19, column 2 to column 15)",
  " (in 'mL4', line 20, column 2 to column 9)",
  " (in 'mL4', line 21, column 2 to column 13)",
  " (in 'mL4', line 22, column 2 to column 20)",
  " (in 'mL4', line 23, column 2 to column 20)",
  " (in 'mL4', line 24, column 2 to column 20)",
  " (in 'mL4', line 25, column 2 to column 19)",
  " (in 'mL4', line 26, column 2 to column 19)",
  " (in 'mL4', line 27, column 2 to column 27)",
  " (in 'mL4', line 28, column 2 to column 14)",
  " (in 'mL4', line 29, column 2 to column 16)",
  " (in 'mL4', line 30, column 2 to column 38)",
  " (in 'mL4', line 31, column 2 to column 9)",
  " (in 'mL4', line 32, column 2 to column 38)",
  " (in 'mL4', line 33, column 2 to column 9)",
  " (in 'mL4', line 38, column 22 to column 35)",
  " (in 'mL4', line 39, column 31 to column 44)",
  " (in 'mL4', line 3, column 4 to column 12)",
  " (in 'mL4', line 4, column 4 to column 12)",
  " (in 'mL4', line 5, column 4 to column 12)",
  " (in 'mL4', line 6, column 4 to column 12)",
  " (in 'mL4', line 7, column 4 to column 39)",
  " (in 'mL4', line 8, column 4 to column 38)",
  " (in 'mL4', line 9, column 4 to column 41)",
  " (in 'mL4', line 10, column 4 to column 28)",
  " (in 'mL4', line 11, column 4 to column 31)",
  " (in 'mL4', line 2, column 74 to line 12, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& alpha, const T2__& beta,
               const T3__& lb, const T4__& ub, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& alpha, const T2__& beta,
               const T3__& lb, const T4__& ub, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ x1 = DUMMY_VAR__;
    local_scalar_t__ x2 = DUMMY_VAR__;
    local_scalar_t__ x3 = DUMMY_VAR__;
    local_scalar_t__ x4 = DUMMY_VAR__;
    current_statement__ = 130;
    x1 = ((alpha - 1) * stan::math::log((theta - lb)));
    current_statement__ = 131;
    x2 = ((beta - 1) * stan::math::log((ub - theta)));
    current_statement__ = 132;
    x3 = (((alpha + beta) - 1) * stan::math::log((ub - lb)));
    current_statement__ = 133;
    x4 = stan::math::lbeta(alpha, beta);
    current_statement__ = 134;
    return (((x1 + x2) - x3) - x4);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_mL4 final : public model_base_crtp<model_mL4> {
private:
  int N;
  Eigen::Matrix<double,-1,1> n_data__;
  Eigen::Matrix<double,-1,1> x_data__;
  Eigen::Matrix<double,-1,1> m_data__;
  Eigen::Matrix<double,-1,1> s2_data__;
  double q;
  double shift;
  Eigen::Matrix<double,-1,1> priormu_data__;
  Eigen::Matrix<double,-1,1> priorlb_data__;
  Eigen::Matrix<double,-1,1> priorub_data__;
  Eigen::Matrix<double,-1,1> shape1_data__;
  Eigen::Matrix<double,-1,1> shape2_data__;
  Eigen::Matrix<double,-1,-1> priorSigma_data__;
  double truncd;
  int data_type;
  int is_increasing;
  double L;
  int is_decreasing;
  double U;
  Eigen::Map<Eigen::Matrix<double,-1,1>> n{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> m{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> s2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> priormu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> priorlb{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> priorub{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> shape1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> shape2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priorSigma{nullptr, 0, 0};
public:
  ~model_mL4() {}
  model_mL4(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mL4_namespace::model_mL4";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 101;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 101;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 102;
      stan::math::validate_non_negative_index("n", "N", N);
      current_statement__ = 103;
      context__.validate_dims("data initialization", "n", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      n_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&n) Eigen::Map<Eigen::Matrix<double,-1,1>>(n_data__.data(), N);
      {
        std::vector<local_scalar_t__> n_flat__;
        current_statement__ = 103;
        n_flat__ = context__.vals_r("n");
        current_statement__ = 103;
        pos__ = 1;
        current_statement__ = 103;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 103;
          stan::model::assign(n, n_flat__[(pos__ - 1)],
            "assigning variable n", stan::model::index_uni(sym1__));
          current_statement__ = 103;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 104;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 105;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      x_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,1>>(x_data__.data(), N);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 105;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 105;
        pos__ = 1;
        current_statement__ = 105;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 105;
          stan::model::assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", stan::model::index_uni(sym1__));
          current_statement__ = 105;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 106;
      stan::math::validate_non_negative_index("m", "N", N);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "m", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      m_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&m) Eigen::Map<Eigen::Matrix<double,-1,1>>(m_data__.data(), N);
      {
        std::vector<local_scalar_t__> m_flat__;
        current_statement__ = 107;
        m_flat__ = context__.vals_r("m");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 107;
          stan::model::assign(m, m_flat__[(pos__ - 1)],
            "assigning variable m", stan::model::index_uni(sym1__));
          current_statement__ = 107;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 108;
      stan::math::validate_non_negative_index("s2", "N", N);
      current_statement__ = 109;
      context__.validate_dims("data initialization", "s2", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      s2_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&s2) Eigen::Map<Eigen::Matrix<double,-1,1>>(s2_data__.data(), N);
      {
        std::vector<local_scalar_t__> s2_flat__;
        current_statement__ = 109;
        s2_flat__ = context__.vals_r("s2");
        current_statement__ = 109;
        pos__ = 1;
        current_statement__ = 109;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 109;
          stan::model::assign(s2, s2_flat__[(pos__ - 1)],
            "assigning variable s2", stan::model::index_uni(sym1__));
          current_statement__ = 109;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 110;
      context__.validate_dims("data initialization", "q", "double",
        std::vector<size_t>{});
      q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 110;
      q = context__.vals_r("q")[(1 - 1)];
      current_statement__ = 111;
      context__.validate_dims("data initialization", "shift", "double",
        std::vector<size_t>{});
      shift = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 111;
      shift = context__.vals_r("shift")[(1 - 1)];
      current_statement__ = 112;
      context__.validate_dims("data initialization", "priormu", "double",
        std::vector<size_t>{static_cast<size_t>(5)});
      priormu_data__ = Eigen::Matrix<double,-1,1>::Constant(5,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priormu)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(priormu_data__.data(), 5);
      {
        std::vector<local_scalar_t__> priormu_flat__;
        current_statement__ = 112;
        priormu_flat__ = context__.vals_r("priormu");
        current_statement__ = 112;
        pos__ = 1;
        current_statement__ = 112;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 112;
          stan::model::assign(priormu, priormu_flat__[(pos__ - 1)],
            "assigning variable priormu", stan::model::index_uni(sym1__));
          current_statement__ = 112;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 113;
      context__.validate_dims("data initialization", "priorlb", "double",
        std::vector<size_t>{static_cast<size_t>(5)});
      priorlb_data__ = Eigen::Matrix<double,-1,1>::Constant(5,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priorlb)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(priorlb_data__.data(), 5);
      {
        std::vector<local_scalar_t__> priorlb_flat__;
        current_statement__ = 113;
        priorlb_flat__ = context__.vals_r("priorlb");
        current_statement__ = 113;
        pos__ = 1;
        current_statement__ = 113;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 113;
          stan::model::assign(priorlb, priorlb_flat__[(pos__ - 1)],
            "assigning variable priorlb", stan::model::index_uni(sym1__));
          current_statement__ = 113;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 114;
      context__.validate_dims("data initialization", "priorub", "double",
        std::vector<size_t>{static_cast<size_t>(5)});
      priorub_data__ = Eigen::Matrix<double,-1,1>::Constant(5,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priorub)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(priorub_data__.data(), 5);
      {
        std::vector<local_scalar_t__> priorub_flat__;
        current_statement__ = 114;
        priorub_flat__ = context__.vals_r("priorub");
        current_statement__ = 114;
        pos__ = 1;
        current_statement__ = 114;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 114;
          stan::model::assign(priorub, priorub_flat__[(pos__ - 1)],
            "assigning variable priorub", stan::model::index_uni(sym1__));
          current_statement__ = 114;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 115;
      context__.validate_dims("data initialization", "shape1", "double",
        std::vector<size_t>{static_cast<size_t>(5)});
      shape1_data__ = Eigen::Matrix<double,-1,1>::Constant(5,
                        std::numeric_limits<double>::quiet_NaN());
      new (&shape1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(shape1_data__.data(), 5);
      {
        std::vector<local_scalar_t__> shape1_flat__;
        current_statement__ = 115;
        shape1_flat__ = context__.vals_r("shape1");
        current_statement__ = 115;
        pos__ = 1;
        current_statement__ = 115;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 115;
          stan::model::assign(shape1, shape1_flat__[(pos__ - 1)],
            "assigning variable shape1", stan::model::index_uni(sym1__));
          current_statement__ = 115;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 116;
      context__.validate_dims("data initialization", "shape2", "double",
        std::vector<size_t>{static_cast<size_t>(5)});
      shape2_data__ = Eigen::Matrix<double,-1,1>::Constant(5,
                        std::numeric_limits<double>::quiet_NaN());
      new (&shape2)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(shape2_data__.data(), 5);
      {
        std::vector<local_scalar_t__> shape2_flat__;
        current_statement__ = 116;
        shape2_flat__ = context__.vals_r("shape2");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 116;
          stan::model::assign(shape2, shape2_flat__[(pos__ - 1)],
            "assigning variable shape2", stan::model::index_uni(sym1__));
          current_statement__ = 116;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 117;
      context__.validate_dims("data initialization", "priorSigma", "double",
        std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(5)});
      priorSigma_data__ = Eigen::Matrix<double,-1,-1>::Constant(5, 5,
                            std::numeric_limits<double>::quiet_NaN());
      new (&priorSigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priorSigma_data__.data(), 5,
        5);
      {
        std::vector<local_scalar_t__> priorSigma_flat__;
        current_statement__ = 117;
        priorSigma_flat__ = context__.vals_r("priorSigma");
        current_statement__ = 117;
        pos__ = 1;
        current_statement__ = 117;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 117;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 117;
            stan::model::assign(priorSigma, priorSigma_flat__[(pos__ - 1)],
              "assigning variable priorSigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 117;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 117;
      stan::math::check_cov_matrix(function__, "priorSigma", priorSigma);
      current_statement__ = 118;
      context__.validate_dims("data initialization", "truncd", "double",
        std::vector<size_t>{});
      truncd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 118;
      truncd = context__.vals_r("truncd")[(1 - 1)];
      current_statement__ = 119;
      context__.validate_dims("data initialization", "data_type", "int",
        std::vector<size_t>{});
      data_type = std::numeric_limits<int>::min();
      current_statement__ = 119;
      data_type = context__.vals_i("data_type")[(1 - 1)];
      current_statement__ = 120;
      context__.validate_dims("data initialization", "is_increasing", "int",
        std::vector<size_t>{});
      is_increasing = std::numeric_limits<int>::min();
      current_statement__ = 120;
      is_increasing = context__.vals_i("is_increasing")[(1 - 1)];
      current_statement__ = 120;
      stan::math::check_greater_or_equal(function__, "is_increasing",
        is_increasing, 0);
      current_statement__ = 120;
      stan::math::check_less_or_equal(function__, "is_increasing",
        is_increasing, 1);
      current_statement__ = 121;
      context__.validate_dims("data initialization", "L", "double",
        std::vector<size_t>{});
      L = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 121;
      L = context__.vals_r("L")[(1 - 1)];
      current_statement__ = 122;
      context__.validate_dims("data initialization", "is_decreasing", "int",
        std::vector<size_t>{});
      is_decreasing = std::numeric_limits<int>::min();
      current_statement__ = 122;
      is_decreasing = context__.vals_i("is_decreasing")[(1 - 1)];
      current_statement__ = 122;
      stan::math::check_greater_or_equal(function__, "is_decreasing",
        is_decreasing, 0);
      current_statement__ = 122;
      stan::math::check_less_or_equal(function__, "is_decreasing",
        is_decreasing, 1);
      current_statement__ = 123;
      context__.validate_dims("data initialization", "U", "double",
        std::vector<size_t>{});
      U = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 123;
      U = context__.vals_r("U")[(1 - 1)];
      current_statement__ = 124;
      stan::math::validate_non_negative_index("pars3i", "is_increasing",
        is_increasing);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("pars3d", "is_decreasing",
        is_decreasing);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + is_increasing + is_decreasing + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_mL4";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_mL4_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ par1 = DUMMY_VAR__;
      current_statement__ = 1;
      par1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ par2 = DUMMY_VAR__;
      current_statement__ = 2;
      par2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      std::vector<local_scalar_t__> pars3i =
        std::vector<local_scalar_t__>(is_increasing, DUMMY_VAR__);
      current_statement__ = 3;
      pars3i = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, is_increasing);
      std::vector<local_scalar_t__> pars3d =
        std::vector<local_scalar_t__>(is_decreasing, DUMMY_VAR__);
      current_statement__ = 4;
      pars3d = in__.template read_constrain_lub<
                 std::vector<local_scalar_t__>, jacobian__>(0, 1, lp__,
                 is_decreasing);
      local_scalar_t__ par4 = DUMMY_VAR__;
      current_statement__ = 5;
      par4 = in__.template read<local_scalar_t__>();
      local_scalar_t__ par5 = DUMMY_VAR__;
      current_statement__ = 6;
      par5 = in__.template read<local_scalar_t__>();
      local_scalar_t__ b = DUMMY_VAR__;
      local_scalar_t__ a = DUMMY_VAR__;
      local_scalar_t__ c = DUMMY_VAR__;
      local_scalar_t__ par3 = DUMMY_VAR__;
      local_scalar_t__ d = DUMMY_VAR__;
      local_scalar_t__ k = DUMMY_VAR__;
      local_scalar_t__ mu_inf = DUMMY_VAR__;
      local_scalar_t__ invsigma2 = DUMMY_VAR__;
      local_scalar_t__ mu_0 = DUMMY_VAR__;
      current_statement__ = 16;
      mu_0 = par1;
      current_statement__ = 22;
      if (stan::math::logical_eq(is_increasing, 1)) {
        current_statement__ = 20;
        par3 = (L +
          stan::model::rvalue(pars3i, "pars3i", stan::model::index_uni(1)));
      } else {
        current_statement__ = 19;
        if (stan::math::logical_eq(is_decreasing, 1)) {
          current_statement__ = 17;
          par3 = (L + ((U - L) *
            stan::model::rvalue(pars3d, "pars3d", stan::model::index_uni(1))));
        }
      }
      current_statement__ = 23;
      mu_inf = (par1 * par3);
      current_statement__ = 39;
      if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
          ||
          stan::math::primitive_value(stan::math::logical_eq(data_type, 2)))) {
        current_statement__ = 37;
        if (stan::math::logical_eq(data_type, 1)) {
          current_statement__ = 35;
          a = mu_inf;
        } else {
          current_statement__ = 34;
          if (stan::math::logical_eq(data_type, 2)) {
            current_statement__ = 32;
            a = (stan::math::log(mu_inf) - shift);
          }
        }
      } else {
        current_statement__ = 31;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 3))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 4)))) {
          current_statement__ = 29;
          if (stan::math::logical_eq(data_type, 3)) {
            current_statement__ = 27;
            a = mu_0;
          } else {
            current_statement__ = 26;
            if (stan::math::logical_eq(data_type, 4)) {
              current_statement__ = 24;
              a = (stan::math::log(mu_0) - shift);
            }
          }
        }
      }
      current_statement__ = 55;
      if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
          ||
          stan::math::primitive_value(stan::math::logical_eq(data_type, 2)))) {
        current_statement__ = 53;
        if (stan::math::logical_eq(data_type, 1)) {
          current_statement__ = 51;
          c = ((stan::math::pow(3, 0.5) / stan::math::pi()) *
            stan::math::logit((mu_0 / mu_inf)));
        } else {
          current_statement__ = 50;
          if (stan::math::logical_eq(data_type, 2)) {
            current_statement__ = 48;
            c = ((stan::math::pow(3, 0.5) / stan::math::pi()) *
              stan::math::logit(((stan::math::log(mu_0) - shift) /
                (stan::math::log(mu_inf) - shift))));
          }
        }
      } else {
        current_statement__ = 47;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 3))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 4)))) {
          current_statement__ = 45;
          if (stan::math::logical_eq(data_type, 3)) {
            current_statement__ = 43;
            c = ((stan::math::pow(3, 0.5) / stan::math::pi()) *
              stan::math::logit((mu_inf / mu_0)));
          } else {
            current_statement__ = 42;
            if (stan::math::logical_eq(data_type, 4)) {
              current_statement__ = 40;
              c = ((stan::math::pow(3, 0.5) / stan::math::pi()) *
                stan::math::logit(((stan::math::log(mu_inf) - shift) /
                  (stan::math::log(mu_0) - shift))));
            }
          }
        }
      }
      current_statement__ = 56;
      d = stan::math::exp(par4);
      current_statement__ = 57;
      k = stan::math::log(par2);
      current_statement__ = 69;
      if (stan::math::logical_eq(data_type, 1)) {
        current_statement__ = 67;
        b = (stan::math::exp((-k * d)) * (((stan::math::pow(3, 0.5) /
          stan::math::pi()) *
          stan::math::logit(
            (stan::math::inv_logit(((stan::math::pi() /
               stan::math::pow(3, 0.5)) * c)) * (1 + q))))
          - c));
      } else {
        current_statement__ = 66;
        if (stan::math::logical_eq(data_type, 2)) {
          current_statement__ = 64;
          b = (stan::math::exp((-k * d)) * (((stan::math::pow(3, 0.5) /
            stan::math::pi()) *
            stan::math::logit(
              (stan::math::inv_logit(((stan::math::pi() /
                 stan::math::pow(3, 0.5)) * c)) + (stan::math::log((1 + q)) /
              a))))
            - c));
        } else {
          current_statement__ = 63;
          if (stan::math::logical_eq(data_type, 3)) {
            current_statement__ = 61;
            b = (stan::math::exp((-k * d)) * (((stan::math::pow(3, 0.5) /
              stan::math::pi()) *
              stan::math::logit(
                (stan::math::inv_logit(((stan::math::pi() /
                   stan::math::pow(3, 0.5)) * c)) + q)))
              - c));
          } else {
            current_statement__ = 60;
            if (stan::math::logical_eq(data_type, 4)) {
              current_statement__ = 58;
              b = (stan::math::exp((-k * d)) * (((stan::math::pow(3, 0.5) /
                stan::math::pi()) *
                stan::math::logit(
                  (stan::math::inv_logit(((stan::math::pi() /
                     stan::math::pow(3, 0.5)) * c)) -
                  (stan::math::log((1 - q)) / a))))
                - c));
            }
          }
        }
      }
      current_statement__ = 70;
      invsigma2 = stan::math::exp(par5);
      {
        current_statement__ = 71;
        lp_accum__.add(pert_dist_lpdf<propto__>(par1,
                         stan::model::rvalue(shape1, "shape1",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(shape2, "shape2",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(priorlb, "priorlb",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(priorub, "priorub",
                           stan::model::index_uni(1)), pstream__));
        current_statement__ = 72;
        lp_accum__.add(pert_dist_lpdf<propto__>(par2,
                         stan::model::rvalue(shape1, "shape1",
                           stan::model::index_uni(2)),
                         stan::model::rvalue(shape2, "shape2",
                           stan::model::index_uni(2)),
                         stan::model::rvalue(priorlb, "priorlb",
                           stan::model::index_uni(2)),
                         stan::model::rvalue(priorub, "priorub",
                           stan::model::index_uni(2)), pstream__));
        current_statement__ = 73;
        lp_accum__.add(pert_dist_lpdf<propto__>(par3,
                         stan::model::rvalue(shape1, "shape1",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(shape2, "shape2",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(priorlb, "priorlb",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(priorub, "priorub",
                           stan::model::index_uni(3)), pstream__));
        current_statement__ = 74;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(par4,
                         stan::model::rvalue(priormu, "priormu",
                           stan::model::index_uni(4)),
                         stan::model::rvalue(priorSigma, "priorSigma",
                           stan::model::index_uni(4),
                           stan::model::index_uni(4))));
        current_statement__ = 75;
        if (stan::math::logical_gt(par4, truncd)) {
          current_statement__ = 75;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 75;
          lp_accum__.add(-stan::math::normal_lcdf(truncd,
                            stan::model::rvalue(priormu, "priormu",
                              stan::model::index_uni(4)),
                            stan::model::rvalue(priorSigma, "priorSigma",
                              stan::model::index_uni(4),
                              stan::model::index_uni(4))));
        }
        current_statement__ = 76;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(par5,
                         stan::model::rvalue(priormu, "priormu",
                           stan::model::index_uni(5)),
                         stan::model::rvalue(priorSigma, "priorSigma",
                           stan::model::index_uni(5),
                           stan::model::index_uni(5))));
        current_statement__ = 100;
        if (stan::math::logical_eq(is_increasing, 1)) {
          current_statement__ = 98;
          if (stan::math::logical_eq(data_type, 1)) {
            current_statement__ = 96;
            for (int i = 1; i <= N; ++i) {
              current_statement__ = 94;
              lp_accum__.add((((((-0.5 *
                stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                stan::math::log(invsigma2))) - (((0.5 *
                (stan::model::rvalue(n, "n", stan::model::index_uni(i)) - 1))
                * stan::model::rvalue(s2, "s2", stan::model::index_uni(i))) *
                invsigma2)) - (((0.5 *
                stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                stan::math::square(
                  (stan::model::rvalue(m, "m", stan::model::index_uni(i)) -
                  (a *
                  stan::math::inv_logit(((stan::math::pi() /
                    stan::math::pow(3, 0.5)) * (c + (b *
                    stan::math::pow(
                      stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                      d))))))))) * invsigma2)));
            }
          } else {
            current_statement__ = 93;
            if (stan::math::logical_eq(data_type, 2)) {
              current_statement__ = 91;
              for (int i = 1; i <= N; ++i) {
                current_statement__ = 89;
                lp_accum__.add(((((((-0.5 *
                  stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                  stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                  stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                  stan::math::log(invsigma2))) - (((0.5 *
                  (stan::model::rvalue(n, "n", stan::model::index_uni(i)) -
                  1)) *
                  stan::model::rvalue(s2, "s2", stan::model::index_uni(i))) *
                  invsigma2)) - (((0.5 *
                  stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                  stan::math::square(
                    (stan::model::rvalue(m, "m", stan::model::index_uni(i)) -
                    (a *
                    stan::math::inv_logit(((stan::math::pi() /
                      stan::math::pow(3, 0.5)) * (c + (b *
                      stan::math::pow(
                        stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                        d))))))))) * invsigma2)) -
                  (stan::model::rvalue(m, "m", stan::model::index_uni(i)) *
                  stan::model::rvalue(n, "n", stan::model::index_uni(i)))));
              }
            }
          }
        } else {
          current_statement__ = 88;
          if (stan::math::logical_eq(is_decreasing, 1)) {
            current_statement__ = 86;
            if (stan::math::logical_eq(data_type, 3)) {
              current_statement__ = 84;
              for (int i = 1; i <= N; ++i) {
                current_statement__ = 82;
                lp_accum__.add((((((-0.5 *
                  stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                  stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                  stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                  stan::math::log(invsigma2))) - (((0.5 *
                  (stan::model::rvalue(n, "n", stan::model::index_uni(i)) -
                  1)) *
                  stan::model::rvalue(s2, "s2", stan::model::index_uni(i))) *
                  invsigma2)) - (((0.5 *
                  stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                  stan::math::square(
                    (stan::model::rvalue(m, "m", stan::model::index_uni(i)) -
                    ((a * (1 +
                    stan::math::inv_logit(((stan::math::pi() /
                      stan::math::pow(3, 0.5)) * c)))) - (a *
                    stan::math::inv_logit(((stan::math::pi() /
                      stan::math::pow(3, 0.5)) * (c + (b *
                      stan::math::pow(
                        stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                        d)))))))))) * invsigma2)));
              }
            } else {
              current_statement__ = 81;
              if (stan::math::logical_eq(data_type, 4)) {
                current_statement__ = 79;
                for (int i = 1; i <= N; ++i) {
                  current_statement__ = 77;
                  lp_accum__.add(((((((-0.5 *
                    stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                    stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                    stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                    stan::math::log(invsigma2))) - (((0.5 *
                    (stan::model::rvalue(n, "n", stan::model::index_uni(i)) -
                    1)) *
                    stan::model::rvalue(s2, "s2", stan::model::index_uni(i)))
                    * invsigma2)) - (((0.5 *
                    stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                    stan::math::square(
                      (stan::model::rvalue(m, "m", stan::model::index_uni(i))
                      - ((a * (1 +
                      stan::math::inv_logit(((stan::math::pi() /
                        stan::math::pow(3, 0.5)) * c)))) - (a *
                      stan::math::inv_logit(((stan::math::pi() /
                        stan::math::pow(3, 0.5)) * (c + (b *
                        stan::math::pow(
                          stan::model::rvalue(x, "x",
                            stan::model::index_uni(i)), d)))))))))) *
                    invsigma2)) -
                    (stan::model::rvalue(m, "m", stan::model::index_uni(i)) *
                    stan::model::rvalue(n, "n", stan::model::index_uni(i)))));
                }
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mL4_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double par1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      par1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double par2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      par2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      std::vector<double> pars3i =
        std::vector<double>(is_increasing,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      pars3i = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, is_increasing);
      std::vector<double> pars3d =
        std::vector<double>(is_decreasing,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      pars3d = in__.template read_constrain_lub<
                 std::vector<local_scalar_t__>, jacobian__>(0, 1, lp__,
                 is_decreasing);
      double par4 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      par4 = in__.template read<local_scalar_t__>();
      double par5 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      par5 = in__.template read<local_scalar_t__>();
      double b = std::numeric_limits<double>::quiet_NaN();
      double a = std::numeric_limits<double>::quiet_NaN();
      double c = std::numeric_limits<double>::quiet_NaN();
      double par3 = std::numeric_limits<double>::quiet_NaN();
      double d = std::numeric_limits<double>::quiet_NaN();
      double k = std::numeric_limits<double>::quiet_NaN();
      double mu_inf = std::numeric_limits<double>::quiet_NaN();
      double invsigma2 = std::numeric_limits<double>::quiet_NaN();
      double mu_0 = std::numeric_limits<double>::quiet_NaN();
      out__.write(par1);
      out__.write(par2);
      out__.write(pars3i);
      out__.write(pars3d);
      out__.write(par4);
      out__.write(par5);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 16;
      mu_0 = par1;
      current_statement__ = 22;
      if (stan::math::logical_eq(is_increasing, 1)) {
        current_statement__ = 20;
        par3 = (L +
          stan::model::rvalue(pars3i, "pars3i", stan::model::index_uni(1)));
      } else {
        current_statement__ = 19;
        if (stan::math::logical_eq(is_decreasing, 1)) {
          current_statement__ = 17;
          par3 = (L + ((U - L) *
            stan::model::rvalue(pars3d, "pars3d", stan::model::index_uni(1))));
        }
      }
      current_statement__ = 23;
      mu_inf = (par1 * par3);
      current_statement__ = 39;
      if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
          ||
          stan::math::primitive_value(stan::math::logical_eq(data_type, 2)))) {
        current_statement__ = 37;
        if (stan::math::logical_eq(data_type, 1)) {
          current_statement__ = 35;
          a = mu_inf;
        } else {
          current_statement__ = 34;
          if (stan::math::logical_eq(data_type, 2)) {
            current_statement__ = 32;
            a = (stan::math::log(mu_inf) - shift);
          }
        }
      } else {
        current_statement__ = 31;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 3))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 4)))) {
          current_statement__ = 29;
          if (stan::math::logical_eq(data_type, 3)) {
            current_statement__ = 27;
            a = mu_0;
          } else {
            current_statement__ = 26;
            if (stan::math::logical_eq(data_type, 4)) {
              current_statement__ = 24;
              a = (stan::math::log(mu_0) - shift);
            }
          }
        }
      }
      current_statement__ = 55;
      if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
          ||
          stan::math::primitive_value(stan::math::logical_eq(data_type, 2)))) {
        current_statement__ = 53;
        if (stan::math::logical_eq(data_type, 1)) {
          current_statement__ = 51;
          c = ((stan::math::pow(3, 0.5) / stan::math::pi()) *
            stan::math::logit((mu_0 / mu_inf)));
        } else {
          current_statement__ = 50;
          if (stan::math::logical_eq(data_type, 2)) {
            current_statement__ = 48;
            c = ((stan::math::pow(3, 0.5) / stan::math::pi()) *
              stan::math::logit(((stan::math::log(mu_0) - shift) /
                (stan::math::log(mu_inf) - shift))));
          }
        }
      } else {
        current_statement__ = 47;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 3))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 4)))) {
          current_statement__ = 45;
          if (stan::math::logical_eq(data_type, 3)) {
            current_statement__ = 43;
            c = ((stan::math::pow(3, 0.5) / stan::math::pi()) *
              stan::math::logit((mu_inf / mu_0)));
          } else {
            current_statement__ = 42;
            if (stan::math::logical_eq(data_type, 4)) {
              current_statement__ = 40;
              c = ((stan::math::pow(3, 0.5) / stan::math::pi()) *
                stan::math::logit(((stan::math::log(mu_inf) - shift) /
                  (stan::math::log(mu_0) - shift))));
            }
          }
        }
      }
      current_statement__ = 56;
      d = stan::math::exp(par4);
      current_statement__ = 57;
      k = stan::math::log(par2);
      current_statement__ = 69;
      if (stan::math::logical_eq(data_type, 1)) {
        current_statement__ = 67;
        b = (stan::math::exp((-k * d)) * (((stan::math::pow(3, 0.5) /
          stan::math::pi()) *
          stan::math::logit(
            (stan::math::inv_logit(((stan::math::pi() /
               stan::math::pow(3, 0.5)) * c)) * (1 + q))))
          - c));
      } else {
        current_statement__ = 66;
        if (stan::math::logical_eq(data_type, 2)) {
          current_statement__ = 64;
          b = (stan::math::exp((-k * d)) * (((stan::math::pow(3, 0.5) /
            stan::math::pi()) *
            stan::math::logit(
              (stan::math::inv_logit(((stan::math::pi() /
                 stan::math::pow(3, 0.5)) * c)) + (stan::math::log((1 + q)) /
              a))))
            - c));
        } else {
          current_statement__ = 63;
          if (stan::math::logical_eq(data_type, 3)) {
            current_statement__ = 61;
            b = (stan::math::exp((-k * d)) * (((stan::math::pow(3, 0.5) /
              stan::math::pi()) *
              stan::math::logit(
                (stan::math::inv_logit(((stan::math::pi() /
                   stan::math::pow(3, 0.5)) * c)) + q)))
              - c));
          } else {
            current_statement__ = 60;
            if (stan::math::logical_eq(data_type, 4)) {
              current_statement__ = 58;
              b = (stan::math::exp((-k * d)) * (((stan::math::pow(3, 0.5) /
                stan::math::pi()) *
                stan::math::logit(
                  (stan::math::inv_logit(((stan::math::pi() /
                     stan::math::pow(3, 0.5)) * c)) -
                  (stan::math::log((1 - q)) / a))))
                - c));
            }
          }
        }
      }
      current_statement__ = 70;
      invsigma2 = stan::math::exp(par5);
      if (emit_transformed_parameters__) {
        out__.write(b);
        out__.write(a);
        out__.write(c);
        out__.write(par3);
        out__.write(d);
        out__.write(k);
        out__.write(mu_inf);
        out__.write(invsigma2);
        out__.write(mu_0);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ par1 = DUMMY_VAR__;
      current_statement__ = 1;
      par1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, par1);
      local_scalar_t__ par2 = DUMMY_VAR__;
      current_statement__ = 2;
      par2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, par2);
      std::vector<local_scalar_t__> pars3i =
        std::vector<local_scalar_t__>(is_increasing, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(pars3i,
        in__.read<std::vector<local_scalar_t__>>(is_increasing),
        "assigning variable pars3i");
      out__.write_free_lb(0, pars3i);
      std::vector<local_scalar_t__> pars3d =
        std::vector<local_scalar_t__>(is_decreasing, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(pars3d,
        in__.read<std::vector<local_scalar_t__>>(is_decreasing),
        "assigning variable pars3d");
      out__.write_free_lub(0, 1, pars3d);
      local_scalar_t__ par4 = DUMMY_VAR__;
      current_statement__ = 5;
      par4 = in__.read<local_scalar_t__>();
      out__.write(par4);
      local_scalar_t__ par5 = DUMMY_VAR__;
      current_statement__ = 6;
      par5 = in__.read<local_scalar_t__>();
      out__.write(par5);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "par1", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "par2", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "pars3i", "double",
        std::vector<size_t>{static_cast<size_t>(is_increasing)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "pars3d", "double",
        std::vector<size_t>{static_cast<size_t>(is_decreasing)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "par4", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "par5", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ par1 = DUMMY_VAR__;
      current_statement__ = 1;
      par1 = context__.vals_r("par1")[(1 - 1)];
      out__.write_free_lb(0, par1);
      local_scalar_t__ par2 = DUMMY_VAR__;
      current_statement__ = 2;
      par2 = context__.vals_r("par2")[(1 - 1)];
      out__.write_free_lb(0, par2);
      std::vector<local_scalar_t__> pars3i =
        std::vector<local_scalar_t__>(is_increasing, DUMMY_VAR__);
      current_statement__ = 3;
      pars3i = context__.vals_r("pars3i");
      out__.write_free_lb(0, pars3i);
      std::vector<local_scalar_t__> pars3d =
        std::vector<local_scalar_t__>(is_decreasing, DUMMY_VAR__);
      current_statement__ = 4;
      pars3d = context__.vals_r("pars3d");
      out__.write_free_lub(0, 1, pars3d);
      local_scalar_t__ par4 = DUMMY_VAR__;
      current_statement__ = 5;
      par4 = context__.vals_r("par4")[(1 - 1)];
      out__.write(par4);
      local_scalar_t__ par5 = DUMMY_VAR__;
      current_statement__ = 6;
      par5 = context__.vals_r("par5")[(1 - 1)];
      out__.write(par5);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"par1", "par2", "pars3i", "pars3d",
                "par4", "par5"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"b", "a", "c", "par3", "d", "k", "mu_inf", "invsigma2", "mu_0"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(is_increasing)},
                std::vector<size_t>{static_cast<size_t>(is_decreasing)},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "par1");
    param_names__.emplace_back(std::string() + "par2");
    for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3i" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3d" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "par4");
    param_names__.emplace_back(std::string() + "par5");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "c");
      param_names__.emplace_back(std::string() + "par3");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "k");
      param_names__.emplace_back(std::string() + "mu_inf");
      param_names__.emplace_back(std::string() + "invsigma2");
      param_names__.emplace_back(std::string() + "mu_0");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "par1");
    param_names__.emplace_back(std::string() + "par2");
    for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3i" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3d" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "par4");
    param_names__.emplace_back(std::string() + "par5");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "c");
      param_names__.emplace_back(std::string() + "par3");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "k");
      param_names__.emplace_back(std::string() + "mu_inf");
      param_names__.emplace_back(std::string() + "invsigma2");
      param_names__.emplace_back(std::string() + "mu_0");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"par1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pars3i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_increasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_decreasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"par1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pars3i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_increasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_decreasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + is_increasing) + is_decreasing)
      + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((((1 +
      1) + 1) + 1) + 1) + 1) + 1) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + is_increasing) + is_decreasing)
      + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((((1 +
      1) + 1) + 1) + 1) + 1) + 1) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mL4_namespace::model_mL4;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mL4_namespace::profiles__;
}
#endif
#endif
