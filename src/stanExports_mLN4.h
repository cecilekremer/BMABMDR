// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_mLN4_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 36, column 1 to column 20)",
                                                      " (in 'string', line 37, column 1 to column 20)",
                                                      " (in 'string', line 38, column 1 to column 37)",
                                                      " (in 'string', line 39, column 1 to column 46)",
                                                      " (in 'string', line 40, column 1 to column 11)",
                                                      " (in 'string', line 41, column 1 to column 11)",
                                                      " (in 'string', line 44, column 2 to column 9)",
                                                      " (in 'string', line 45, column 2 to column 9)",
                                                      " (in 'string', line 46, column 2 to column 9)",
                                                      " (in 'string', line 47, column 2 to column 12)",
                                                      " (in 'string', line 48, column 2 to column 9)",
                                                      " (in 'string', line 49, column 2 to column 9)",
                                                      " (in 'string', line 50, column 2 to column 14)",
                                                      " (in 'string', line 51, column 2 to column 17)",
                                                      " (in 'string', line 52, column 2 to column 12)",
                                                      " (in 'string', line 53, column 2 to column 14)",
                                                      " (in 'string', line 57, column 4 to column 26)",
                                                      " (in 'string', line 56, column 44 to line 58, column 3)",
                                                      " (in 'string', line 56, column 8 to line 58, column 3)",
                                                      " (in 'string', line 55, column 4 to column 13)",
                                                      " (in 'string', line 54, column 38 to line 56, column 3)",
                                                      " (in 'string', line 54, column 2 to line 58, column 3)",
                                                      " (in 'string', line 62, column 4 to column 36)",
                                                      " (in 'string', line 61, column 25 to line 63, column 3)",
                                                      " (in 'string', line 61, column 8 to line 63, column 3)",
                                                      " (in 'string', line 60, column 4 to column 25)",
                                                      " (in 'string', line 59, column 19 to line 61, column 3)",
                                                      " (in 'string', line 59, column 2 to line 63, column 3)",
                                                      " (in 'string', line 64, column 2 to column 21)",
                                                      " (in 'string', line 68, column 4 to column 46)",
                                                      " (in 'string', line 67, column 44 to line 69, column 3)",
                                                      " (in 'string', line 67, column 8 to line 69, column 3)",
                                                      " (in 'string', line 66, column 4 to column 20)",
                                                      " (in 'string', line 65, column 38 to line 67, column 3)",
                                                      " (in 'string', line 65, column 2 to line 69, column 3)",
                                                      " (in 'string', line 70, column 2 to column 16)",
                                                      " (in 'string', line 71, column 2 to column 16)",
                                                      " (in 'string', line 79, column 4 to column 47)",
                                                      " (in 'string', line 78, column 26 to line 80, column 3)",
                                                      " (in 'string', line 78, column 8 to line 80, column 3)",
                                                      " (in 'string', line 77, column 4 to column 35)",
                                                      " (in 'string', line 76, column 26 to line 78, column 3)",
                                                      " (in 'string', line 76, column 8 to line 80, column 3)",
                                                      " (in 'string', line 75, column 4 to column 47)",
                                                      " (in 'string', line 74, column 26 to line 76, column 3)",
                                                      " (in 'string', line 74, column 8 to line 80, column 3)",
                                                      " (in 'string', line 73, column 4 to column 34)",
                                                      " (in 'string', line 72, column 20 to line 74, column 3)",
                                                      " (in 'string', line 72, column 2 to line 80, column 3)",
                                                      " (in 'string', line 81, column 2 to column 22)",
                                                      " (in 'string', line 84, column 4 to column 67)",
                                                      " (in 'string', line 85, column 4 to column 67)",
                                                      " (in 'string', line 86, column 4 to column 67)",
                                                      " (in 'string', line 87, column 48 to column 54)",
                                                      " (in 'string', line 87, column 4 to column 56)",
                                                      " (in 'string', line 88, column 4 to column 46)",
                                                      " (in 'string', line 96, column 18 to column 149)",
                                                      " (in 'string', line 96, column 17 to column 150)",
                                                      " (in 'string', line 96, column 5 to column 150)",
                                                      " (in 'string', line 97, column 18 to column 183)",
                                                      " (in 'string', line 97, column 17 to column 184)",
                                                      " (in 'string', line 97, column 5 to column 184)",
                                                      " (in 'string', line 95, column 18 to line 98, column 4)",
                                                      " (in 'string', line 95, column 4 to line 98, column 4)",
                                                      " (in 'string', line 94, column 43 to line 99, column 2)",
                                                      " (in 'string', line 94, column 7 to line 99, column 2)",
                                                      " (in 'string', line 91, column 18 to column 137)",
                                                      " (in 'string', line 91, column 17 to column 138)",
                                                      " (in 'string', line 91, column 5 to column 138)",
                                                      " (in 'string', line 92, column 18 to column 171)",
                                                      " (in 'string', line 92, column 17 to column 172)",
                                                      " (in 'string', line 92, column 5 to column 172)",
                                                      " (in 'string', line 90, column 17 to line 93, column 4)",
                                                      " (in 'string', line 90, column 3 to line 93, column 4)",
                                                      " (in 'string', line 89, column 37 to line 94, column 2)",
                                                      " (in 'string', line 89, column 1 to line 99, column 2)",
                                                      " (in 'string', line 15, column 2 to column 8)",
                                                      " (in 'string', line 16, column 9 to column 10)",
                                                      " (in 'string', line 16, column 2 to column 14)",
                                                      " (in 'string', line 17, column 9 to column 10)",
                                                      " (in 'string', line 17, column 2 to column 14)",
                                                      " (in 'string', line 18, column 9 to column 10)",
                                                      " (in 'string', line 18, column 2 to column 14)",
                                                      " (in 'string', line 19, column 9 to column 10)",
                                                      " (in 'string', line 19, column 2 to column 15)",
                                                      " (in 'string', line 20, column 2 to column 9)",
                                                      " (in 'string', line 21, column 2 to column 13)",
                                                      " (in 'string', line 22, column 2 to column 20)",
                                                      " (in 'string', line 23, column 2 to column 20)",
                                                      " (in 'string', line 24, column 2 to column 20)",
                                                      " (in 'string', line 25, column 2 to column 19)",
                                                      " (in 'string', line 26, column 2 to column 19)",
                                                      " (in 'string', line 27, column 2 to column 27)",
                                                      " (in 'string', line 28, column 2 to column 14)",
                                                      " (in 'string', line 29, column 2 to column 16)",
                                                      " (in 'string', line 30, column 2 to column 38)",
                                                      " (in 'string', line 31, column 2 to column 9)",
                                                      " (in 'string', line 32, column 2 to column 38)",
                                                      " (in 'string', line 33, column 2 to column 9)",
                                                      " (in 'string', line 38, column 22 to column 35)",
                                                      " (in 'string', line 39, column 31 to column 44)",
                                                      " (in 'string', line 3, column 4 to column 12)",
                                                      " (in 'string', line 4, column 4 to column 12)",
                                                      " (in 'string', line 5, column 4 to column 12)",
                                                      " (in 'string', line 6, column 4 to column 12)",
                                                      " (in 'string', line 7, column 4 to column 39)",
                                                      " (in 'string', line 8, column 4 to column 38)",
                                                      " (in 'string', line 9, column 4 to column 41)",
                                                      " (in 'string', line 10, column 4 to column 28)",
                                                      " (in 'string', line 11, column 4 to column 31)",
                                                      " (in 'string', line 2, column 74 to line 12, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
pert_dist_lpdf(const T0__& theta, const T1__& alpha, const T2__& beta,
               const T3__& lb, const T4__& ub, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x1;
    x1 = DUMMY_VAR__;
    
    local_scalar_t__ x2;
    x2 = DUMMY_VAR__;
    
    local_scalar_t__ x3;
    x3 = DUMMY_VAR__;
    
    local_scalar_t__ x4;
    x4 = DUMMY_VAR__;
    
    current_statement__ = 106;
    x1 = ((alpha - 1) * stan::math::log((theta - lb)));
    current_statement__ = 107;
    x2 = ((beta - 1) * stan::math::log((ub - theta)));
    current_statement__ = 108;
    x3 = (((alpha + beta) - 1) * stan::math::log((ub - lb)));
    current_statement__ = 109;
    x4 = lbeta(alpha, beta);
    current_statement__ = 110;
    return (((x1 + x2) - x3) - x4);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct pert_dist_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
operator()(const T0__& theta, const T1__& alpha, const T2__& beta,
           const T3__& lb, const T4__& ub, std::ostream* pstream__)  const 
{
return pert_dist_lpdf<propto__>(theta, alpha, beta, lb, ub, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_mLN4 final : public model_base_crtp<model_mLN4> {
private:
  int N;
  Eigen::Matrix<double, -1, 1> n;
  Eigen::Matrix<double, -1, 1> x;
  Eigen::Matrix<double, -1, 1> m;
  Eigen::Matrix<double, -1, 1> s2;
  double q;
  double shift;
  Eigen::Matrix<double, -1, 1> priormu;
  Eigen::Matrix<double, -1, 1> priorlb;
  Eigen::Matrix<double, -1, 1> priorub;
  Eigen::Matrix<double, -1, 1> shape1;
  Eigen::Matrix<double, -1, 1> shape2;
  Eigen::Matrix<double, -1, -1> priorSigma;
  double truncd;
  int data_type;
  int is_increasing;
  double L;
  int is_decreasing;
  double U;
 
public:
  ~model_mLN4() { }
  
  inline std::string model_name() const final { return "model_mLN4"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_mLN4(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_mLN4_namespace::model_mLN4";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 77;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 77;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 78;
      validate_non_negative_index("n", "N", N);
      current_statement__ = 79;
      context__.validate_dims("data initialization","n","double",
          context__.to_vec(N));
      n = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(n, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> n_flat__;
        current_statement__ = 79;
        assign(n_flat__, nil_index_list(), context__.vals_r("n"),
          "assigning variable n_flat__");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 79;
          assign(n, cons_list(index_uni(sym1__), nil_index_list()),
            n_flat__[(pos__ - 1)], "assigning variable n");
          current_statement__ = 79;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 80;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 81;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N));
      x = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 81;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 81;
          assign(x, cons_list(index_uni(sym1__), nil_index_list()),
            x_flat__[(pos__ - 1)], "assigning variable x");
          current_statement__ = 81;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 82;
      validate_non_negative_index("m", "N", N);
      current_statement__ = 83;
      context__.validate_dims("data initialization","m","double",
          context__.to_vec(N));
      m = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(m, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> m_flat__;
        current_statement__ = 83;
        assign(m_flat__, nil_index_list(), context__.vals_r("m"),
          "assigning variable m_flat__");
        current_statement__ = 83;
        pos__ = 1;
        current_statement__ = 83;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 83;
          assign(m, cons_list(index_uni(sym1__), nil_index_list()),
            m_flat__[(pos__ - 1)], "assigning variable m");
          current_statement__ = 83;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 84;
      validate_non_negative_index("s2", "N", N);
      current_statement__ = 85;
      context__.validate_dims("data initialization","s2","double",
          context__.to_vec(N));
      s2 = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(s2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> s2_flat__;
        current_statement__ = 85;
        assign(s2_flat__, nil_index_list(), context__.vals_r("s2"),
          "assigning variable s2_flat__");
        current_statement__ = 85;
        pos__ = 1;
        current_statement__ = 85;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 85;
          assign(s2, cons_list(index_uni(sym1__), nil_index_list()),
            s2_flat__[(pos__ - 1)], "assigning variable s2");
          current_statement__ = 85;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 86;
      context__.validate_dims("data initialization","q","double",
          context__.to_vec());
      q = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 86;
      q = context__.vals_r("q")[(1 - 1)];
      current_statement__ = 87;
      context__.validate_dims("data initialization","shift","double",
          context__.to_vec());
      shift = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 87;
      shift = context__.vals_r("shift")[(1 - 1)];
      current_statement__ = 88;
      context__.validate_dims("data initialization","priormu","double",
          context__.to_vec(5));
      priormu = Eigen::Matrix<double, -1, 1>(5);
      stan::math::fill(priormu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priormu_flat__;
        current_statement__ = 88;
        assign(priormu_flat__, nil_index_list(), context__.vals_r("priormu"),
          "assigning variable priormu_flat__");
        current_statement__ = 88;
        pos__ = 1;
        current_statement__ = 88;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 88;
          assign(priormu, cons_list(index_uni(sym1__), nil_index_list()),
            priormu_flat__[(pos__ - 1)], "assigning variable priormu");
          current_statement__ = 88;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 89;
      context__.validate_dims("data initialization","priorlb","double",
          context__.to_vec(5));
      priorlb = Eigen::Matrix<double, -1, 1>(5);
      stan::math::fill(priorlb, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorlb_flat__;
        current_statement__ = 89;
        assign(priorlb_flat__, nil_index_list(), context__.vals_r("priorlb"),
          "assigning variable priorlb_flat__");
        current_statement__ = 89;
        pos__ = 1;
        current_statement__ = 89;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 89;
          assign(priorlb, cons_list(index_uni(sym1__), nil_index_list()),
            priorlb_flat__[(pos__ - 1)], "assigning variable priorlb");
          current_statement__ = 89;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 90;
      context__.validate_dims("data initialization","priorub","double",
          context__.to_vec(5));
      priorub = Eigen::Matrix<double, -1, 1>(5);
      stan::math::fill(priorub, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorub_flat__;
        current_statement__ = 90;
        assign(priorub_flat__, nil_index_list(), context__.vals_r("priorub"),
          "assigning variable priorub_flat__");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 90;
          assign(priorub, cons_list(index_uni(sym1__), nil_index_list()),
            priorub_flat__[(pos__ - 1)], "assigning variable priorub");
          current_statement__ = 90;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 91;
      context__.validate_dims("data initialization","shape1","double",
          context__.to_vec(5));
      shape1 = Eigen::Matrix<double, -1, 1>(5);
      stan::math::fill(shape1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> shape1_flat__;
        current_statement__ = 91;
        assign(shape1_flat__, nil_index_list(), context__.vals_r("shape1"),
          "assigning variable shape1_flat__");
        current_statement__ = 91;
        pos__ = 1;
        current_statement__ = 91;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 91;
          assign(shape1, cons_list(index_uni(sym1__), nil_index_list()),
            shape1_flat__[(pos__ - 1)], "assigning variable shape1");
          current_statement__ = 91;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 92;
      context__.validate_dims("data initialization","shape2","double",
          context__.to_vec(5));
      shape2 = Eigen::Matrix<double, -1, 1>(5);
      stan::math::fill(shape2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> shape2_flat__;
        current_statement__ = 92;
        assign(shape2_flat__, nil_index_list(), context__.vals_r("shape2"),
          "assigning variable shape2_flat__");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 92;
          assign(shape2, cons_list(index_uni(sym1__), nil_index_list()),
            shape2_flat__[(pos__ - 1)], "assigning variable shape2");
          current_statement__ = 92;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 93;
      context__.validate_dims("data initialization","priorSigma","double",
          context__.to_vec(5, 5));
      priorSigma = Eigen::Matrix<double, -1, -1>(5, 5);
      stan::math::fill(priorSigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorSigma_flat__;
        current_statement__ = 93;
        assign(priorSigma_flat__, nil_index_list(),
          context__.vals_r("priorSigma"),
          "assigning variable priorSigma_flat__");
        current_statement__ = 93;
        pos__ = 1;
        current_statement__ = 93;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 93;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 93;
            assign(priorSigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priorSigma_flat__[(pos__ - 1)], "assigning variable priorSigma");
            current_statement__ = 93;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 93;
      current_statement__ = 93;
      check_cov_matrix(function__, "priorSigma", priorSigma);
      current_statement__ = 94;
      context__.validate_dims("data initialization","truncd","double",
          context__.to_vec());
      truncd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 94;
      truncd = context__.vals_r("truncd")[(1 - 1)];
      current_statement__ = 95;
      context__.validate_dims("data initialization","data_type","int",
          context__.to_vec());
      data_type = std::numeric_limits<int>::min();
      
      current_statement__ = 95;
      data_type = context__.vals_i("data_type")[(1 - 1)];
      current_statement__ = 96;
      context__.validate_dims("data initialization","is_increasing","int",
          context__.to_vec());
      is_increasing = std::numeric_limits<int>::min();
      
      current_statement__ = 96;
      is_increasing = context__.vals_i("is_increasing")[(1 - 1)];
      current_statement__ = 96;
      current_statement__ = 96;
      check_greater_or_equal(function__, "is_increasing", is_increasing, 0);
      current_statement__ = 96;
      current_statement__ = 96;
      check_less_or_equal(function__, "is_increasing", is_increasing, 1);
      current_statement__ = 97;
      context__.validate_dims("data initialization","L","double",
          context__.to_vec());
      L = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 97;
      L = context__.vals_r("L")[(1 - 1)];
      current_statement__ = 98;
      context__.validate_dims("data initialization","is_decreasing","int",
          context__.to_vec());
      is_decreasing = std::numeric_limits<int>::min();
      
      current_statement__ = 98;
      is_decreasing = context__.vals_i("is_decreasing")[(1 - 1)];
      current_statement__ = 98;
      current_statement__ = 98;
      check_greater_or_equal(function__, "is_decreasing", is_decreasing, 0);
      current_statement__ = 98;
      current_statement__ = 98;
      check_less_or_equal(function__, "is_decreasing", is_decreasing, 1);
      current_statement__ = 99;
      context__.validate_dims("data initialization","U","double",
          context__.to_vec());
      U = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 99;
      U = context__.vals_r("U")[(1 - 1)];
      current_statement__ = 100;
      validate_non_negative_index("pars3i", "is_increasing", is_increasing);
      current_statement__ = 101;
      validate_non_negative_index("pars3d", "is_decreasing", is_decreasing);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += is_increasing;
      num_params_r__ += is_decreasing;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_mLN4_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ par1;
      par1 = DUMMY_VAR__;
      
      current_statement__ = 1;
      par1 = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        par1 = stan::math::lb_constrain(par1, 0, lp__);
      } else {
        current_statement__ = 1;
        par1 = stan::math::lb_constrain(par1, 0);
      }
      local_scalar_t__ par2;
      par2 = DUMMY_VAR__;
      
      current_statement__ = 2;
      par2 = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        par2 = stan::math::lb_constrain(par2, 0, lp__);
      } else {
        current_statement__ = 2;
        par2 = stan::math::lb_constrain(par2, 0);
      }
      std::vector<local_scalar_t__> pars3i;
      pars3i = std::vector<local_scalar_t__>(is_increasing, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        current_statement__ = 3;
        assign(pars3i, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable pars3i");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(pars3i, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(pars3i[(sym1__ - 1)], 0, lp__),
            "assigning variable pars3i");
        } else {
          current_statement__ = 3;
          assign(pars3i, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(pars3i[(sym1__ - 1)], 0),
            "assigning variable pars3i");
        }}
      std::vector<local_scalar_t__> pars3d;
      pars3d = std::vector<local_scalar_t__>(is_decreasing, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        current_statement__ = 4;
        assign(pars3d, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable pars3d");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(pars3d, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(pars3d[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable pars3d");
        } else {
          current_statement__ = 4;
          assign(pars3d, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(pars3d[(sym1__ - 1)], 0, 1),
            "assigning variable pars3d");
        }}
      local_scalar_t__ par4;
      par4 = DUMMY_VAR__;
      
      current_statement__ = 5;
      par4 = in__.scalar();
      local_scalar_t__ par5;
      par5 = DUMMY_VAR__;
      
      current_statement__ = 6;
      par5 = in__.scalar();
      local_scalar_t__ b;
      b = DUMMY_VAR__;
      
      local_scalar_t__ a;
      a = DUMMY_VAR__;
      
      local_scalar_t__ c;
      c = DUMMY_VAR__;
      
      local_scalar_t__ par3;
      par3 = DUMMY_VAR__;
      
      local_scalar_t__ d;
      d = DUMMY_VAR__;
      
      local_scalar_t__ k;
      k = DUMMY_VAR__;
      
      local_scalar_t__ mu_inf;
      mu_inf = DUMMY_VAR__;
      
      local_scalar_t__ invsigma2;
      invsigma2 = DUMMY_VAR__;
      
      local_scalar_t__ mu_0;
      mu_0 = DUMMY_VAR__;
      
      current_statement__ = 16;
      mu_0 = par1;
      current_statement__ = 22;
      if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
          logical_eq(data_type, 3)))) {
        current_statement__ = 20;
        a = par1;
      } else {
        current_statement__ = 19;
        if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
            logical_eq(data_type, 4)))) {
          current_statement__ = 17;
          a = (stan::math::log(par1) - shift);
        } 
      }
      current_statement__ = 28;
      if (is_increasing) {
        current_statement__ = 26;
        par3 = (L + pars3i[(1 - 1)]);
      } else {
        current_statement__ = 25;
        if (is_decreasing) {
          current_statement__ = 23;
          par3 = (L + ((U - L) * pars3d[(1 - 1)]));
        } 
      }
      current_statement__ = 29;
      mu_inf = (par1 * par3);
      current_statement__ = 35;
      if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
          logical_eq(data_type, 3)))) {
        current_statement__ = 33;
        c = (mu_inf / mu_0);
      } else {
        current_statement__ = 32;
        if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
            logical_eq(data_type, 4)))) {
          current_statement__ = 30;
          c = ((stan::math::log(mu_inf) - shift) /
                (stan::math::log(mu_0) - shift));
        } 
      }
      current_statement__ = 36;
      d = stan::math::exp(par4);
      current_statement__ = 37;
      k = stan::math::log(par2);
      current_statement__ = 49;
      if (logical_eq(data_type, 1)) {
        current_statement__ = 47;
        b = stan::math::exp((inv_Phi((q / (c - 1))) - (k * d)));
      } else {
        current_statement__ = 46;
        if (logical_eq(data_type, 2)) {
          current_statement__ = 44;
          b = stan::math::exp(
                (inv_Phi((stan::math::log((1 + q)) / (a * (c - 1)))) -
                  (k * d)));
        } else {
          current_statement__ = 43;
          if (logical_eq(data_type, 3)) {
            current_statement__ = 41;
            b = stan::math::exp((inv_Phi((-q / (c - 1))) - (k * d)));
          } else {
            current_statement__ = 40;
            if (logical_eq(data_type, 4)) {
              current_statement__ = 38;
              b = stan::math::exp(
                    (inv_Phi((stan::math::log((1 - q)) / (a * (c - 1)))) -
                      (k * d)));
            } 
          }
        }
      }
      current_statement__ = 50;
      invsigma2 = stan::math::exp(par5);
      {
        current_statement__ = 51;
        lp_accum__.add(
          pert_dist_lpdf<propto__>(par1, shape1[(1 - 1)], shape2[(1 - 1)],
            priorlb[(1 - 1)], priorub[(1 - 1)], pstream__));
        current_statement__ = 52;
        lp_accum__.add(
          pert_dist_lpdf<propto__>(par2, shape1[(2 - 1)], shape2[(2 - 1)],
            priorlb[(2 - 1)], priorub[(2 - 1)], pstream__));
        current_statement__ = 53;
        lp_accum__.add(
          pert_dist_lpdf<propto__>(par3, shape1[(3 - 1)], shape2[(3 - 1)],
            priorlb[(3 - 1)], priorub[(3 - 1)], pstream__));
        current_statement__ = 54;
        if (logical_gt(par4, truncd)) {
          current_statement__ = 54;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 54;
          lp_accum__.add(
            -normal_cdf_log(truncd, priormu[(4 - 1)],
               rvalue(priorSigma,
                 cons_list(index_uni(4),
                   cons_list(index_uni(4), nil_index_list())), "priorSigma")));
        }
        current_statement__ = 55;
        lp_accum__.add(
          normal_lpdf<propto__>(par4, priormu[(4 - 1)],
            rvalue(priorSigma,
              cons_list(index_uni(4),
                cons_list(index_uni(4), nil_index_list())), "priorSigma")));
        current_statement__ = 56;
        lp_accum__.add(
          normal_lpdf<propto__>(par5, priormu[(5 - 1)],
            rvalue(priorSigma,
              cons_list(index_uni(5),
                cons_list(index_uni(5), nil_index_list())), "priorSigma")));
        current_statement__ = 76;
        if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
            logical_eq(data_type, 3)))) {
          current_statement__ = 74;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 69;
            if (logical_eq(x[(i - 1)], 0)) {
              current_statement__ = 67;
              lp_accum__.add(
                (((((-0.5 * n[(i - 1)]) *
                     stan::math::log((2 * stan::math::pi()))) +
                    ((0.5 * n[(i - 1)]) * stan::math::log(invsigma2))) -
                   (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) * invsigma2)) -
                  (((0.5 * n[(i - 1)]) * square((m[(i - 1)] - a))) *
                    invsigma2)));
            } 
            current_statement__ = 72;
            if (logical_gt(x[(i - 1)], 0)) {
              current_statement__ = 70;
              lp_accum__.add(
                (((((-0.5 * n[(i - 1)]) *
                     stan::math::log((2 * stan::math::pi()))) +
                    ((0.5 * n[(i - 1)]) * stan::math::log(invsigma2))) -
                   (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) * invsigma2)) -
                  (((0.5 * n[(i - 1)]) *
                     square(
                       ((m[(i - 1)] - a) -
                         ((a * (c - 1)) *
                           Phi(
                             (stan::math::log(b) +
                               (d * stan::math::log(x[(i - 1)])))))))) *
                    invsigma2)));
            } }
        } else {
          current_statement__ = 66;
          if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
              logical_eq(data_type, 4)))) {
            current_statement__ = 64;
            for (int i = 1; i <= N; ++i) {
              current_statement__ = 59;
              if (logical_eq(x[(i - 1)], 0)) {
                current_statement__ = 57;
                lp_accum__.add(
                  ((((((-0.5 * n[(i - 1)]) *
                        stan::math::log((2 * stan::math::pi()))) +
                       ((0.5 * n[(i - 1)]) * stan::math::log(invsigma2))) -
                      (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) * invsigma2))
                     -
                     (((0.5 * n[(i - 1)]) * square((m[(i - 1)] - a))) *
                       invsigma2)) - (m[(i - 1)] * n[(i - 1)])));
              } 
              current_statement__ = 62;
              if (logical_gt(x[(i - 1)], 0)) {
                current_statement__ = 60;
                lp_accum__.add(
                  ((((((-0.5 * n[(i - 1)]) *
                        stan::math::log((2 * stan::math::pi()))) +
                       ((0.5 * n[(i - 1)]) * stan::math::log(invsigma2))) -
                      (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) * invsigma2))
                     -
                     (((0.5 * n[(i - 1)]) *
                        square(
                          ((m[(i - 1)] - a) -
                            ((a * (c - 1)) *
                              Phi(
                                (stan::math::log(b) +
                                  (d * stan::math::log(x[(i - 1)])))))))) *
                       invsigma2)) - (m[(i - 1)] * n[(i - 1)])));
              } }
          } 
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_mLN4_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double par1;
      par1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      par1 = in__.scalar();
      current_statement__ = 1;
      par1 = stan::math::lb_constrain(par1, 0);
      double par2;
      par2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      par2 = in__.scalar();
      current_statement__ = 2;
      par2 = stan::math::lb_constrain(par2, 0);
      std::vector<double> pars3i;
      pars3i = std::vector<double>(is_increasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        current_statement__ = 3;
        assign(pars3i, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable pars3i");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        current_statement__ = 3;
        assign(pars3i, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(pars3i[(sym1__ - 1)], 0),
          "assigning variable pars3i");}
      std::vector<double> pars3d;
      pars3d = std::vector<double>(is_decreasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        current_statement__ = 4;
        assign(pars3d, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable pars3d");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        current_statement__ = 4;
        assign(pars3d, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(pars3d[(sym1__ - 1)], 0, 1),
          "assigning variable pars3d");}
      double par4;
      par4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      par4 = in__.scalar();
      double par5;
      par5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      par5 = in__.scalar();
      double b;
      b = std::numeric_limits<double>::quiet_NaN();
      
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      double c;
      c = std::numeric_limits<double>::quiet_NaN();
      
      double par3;
      par3 = std::numeric_limits<double>::quiet_NaN();
      
      double d;
      d = std::numeric_limits<double>::quiet_NaN();
      
      double k;
      k = std::numeric_limits<double>::quiet_NaN();
      
      double mu_inf;
      mu_inf = std::numeric_limits<double>::quiet_NaN();
      
      double invsigma2;
      invsigma2 = std::numeric_limits<double>::quiet_NaN();
      
      double mu_0;
      mu_0 = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(par1);
      vars__.emplace_back(par2);
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        vars__.emplace_back(pars3i[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        vars__.emplace_back(pars3d[(sym1__ - 1)]);}
      vars__.emplace_back(par4);
      vars__.emplace_back(par5);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 16;
      mu_0 = par1;
      current_statement__ = 22;
      if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
          logical_eq(data_type, 3)))) {
        current_statement__ = 20;
        a = par1;
      } else {
        current_statement__ = 19;
        if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
            logical_eq(data_type, 4)))) {
          current_statement__ = 17;
          a = (stan::math::log(par1) - shift);
        } 
      }
      current_statement__ = 28;
      if (is_increasing) {
        current_statement__ = 26;
        par3 = (L + pars3i[(1 - 1)]);
      } else {
        current_statement__ = 25;
        if (is_decreasing) {
          current_statement__ = 23;
          par3 = (L + ((U - L) * pars3d[(1 - 1)]));
        } 
      }
      current_statement__ = 29;
      mu_inf = (par1 * par3);
      current_statement__ = 35;
      if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
          logical_eq(data_type, 3)))) {
        current_statement__ = 33;
        c = (mu_inf / mu_0);
      } else {
        current_statement__ = 32;
        if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
            logical_eq(data_type, 4)))) {
          current_statement__ = 30;
          c = ((stan::math::log(mu_inf) - shift) /
                (stan::math::log(mu_0) - shift));
        } 
      }
      current_statement__ = 36;
      d = stan::math::exp(par4);
      current_statement__ = 37;
      k = stan::math::log(par2);
      current_statement__ = 49;
      if (logical_eq(data_type, 1)) {
        current_statement__ = 47;
        b = stan::math::exp((inv_Phi((q / (c - 1))) - (k * d)));
      } else {
        current_statement__ = 46;
        if (logical_eq(data_type, 2)) {
          current_statement__ = 44;
          b = stan::math::exp(
                (inv_Phi((stan::math::log((1 + q)) / (a * (c - 1)))) -
                  (k * d)));
        } else {
          current_statement__ = 43;
          if (logical_eq(data_type, 3)) {
            current_statement__ = 41;
            b = stan::math::exp((inv_Phi((-q / (c - 1))) - (k * d)));
          } else {
            current_statement__ = 40;
            if (logical_eq(data_type, 4)) {
              current_statement__ = 38;
              b = stan::math::exp(
                    (inv_Phi((stan::math::log((1 - q)) / (a * (c - 1)))) -
                      (k * d)));
            } 
          }
        }
      }
      current_statement__ = 50;
      invsigma2 = stan::math::exp(par5);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(b);
        vars__.emplace_back(a);
        vars__.emplace_back(c);
        vars__.emplace_back(par3);
        vars__.emplace_back(d);
        vars__.emplace_back(k);
        vars__.emplace_back(mu_inf);
        vars__.emplace_back(invsigma2);
        vars__.emplace_back(mu_0);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double par1;
      par1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      par1 = context__.vals_r("par1")[(1 - 1)];
      double par1_free__;
      par1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      par1_free__ = stan::math::lb_free(par1, 0);
      double par2;
      par2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      par2 = context__.vals_r("par2")[(1 - 1)];
      double par2_free__;
      par2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      par2_free__ = stan::math::lb_free(par2, 0);
      std::vector<double> pars3i;
      pars3i = std::vector<double>(is_increasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(pars3i, nil_index_list(), context__.vals_r("pars3i"),
        "assigning variable pars3i");
      std::vector<double> pars3i_free__;
      pars3i_free__ = std::vector<double>(is_increasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        current_statement__ = 3;
        assign(pars3i_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(pars3i[(sym1__ - 1)], 0),
          "assigning variable pars3i_free__");}
      std::vector<double> pars3d;
      pars3d = std::vector<double>(is_decreasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(pars3d, nil_index_list(), context__.vals_r("pars3d"),
        "assigning variable pars3d");
      std::vector<double> pars3d_free__;
      pars3d_free__ = std::vector<double>(is_decreasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        current_statement__ = 4;
        assign(pars3d_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(pars3d[(sym1__ - 1)], 0, 1),
          "assigning variable pars3d_free__");}
      double par4;
      par4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      par4 = context__.vals_r("par4")[(1 - 1)];
      double par5;
      par5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      par5 = context__.vals_r("par5")[(1 - 1)];
      vars__.emplace_back(par1_free__);
      vars__.emplace_back(par2_free__);
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        vars__.emplace_back(pars3i_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        vars__.emplace_back(pars3d_free__[(sym1__ - 1)]);}
      vars__.emplace_back(par4);
      vars__.emplace_back(par5);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("par1");
    names__.emplace_back("par2");
    names__.emplace_back("pars3i");
    names__.emplace_back("pars3d");
    names__.emplace_back("par4");
    names__.emplace_back("par5");
    names__.emplace_back("b");
    names__.emplace_back("a");
    names__.emplace_back("c");
    names__.emplace_back("par3");
    names__.emplace_back("d");
    names__.emplace_back("k");
    names__.emplace_back("mu_inf");
    names__.emplace_back("invsigma2");
    names__.emplace_back("mu_0");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(is_increasing)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(is_decreasing)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "par1");
    param_names__.emplace_back(std::string() + "par2");
    for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pars3i" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pars3d" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "par4");
    param_names__.emplace_back(std::string() + "par5");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "c");
      param_names__.emplace_back(std::string() + "par3");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "k");
      param_names__.emplace_back(std::string() + "mu_inf");
      param_names__.emplace_back(std::string() + "invsigma2");
      param_names__.emplace_back(std::string() + "mu_0");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "par1");
    param_names__.emplace_back(std::string() + "par2");
    for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pars3i" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pars3d" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "par4");
    param_names__.emplace_back(std::string() + "par5");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "c");
      param_names__.emplace_back(std::string() + "par3");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "k");
      param_names__.emplace_back(std::string() + "mu_inf");
      param_names__.emplace_back(std::string() + "invsigma2");
      param_names__.emplace_back(std::string() + "mu_0");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"par1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pars3i\",\"type\":{\"name\":\"array\",\"length\":" << is_increasing << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3d\",\"type\":{\"name\":\"array\",\"length\":" << is_decreasing << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"par1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pars3i\",\"type\":{\"name\":\"array\",\"length\":" << is_increasing << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3d\",\"type\":{\"name\":\"array\",\"length\":" << is_decreasing << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_mLN4_namespace::model_mLN4;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mLN4_namespace::profiles__;
}
#endif
#endif
