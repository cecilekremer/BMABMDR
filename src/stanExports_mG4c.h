// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mG4c_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 208> locations_array__ =
  {" (found before start of program)",
  " (in 'mG4c', line 66, column 2 to column 21)",
  " (in 'mG4c', line 67, column 2 to column 30)",
  " (in 'mG4c', line 68, column 2 to column 38)",
  " (in 'mG4c', line 69, column 2 to column 47)",
  " (in 'mG4c', line 70, column 2 to column 12)",
  " (in 'mG4c', line 71, column 2 to column 12)",
  " (in 'mG4c', line 72, column 2 to column 12)",
  " (in 'mG4c', line 75, column 2 to column 9)",
  " (in 'mG4c', line 76, column 2 to column 9)",
  " (in 'mG4c', line 77, column 2 to column 9)",
  " (in 'mG4c', line 78, column 2 to column 12)",
  " (in 'mG4c', line 79, column 2 to column 9)",
  " (in 'mG4c', line 80, column 2 to column 9)",
  " (in 'mG4c', line 81, column 2 to column 14)",
  " (in 'mG4c', line 82, column 2 to column 17)",
  " (in 'mG4c', line 83, column 2 to column 12)",
  " (in 'mG4c', line 84, column 2 to column 18)",
  " (in 'mG4c', line 85, column 2 to column 20)",
  " (in 'mG4c', line 86, column 2 to column 18)",
  " (in 'mG4c', line 87, column 2 to column 19)",
  " (in 'mG4c', line 88, column 2 to column 21)",
  " (in 'mG4c', line 89, column 2 to column 14)",
  " (in 'mG4c', line 93, column 4 to column 26)",
  " (in 'mG4c', line 92, column 44 to line 94, column 3)",
  " (in 'mG4c', line 92, column 8 to line 94, column 3)",
  " (in 'mG4c', line 91, column 4 to column 13)",
  " (in 'mG4c', line 90, column 38 to line 92, column 3)",
  " (in 'mG4c', line 90, column 2 to line 94, column 3)",
  " (in 'mG4c', line 98, column 4 to column 36)",
  " (in 'mG4c', line 97, column 25 to line 99, column 3)",
  " (in 'mG4c', line 97, column 8 to line 99, column 3)",
  " (in 'mG4c', line 96, column 4 to column 25)",
  " (in 'mG4c', line 95, column 19 to line 97, column 3)",
  " (in 'mG4c', line 95, column 2 to line 99, column 3)",
  " (in 'mG4c', line 100, column 2 to column 21)",
  " (in 'mG4c', line 104, column 4 to column 46)",
  " (in 'mG4c', line 103, column 44 to line 105, column 3)",
  " (in 'mG4c', line 103, column 8 to line 105, column 3)",
  " (in 'mG4c', line 102, column 4 to column 20)",
  " (in 'mG4c', line 101, column 38 to line 103, column 3)",
  " (in 'mG4c', line 101, column 2 to line 105, column 3)",
  " (in 'mG4c', line 106, column 2 to column 16)",
  " (in 'mG4c', line 107, column 2 to column 16)",
  " (in 'mG4c', line 108, column 2 to column 22)",
  " (in 'mG4c', line 109, column 3 to column 21)",
  " (in 'mG4c', line 110, column 3 to column 16)",
  " (in 'mG4c', line 111, column 3 to column 16)",
  " (in 'mG4c', line 112, column 3 to column 16)",
  " (in 'mG4c', line 113, column 3 to column 23)",
  " (in 'mG4c', line 114, column 3 to column 101)",
  " (in 'mG4c', line 115, column 3 to column 16)",
  " (in 'mG4c', line 118, column 2 to column 65)",
  " (in 'mG4c', line 119, column 2 to column 65)",
  " (in 'mG4c', line 120, column 2 to column 65)",
  " (in 'mG4c', line 121, column 2 to column 54)",
  " (in 'mG4c', line 121, column 46 to column 52)",
  " (in 'mG4c', line 122, column 2 to column 44)",
  " (in 'mG4c', line 123, column 2 to column 65)",
  " (in 'mG4c', line 155, column 4 to column 12)",
  " (in 'mG4c', line 156, column 4 to column 12)",
  " (in 'mG4c', line 158, column 4 to column 11)",
  " (in 'mG4c', line 159, column 4 to column 12)",
  " (in 'mG4c', line 160, column 4 to column 41)",
  " (in 'mG4c', line 161, column 4 to column 14)",
  " (in 'mG4c', line 163, column 4 to column 23)",
  " (in 'mG4c', line 164, column 17 to column 19)",
  " (in 'mG4c', line 164, column 6 to column 26)",
  " (in 'mG4c', line 165, column 17 to column 19)",
  " (in 'mG4c', line 165, column 6 to column 23)",
  " (in 'mG4c', line 166, column 13 to column 15)",
  " (in 'mG4c', line 166, column 17 to column 19)",
  " (in 'mG4c', line 166, column 6 to column 23)",
  " (in 'mG4c', line 167, column 13 to column 15)",
  " (in 'mG4c', line 167, column 17 to column 19)",
  " (in 'mG4c', line 167, column 6 to column 27)",
  " (in 'mG4c', line 168, column 6 to column 26)",
  " (in 'mG4c', line 169, column 6 to column 33)",
  " (in 'mG4c', line 175, column 12 to column 38)",
  " (in 'mG4c', line 174, column 15 to line 176, column 11)",
  " (in 'mG4c', line 173, column 12 to column 28)",
  " (in 'mG4c', line 172, column 24 to line 174, column 11)",
  " (in 'mG4c', line 172, column 10 to line 176, column 11)",
  " (in 'mG4c', line 171, column 24 to line 177, column 9)",
  " (in 'mG4c', line 171, column 8 to line 177, column 9)",
  " (in 'mG4c', line 170, column 22 to line 178, column 7)",
  " (in 'mG4c', line 170, column 6 to line 178, column 7)",
  " (in 'mG4c', line 179, column 6 to column 30)",
  " (in 'mG4c', line 180, column 6 to column 51)",
  " (in 'mG4c', line 181, column 6 to column 29)",
  " (in 'mG4c', line 182, column 4 to column 18)",
  " (in 'mG4c', line 162, column 18 to line 183, column 5)",
  " (in 'mG4c', line 162, column 4 to line 183, column 5)",
  " (in 'mG4c', line 157, column 17 to line 184, column 5)",
  " (in 'mG4c', line 157, column 4 to line 184, column 5)",
  " (in 'mG4c', line 154, column 44 to line 185, column 3)",
  " (in 'mG4c', line 154, column 8 to line 185, column 3)",
  " (in 'mG4c', line 125, column 4 to column 12)",
  " (in 'mG4c', line 126, column 4 to column 12)",
  " (in 'mG4c', line 128, column 4 to column 11)",
  " (in 'mG4c', line 129, column 4 to column 12)",
  " (in 'mG4c', line 130, column 4 to column 41)",
  " (in 'mG4c', line 131, column 4 to column 14)",
  " (in 'mG4c', line 133, column 4 to column 23)",
  " (in 'mG4c', line 134, column 17 to column 19)",
  " (in 'mG4c', line 134, column 6 to column 26)",
  " (in 'mG4c', line 135, column 17 to column 19)",
  " (in 'mG4c', line 135, column 6 to column 23)",
  " (in 'mG4c', line 136, column 13 to column 15)",
  " (in 'mG4c', line 136, column 17 to column 19)",
  " (in 'mG4c', line 136, column 6 to column 23)",
  " (in 'mG4c', line 137, column 13 to column 15)",
  " (in 'mG4c', line 137, column 17 to column 19)",
  " (in 'mG4c', line 137, column 6 to column 27)",
  " (in 'mG4c', line 138, column 6 to column 26)",
  " (in 'mG4c', line 139, column 6 to column 33)",
  " (in 'mG4c', line 145, column 12 to column 38)",
  " (in 'mG4c', line 144, column 15 to line 146, column 11)",
  " (in 'mG4c', line 143, column 12 to column 28)",
  " (in 'mG4c', line 142, column 24 to line 144, column 11)",
  " (in 'mG4c', line 142, column 10 to line 146, column 11)",
  " (in 'mG4c', line 141, column 24 to line 147, column 9)",
  " (in 'mG4c', line 141, column 8 to line 147, column 9)",
  " (in 'mG4c', line 140, column 22 to line 148, column 7)",
  " (in 'mG4c', line 140, column 6 to line 148, column 7)",
  " (in 'mG4c', line 149, column 6 to column 30)",
  " (in 'mG4c', line 150, column 6 to column 51)",
  " (in 'mG4c', line 151, column 4 to column 18)",
  " (in 'mG4c', line 132, column 18 to line 152, column 5)",
  " (in 'mG4c', line 132, column 4 to line 152, column 5)",
  " (in 'mG4c', line 127, column 17 to line 153, column 5)",
  " (in 'mG4c', line 127, column 4 to line 153, column 5)",
  " (in 'mG4c', line 124, column 38 to line 154, column 3)",
  " (in 'mG4c', line 124, column 2 to line 185, column 3)",
  " (in 'mG4c', line 37, column 2 to column 8)",
  " (in 'mG4c', line 38, column 8 to column 9)",
  " (in 'mG4c', line 38, column 2 to column 11)",
  " (in 'mG4c', line 39, column 2 to column 9)",
  " (in 'mG4c', line 40, column 2 to column 11)",
  " (in 'mG4c', line 41, column 2 to column 12)",
  " (in 'mG4c', line 42, column 10 to column 11)",
  " (in 'mG4c', line 42, column 13 to column 18)",
  " (in 'mG4c', line 42, column 2 to column 20)",
  " (in 'mG4c', line 43, column 9 to column 11)",
  " (in 'mG4c', line 43, column 13 to column 17)",
  " (in 'mG4c', line 43, column 2 to column 21)",
  " (in 'mG4c', line 44, column 9 to column 10)",
  " (in 'mG4c', line 44, column 2 to column 14)",
  " (in 'mG4c', line 45, column 2 to column 9)",
  " (in 'mG4c', line 46, column 2 to column 13)",
  " (in 'mG4c', line 47, column 2 to column 14)",
  " (in 'mG4c', line 48, column 2 to column 20)",
  " (in 'mG4c', line 49, column 2 to column 20)",
  " (in 'mG4c', line 50, column 2 to column 20)",
  " (in 'mG4c', line 51, column 2 to column 19)",
  " (in 'mG4c', line 52, column 2 to column 19)",
  " (in 'mG4c', line 53, column 2 to column 27)",
  " (in 'mG4c', line 54, column 2 to column 14)",
  " (in 'mG4c', line 55, column 2 to column 16)",
  " (in 'mG4c', line 56, column 2 to column 38)",
  " (in 'mG4c', line 57, column 2 to column 9)",
  " (in 'mG4c', line 58, column 2 to column 38)",
  " (in 'mG4c', line 59, column 2 to column 9)",
  " (in 'mG4c', line 62, column 3 to column 21)",
  " (in 'mG4c', line 63, column 3 to column 28)",
  " (in 'mG4c', line 68, column 23 to column 36)",
  " (in 'mG4c', line 69, column 32 to column 45)",
  " (in 'mG4c', line 85, column 9 to column 10)",
  " (in 'mG4c', line 86, column 9 to column 10)",
  " (in 'mG4c', line 6, column 3 to column 15)",
  " (in 'mG4c', line 7, column 3 to column 19)",
  " (in 'mG4c', line 8, column 3 to column 31)",
  " (in 'mG4c', line 20, column 27 to column 34)",
  " (in 'mG4c', line 20, column 11 to column 34)",
  " (in 'mG4c', line 19, column 21 to column 101)",
  " (in 'mG4c', line 19, column 6 to line 20, column 34)",
  " (in 'mG4c', line 18, column 31 to line 21, column 4)",
  " (in 'mG4c', line 18, column 9 to line 21, column 4)",
  " (in 'mG4c', line 17, column 28 to column 35)",
  " (in 'mG4c', line 17, column 12 to column 35)",
  " (in 'mG4c', line 16, column 22 to column 87)",
  " (in 'mG4c', line 16, column 7 to line 17, column 35)",
  " (in 'mG4c', line 15, column 31 to line 18, column 4)",
  " (in 'mG4c', line 15, column 9 to line 21, column 4)",
  " (in 'mG4c', line 14, column 28 to column 35)",
  " (in 'mG4c', line 14, column 12 to column 35)",
  " (in 'mG4c', line 13, column 22 to column 102)",
  " (in 'mG4c', line 13, column 7 to line 14, column 35)",
  " (in 'mG4c', line 12, column 31 to line 15, column 4)",
  " (in 'mG4c', line 12, column 9 to line 21, column 4)",
  " (in 'mG4c', line 11, column 28 to column 35)",
  " (in 'mG4c', line 11, column 12 to column 35)",
  " (in 'mG4c', line 10, column 22 to column 84)",
  " (in 'mG4c', line 10, column 7 to line 11, column 35)",
  " (in 'mG4c', line 9, column 25 to line 12, column 4)",
  " (in 'mG4c', line 9, column 3 to line 21, column 4)",
  " (in 'mG4c', line 22, column 3 to column 12)",
  " (in 'mG4c', line 5, column 26 to line 23, column 4)",
  " (in 'mG4c', line 25, column 4 to column 12)",
  " (in 'mG4c', line 26, column 4 to column 12)",
  " (in 'mG4c', line 27, column 4 to column 12)",
  " (in 'mG4c', line 28, column 4 to column 12)",
  " (in 'mG4c', line 29, column 4 to column 39)",
  " (in 'mG4c', line 30, column 4 to column 38)",
  " (in 'mG4c', line 31, column 4 to column 41)",
  " (in 'mG4c', line 32, column 4 to column 28)",
  " (in 'mG4c', line 33, column 4 to column 31)",
  " (in 'mG4c', line 24, column 74 to line 34, column 3)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__>,-1,1>
algebra_system(const T0__& y_est_arg__, const T1__& theta_arg__,
               const std::vector<T2__>& x_r, const std::vector<int>& x_i,
               std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& alpha, const T2__& beta,
               const T3__& lb, const T4__& ub, std::ostream* pstream__);
struct algebra_system_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                  stan::base_type_t<T1__>, T2__>,-1,1>
  operator()(const T0__& y_est, const T1__& theta, const std::vector<T2__>&
             x_r, const std::vector<int>& x_i, std::ostream* pstream__) const {
    return algebra_system(y_est, theta, x_r, x_i, pstream__);
  }
};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__>,-1,1>
algebra_system(const T0__& y_est_arg__, const T1__& theta_arg__,
               const std::vector<T2__>& x_r, const std::vector<int>& x_i,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T2__>;
  int current_statement__ = 0;
  const auto& y_est = stan::math::to_ref(y_est_arg__);
  const auto& theta = stan::math::to_ref(theta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    Eigen::Matrix<local_scalar_t__,-1,1> x =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
    local_scalar_t__ q = DUMMY_VAR__;
    current_statement__ = 170;
    q = stan::model::rvalue(x_r, "x_r", stan::model::index_uni(1));
    local_scalar_t__ data_ty_estpe = DUMMY_VAR__;
    current_statement__ = 171;
    data_ty_estpe = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(1));
    current_statement__ = 195;
    if (stan::math::logical_eq(data_ty_estpe, 1)) {
      current_statement__ = 193;
      if (stan::math::logical_gt(
            stan::model::rvalue(y_est, "y_est", stan::model::index_uni(1)), 0)) {
        current_statement__ = 192;
        stan::model::assign(x,
          (stan::math::gamma_p(
             stan::model::rvalue(theta, "theta", stan::model::index_uni(3)),
             (stan::model::rvalue(y_est, "y_est", stan::model::index_uni(1))
             *
             stan::model::rvalue(theta, "theta", stan::model::index_uni(1))))
          - (q /
          (stan::model::rvalue(theta, "theta", stan::model::index_uni(2)) -
          1))), "assigning variable x", stan::model::index_uni(1));
      } else {
        current_statement__ = 191;
        if (stan::math::logical_lte(
              stan::model::rvalue(y_est, "y_est", stan::model::index_uni(1)),
              0)) {
          current_statement__ = 190;
          stan::model::assign(x, 1, "assigning variable x",
            stan::model::index_uni(1));
        }
      }
    } else {
      current_statement__ = 189;
      if (stan::math::logical_eq(data_ty_estpe, 2)) {
        current_statement__ = 187;
        if (stan::math::logical_gt(
              stan::model::rvalue(y_est, "y_est", stan::model::index_uni(1)),
              0)) {
          current_statement__ = 186;
          stan::model::assign(x,
            (stan::math::gamma_p(
               stan::model::rvalue(theta, "theta", stan::model::index_uni(3)),
               (stan::model::rvalue(y_est, "y_est", stan::model::index_uni(1))
               *
               stan::model::rvalue(theta, "theta", stan::model::index_uni(1))))
            - (stan::math::log((1 + q)) /
            (stan::model::rvalue(theta, "theta", stan::model::index_uni(4)) *
            (stan::model::rvalue(theta, "theta", stan::model::index_uni(2)) -
            1)))), "assigning variable x", stan::model::index_uni(1));
        } else {
          current_statement__ = 185;
          if (stan::math::logical_lte(
                stan::model::rvalue(y_est, "y_est", stan::model::index_uni(1)),
                0)) {
            current_statement__ = 184;
            stan::model::assign(x, 1, "assigning variable x",
              stan::model::index_uni(1));
          }
        }
      } else {
        current_statement__ = 183;
        if (stan::math::logical_eq(data_ty_estpe, 3)) {
          current_statement__ = 181;
          if (stan::math::logical_gt(
                stan::model::rvalue(y_est, "y_est", stan::model::index_uni(1)),
                0)) {
            current_statement__ = 180;
            stan::model::assign(x,
              (stan::math::gamma_p(
                 stan::model::rvalue(theta, "theta",
                   stan::model::index_uni(3)),
                 (stan::model::rvalue(y_est, "y_est",
                    stan::model::index_uni(1)) *
                 stan::model::rvalue(theta, "theta",
                   stan::model::index_uni(1)))) - (-q /
              (stan::model::rvalue(theta, "theta", stan::model::index_uni(2))
              - 1))), "assigning variable x", stan::model::index_uni(1));
          } else {
            current_statement__ = 179;
            if (stan::math::logical_lte(
                  stan::model::rvalue(y_est, "y_est",
                    stan::model::index_uni(1)), 0)) {
              current_statement__ = 178;
              stan::model::assign(x, 1, "assigning variable x",
                stan::model::index_uni(1));
            }
          }
        } else {
          current_statement__ = 177;
          if (stan::math::logical_eq(data_ty_estpe, 4)) {
            current_statement__ = 175;
            if (stan::math::logical_gt(
                  stan::model::rvalue(y_est, "y_est",
                    stan::model::index_uni(1)), 0)) {
              current_statement__ = 174;
              stan::model::assign(x,
                (stan::math::gamma_p(
                   stan::model::rvalue(theta, "theta",
                     stan::model::index_uni(3)),
                   (stan::model::rvalue(y_est, "y_est",
                      stan::model::index_uni(1)) *
                   stan::model::rvalue(theta, "theta",
                     stan::model::index_uni(1)))) - (stan::math::log((1 - q))
                /
                (stan::model::rvalue(theta, "theta",
                   stan::model::index_uni(4)) *
                (stan::model::rvalue(theta, "theta",
                   stan::model::index_uni(2)) - 1)))),
                "assigning variable x", stan::model::index_uni(1));
            } else {
              current_statement__ = 173;
              if (stan::math::logical_lte(
                    stan::model::rvalue(y_est, "y_est",
                      stan::model::index_uni(1)), 0)) {
                current_statement__ = 172;
                stan::model::assign(x, 1, "assigning variable x",
                  stan::model::index_uni(1));
              }
            }
          }
        }
      }
    }
    current_statement__ = 196;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& alpha, const T2__& beta,
               const T3__& lb, const T4__& ub, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ x1 = DUMMY_VAR__;
    local_scalar_t__ x2 = DUMMY_VAR__;
    local_scalar_t__ x3 = DUMMY_VAR__;
    local_scalar_t__ x4 = DUMMY_VAR__;
    current_statement__ = 202;
    x1 = ((alpha - 1) * stan::math::log((theta - lb)));
    current_statement__ = 203;
    x2 = ((beta - 1) * stan::math::log((ub - theta)));
    current_statement__ = 204;
    x3 = (((alpha + beta) - 1) * stan::math::log((ub - lb)));
    current_statement__ = 205;
    x4 = stan::math::lbeta(alpha, beta);
    current_statement__ = 206;
    return (((x1 + x2) - x3) - x4);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_mG4c final : public model_base_crtp<model_mG4c> {
private:
  int N;
  std::vector<int> n;
  int nc;
  int maxN;
  int maxNc;
  std::vector<std::vector<int>> nij;
  Eigen::Matrix<double,-1,-1> y_data__;
  Eigen::Matrix<double,-1,1> x_data__;
  double q;
  double shift;
  double init_b;
  Eigen::Matrix<double,-1,1> priormu_data__;
  Eigen::Matrix<double,-1,1> priorlb_data__;
  Eigen::Matrix<double,-1,1> priorub_data__;
  Eigen::Matrix<double,-1,1> shape1_data__;
  Eigen::Matrix<double,-1,1> shape2_data__;
  Eigen::Matrix<double,-1,-1> priorSigma_data__;
  double truncd;
  int data_type;
  int is_increasing;
  double L;
  int is_decreasing;
  double U;
  std::vector<double> x_r;
  std::vector<int> x_i;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> y{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> priormu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> priorlb{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> priorub{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> shape1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> shape2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priorSigma{nullptr, 0, 0};
public:
  ~model_mG4c() {}
  model_mG4c(stan::io::var_context& context__, unsigned int
             random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mG4c_namespace::model_mG4c";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 134;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 134;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 135;
      stan::math::validate_non_negative_index("n", "N", N);
      current_statement__ = 136;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      n = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 136;
      n = context__.vals_i("n");
      current_statement__ = 137;
      context__.validate_dims("data initialization", "nc", "int",
        std::vector<size_t>{});
      nc = std::numeric_limits<int>::min();
      current_statement__ = 137;
      nc = context__.vals_i("nc")[(1 - 1)];
      current_statement__ = 138;
      context__.validate_dims("data initialization", "maxN", "int",
        std::vector<size_t>{});
      maxN = std::numeric_limits<int>::min();
      current_statement__ = 138;
      maxN = context__.vals_i("maxN")[(1 - 1)];
      current_statement__ = 139;
      context__.validate_dims("data initialization", "maxNc", "int",
        std::vector<size_t>{});
      maxNc = std::numeric_limits<int>::min();
      current_statement__ = 139;
      maxNc = context__.vals_i("maxNc")[(1 - 1)];
      current_statement__ = 140;
      stan::math::validate_non_negative_index("nij", "N", N);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("nij", "maxNc", maxNc);
      current_statement__ = 142;
      context__.validate_dims("data initialization", "nij", "int",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(maxNc)});
      nij = std::vector<std::vector<int>>(N,
              std::vector<int>(maxNc, std::numeric_limits<int>::min()));
      {
        std::vector<int> nij_flat__;
        current_statement__ = 142;
        nij_flat__ = context__.vals_i("nij");
        current_statement__ = 142;
        pos__ = 1;
        current_statement__ = 142;
        for (int sym1__ = 1; sym1__ <= maxNc; ++sym1__) {
          current_statement__ = 142;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 142;
            stan::model::assign(nij, nij_flat__[(pos__ - 1)],
              "assigning variable nij", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 142;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 143;
      stan::math::validate_non_negative_index("y", "nc", nc);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("y", "maxN", maxN);
      current_statement__ = 145;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(nc),
          static_cast<size_t>(maxN)});
      y_data__ = Eigen::Matrix<double,-1,-1>::Constant(nc, maxN,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,-1>>(y_data__.data(), nc,
        maxN);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 145;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 145;
        pos__ = 1;
        current_statement__ = 145;
        for (int sym1__ = 1; sym1__ <= maxN; ++sym1__) {
          current_statement__ = 145;
          for (int sym2__ = 1; sym2__ <= nc; ++sym2__) {
            current_statement__ = 145;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 145;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 146;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 147;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      x_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,1>>(x_data__.data(), N);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 147;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 147;
        pos__ = 1;
        current_statement__ = 147;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 147;
          stan::model::assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", stan::model::index_uni(sym1__));
          current_statement__ = 147;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 148;
      context__.validate_dims("data initialization", "q", "double",
        std::vector<size_t>{});
      q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 148;
      q = context__.vals_r("q")[(1 - 1)];
      current_statement__ = 149;
      context__.validate_dims("data initialization", "shift", "double",
        std::vector<size_t>{});
      shift = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 149;
      shift = context__.vals_r("shift")[(1 - 1)];
      current_statement__ = 150;
      context__.validate_dims("data initialization", "init_b", "double",
        std::vector<size_t>{});
      init_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 150;
      init_b = context__.vals_r("init_b")[(1 - 1)];
      current_statement__ = 151;
      context__.validate_dims("data initialization", "priormu", "double",
        std::vector<size_t>{static_cast<size_t>(6)});
      priormu_data__ = Eigen::Matrix<double,-1,1>::Constant(6,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priormu)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(priormu_data__.data(), 6);
      {
        std::vector<local_scalar_t__> priormu_flat__;
        current_statement__ = 151;
        priormu_flat__ = context__.vals_r("priormu");
        current_statement__ = 151;
        pos__ = 1;
        current_statement__ = 151;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 151;
          stan::model::assign(priormu, priormu_flat__[(pos__ - 1)],
            "assigning variable priormu", stan::model::index_uni(sym1__));
          current_statement__ = 151;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 152;
      context__.validate_dims("data initialization", "priorlb", "double",
        std::vector<size_t>{static_cast<size_t>(6)});
      priorlb_data__ = Eigen::Matrix<double,-1,1>::Constant(6,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priorlb)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(priorlb_data__.data(), 6);
      {
        std::vector<local_scalar_t__> priorlb_flat__;
        current_statement__ = 152;
        priorlb_flat__ = context__.vals_r("priorlb");
        current_statement__ = 152;
        pos__ = 1;
        current_statement__ = 152;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 152;
          stan::model::assign(priorlb, priorlb_flat__[(pos__ - 1)],
            "assigning variable priorlb", stan::model::index_uni(sym1__));
          current_statement__ = 152;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 153;
      context__.validate_dims("data initialization", "priorub", "double",
        std::vector<size_t>{static_cast<size_t>(6)});
      priorub_data__ = Eigen::Matrix<double,-1,1>::Constant(6,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priorub)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(priorub_data__.data(), 6);
      {
        std::vector<local_scalar_t__> priorub_flat__;
        current_statement__ = 153;
        priorub_flat__ = context__.vals_r("priorub");
        current_statement__ = 153;
        pos__ = 1;
        current_statement__ = 153;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 153;
          stan::model::assign(priorub, priorub_flat__[(pos__ - 1)],
            "assigning variable priorub", stan::model::index_uni(sym1__));
          current_statement__ = 153;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 154;
      context__.validate_dims("data initialization", "shape1", "double",
        std::vector<size_t>{static_cast<size_t>(6)});
      shape1_data__ = Eigen::Matrix<double,-1,1>::Constant(6,
                        std::numeric_limits<double>::quiet_NaN());
      new (&shape1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(shape1_data__.data(), 6);
      {
        std::vector<local_scalar_t__> shape1_flat__;
        current_statement__ = 154;
        shape1_flat__ = context__.vals_r("shape1");
        current_statement__ = 154;
        pos__ = 1;
        current_statement__ = 154;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 154;
          stan::model::assign(shape1, shape1_flat__[(pos__ - 1)],
            "assigning variable shape1", stan::model::index_uni(sym1__));
          current_statement__ = 154;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 155;
      context__.validate_dims("data initialization", "shape2", "double",
        std::vector<size_t>{static_cast<size_t>(6)});
      shape2_data__ = Eigen::Matrix<double,-1,1>::Constant(6,
                        std::numeric_limits<double>::quiet_NaN());
      new (&shape2)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(shape2_data__.data(), 6);
      {
        std::vector<local_scalar_t__> shape2_flat__;
        current_statement__ = 155;
        shape2_flat__ = context__.vals_r("shape2");
        current_statement__ = 155;
        pos__ = 1;
        current_statement__ = 155;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 155;
          stan::model::assign(shape2, shape2_flat__[(pos__ - 1)],
            "assigning variable shape2", stan::model::index_uni(sym1__));
          current_statement__ = 155;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 156;
      context__.validate_dims("data initialization", "priorSigma", "double",
        std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(5)});
      priorSigma_data__ = Eigen::Matrix<double,-1,-1>::Constant(5, 5,
                            std::numeric_limits<double>::quiet_NaN());
      new (&priorSigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priorSigma_data__.data(), 5,
        5);
      {
        std::vector<local_scalar_t__> priorSigma_flat__;
        current_statement__ = 156;
        priorSigma_flat__ = context__.vals_r("priorSigma");
        current_statement__ = 156;
        pos__ = 1;
        current_statement__ = 156;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 156;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 156;
            stan::model::assign(priorSigma, priorSigma_flat__[(pos__ - 1)],
              "assigning variable priorSigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 156;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 156;
      stan::math::check_cov_matrix(function__, "priorSigma", priorSigma);
      current_statement__ = 157;
      context__.validate_dims("data initialization", "truncd", "double",
        std::vector<size_t>{});
      truncd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 157;
      truncd = context__.vals_r("truncd")[(1 - 1)];
      current_statement__ = 158;
      context__.validate_dims("data initialization", "data_type", "int",
        std::vector<size_t>{});
      data_type = std::numeric_limits<int>::min();
      current_statement__ = 158;
      data_type = context__.vals_i("data_type")[(1 - 1)];
      current_statement__ = 159;
      context__.validate_dims("data initialization", "is_increasing", "int",
        std::vector<size_t>{});
      is_increasing = std::numeric_limits<int>::min();
      current_statement__ = 159;
      is_increasing = context__.vals_i("is_increasing")[(1 - 1)];
      current_statement__ = 159;
      stan::math::check_greater_or_equal(function__, "is_increasing",
        is_increasing, 0);
      current_statement__ = 159;
      stan::math::check_less_or_equal(function__, "is_increasing",
        is_increasing, 1);
      current_statement__ = 160;
      context__.validate_dims("data initialization", "L", "double",
        std::vector<size_t>{});
      L = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 160;
      L = context__.vals_r("L")[(1 - 1)];
      current_statement__ = 161;
      context__.validate_dims("data initialization", "is_decreasing", "int",
        std::vector<size_t>{});
      is_decreasing = std::numeric_limits<int>::min();
      current_statement__ = 161;
      is_decreasing = context__.vals_i("is_decreasing")[(1 - 1)];
      current_statement__ = 161;
      stan::math::check_greater_or_equal(function__, "is_decreasing",
        is_decreasing, 0);
      current_statement__ = 161;
      stan::math::check_less_or_equal(function__, "is_decreasing",
        is_decreasing, 1);
      current_statement__ = 162;
      context__.validate_dims("data initialization", "U", "double",
        std::vector<size_t>{});
      U = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 162;
      U = context__.vals_r("U")[(1 - 1)];
      current_statement__ = 163;
      x_r = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 163;
      stan::model::assign(x_r, std::vector<double>{q},
        "assigning variable x_r");
      current_statement__ = 164;
      x_i = std::vector<int>(1, std::numeric_limits<int>::min());
      current_statement__ = 164;
      stan::model::assign(x_i, std::vector<int>{data_type},
        "assigning variable x_i");
      current_statement__ = 165;
      stan::math::validate_non_negative_index("pars3i", "is_increasing",
        is_increasing);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("pars3d", "is_decreasing",
        is_decreasing);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("y_guess", "1", 1);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("y_est", "1", 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + is_increasing + is_decreasing + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_mG4c";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mG4c_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ par1 = DUMMY_VAR__;
      current_statement__ = 1;
      par1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ par2 = DUMMY_VAR__;
      current_statement__ = 2;
      par2 = in__.template read_constrain_lub<local_scalar_t__,
               jacobian__>(0, 1, lp__);
      std::vector<local_scalar_t__> pars3i =
        std::vector<local_scalar_t__>(is_increasing, DUMMY_VAR__);
      current_statement__ = 3;
      pars3i = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, is_increasing);
      std::vector<local_scalar_t__> pars3d =
        std::vector<local_scalar_t__>(is_decreasing, DUMMY_VAR__);
      current_statement__ = 4;
      pars3d = in__.template read_constrain_lub<
                 std::vector<local_scalar_t__>, jacobian__>(0, 1, lp__,
                 is_decreasing);
      local_scalar_t__ par4 = DUMMY_VAR__;
      current_statement__ = 5;
      par4 = in__.template read<local_scalar_t__>();
      local_scalar_t__ par5 = DUMMY_VAR__;
      current_statement__ = 6;
      par5 = in__.template read<local_scalar_t__>();
      local_scalar_t__ par6 = DUMMY_VAR__;
      current_statement__ = 7;
      par6 = in__.template read<local_scalar_t__>();
      local_scalar_t__ b = DUMMY_VAR__;
      local_scalar_t__ a = DUMMY_VAR__;
      local_scalar_t__ c = DUMMY_VAR__;
      local_scalar_t__ par3 = DUMMY_VAR__;
      local_scalar_t__ d = DUMMY_VAR__;
      local_scalar_t__ k = DUMMY_VAR__;
      local_scalar_t__ mu_inf = DUMMY_VAR__;
      local_scalar_t__ invsigma2 = DUMMY_VAR__;
      local_scalar_t__ mu_0 = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> y_guess =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> y_est =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      local_scalar_t__ rho_cluster = DUMMY_VAR__;
      current_statement__ = 21;
      rho_cluster = par6;
      current_statement__ = 22;
      mu_0 = par1;
      current_statement__ = 28;
      if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
          ||
          stan::math::primitive_value(stan::math::logical_eq(data_type, 3)))) {
        current_statement__ = 26;
        a = par1;
      } else {
        current_statement__ = 25;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 2))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 4)))) {
          current_statement__ = 23;
          a = (stan::math::log(par1) - shift);
        }
      }
      current_statement__ = 34;
      if (is_increasing) {
        current_statement__ = 32;
        par3 = (L +
          stan::model::rvalue(pars3i, "pars3i", stan::model::index_uni(1)));
      } else {
        current_statement__ = 31;
        if (is_decreasing) {
          current_statement__ = 29;
          par3 = (L + ((U - L) *
            stan::model::rvalue(pars3d, "pars3d", stan::model::index_uni(1))));
        }
      }
      current_statement__ = 35;
      mu_inf = (par1 * par3);
      current_statement__ = 41;
      if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
          ||
          stan::math::primitive_value(stan::math::logical_eq(data_type, 3)))) {
        current_statement__ = 39;
        c = (mu_inf / mu_0);
      } else {
        current_statement__ = 38;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 2))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 4)))) {
          current_statement__ = 36;
          c = ((stan::math::log(mu_inf) - shift) / (stan::math::log(mu_0) -
            shift));
        }
      }
      current_statement__ = 42;
      d = stan::math::exp(par4);
      current_statement__ = 43;
      k = stan::math::log(par2);
      current_statement__ = 44;
      invsigma2 = stan::math::exp(par5);
      current_statement__ = 45;
      stan::model::assign(theta, stan::math::exp(k),
        "assigning variable theta", stan::model::index_uni(1));
      current_statement__ = 46;
      stan::model::assign(theta, c, "assigning variable theta",
        stan::model::index_uni(2));
      current_statement__ = 47;
      stan::model::assign(theta, d, "assigning variable theta",
        stan::model::index_uni(3));
      current_statement__ = 48;
      stan::model::assign(theta, a, "assigning variable theta",
        stan::model::index_uni(4));
      current_statement__ = 49;
      stan::model::assign(y_guess, init_b, "assigning variable y_guess",
        stan::model::index_uni(1));
      current_statement__ = 50;
      stan::model::assign(y_est,
        stan::math::algebra_solver(algebra_system_functor__(), y_guess,
          theta, x_r, x_i, pstream__, 1e-10, stan::math::positive_infinity(),
          1e3), "assigning variable y_est");
      current_statement__ = 51;
      b = stan::model::rvalue(y_est, "y_est", stan::model::index_uni(1));
      {
        current_statement__ = 52;
        lp_accum__.add(pert_dist_lpdf<propto__>(par1,
                         stan::model::rvalue(shape1, "shape1",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(shape2, "shape2",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(priorlb, "priorlb",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(priorub, "priorub",
                           stan::model::index_uni(1)), pstream__));
        current_statement__ = 53;
        lp_accum__.add(pert_dist_lpdf<propto__>(par2,
                         stan::model::rvalue(shape1, "shape1",
                           stan::model::index_uni(2)),
                         stan::model::rvalue(shape2, "shape2",
                           stan::model::index_uni(2)),
                         stan::model::rvalue(priorlb, "priorlb",
                           stan::model::index_uni(2)),
                         stan::model::rvalue(priorub, "priorub",
                           stan::model::index_uni(2)), pstream__));
        current_statement__ = 54;
        lp_accum__.add(pert_dist_lpdf<propto__>(par3,
                         stan::model::rvalue(shape1, "shape1",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(shape2, "shape2",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(priorlb, "priorlb",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(priorub, "priorub",
                           stan::model::index_uni(3)), pstream__));
        current_statement__ = 55;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(par4,
                         stan::model::rvalue(priormu, "priormu",
                           stan::model::index_uni(4)),
                         stan::model::rvalue(priorSigma, "priorSigma",
                           stan::model::index_uni(4),
                           stan::model::index_uni(4))));
        current_statement__ = 56;
        if (stan::math::logical_gt(par4, truncd)) {
          current_statement__ = 56;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 56;
          lp_accum__.add(-stan::math::normal_lcdf(truncd,
                            stan::model::rvalue(priormu, "priormu",
                              stan::model::index_uni(4)),
                            stan::model::rvalue(priorSigma, "priorSigma",
                              stan::model::index_uni(4),
                              stan::model::index_uni(4))));
        }
        current_statement__ = 57;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(par5,
                         stan::model::rvalue(priormu, "priormu",
                           stan::model::index_uni(5)),
                         stan::model::rvalue(priorSigma, "priorSigma",
                           stan::model::index_uni(5),
                           stan::model::index_uni(5))));
        current_statement__ = 58;
        lp_accum__.add(pert_dist_lpdf<propto__>(par6,
                         stan::model::rvalue(shape1, "shape1",
                           stan::model::index_uni(6)),
                         stan::model::rvalue(shape2, "shape2",
                           stan::model::index_uni(6)),
                         stan::model::rvalue(priorlb, "priorlb",
                           stan::model::index_uni(6)),
                         stan::model::rvalue(priorub, "priorub",
                           stan::model::index_uni(6)), pstream__));
        current_statement__ = 133;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 3)))) {
          int cnt = std::numeric_limits<int>::min();
          current_statement__ = 98;
          cnt = 1;
          current_statement__ = 131;
          for (int i = 1; i <= N; ++i) {
            int nl = std::numeric_limits<int>::min();
            local_scalar_t__ mx = DUMMY_VAR__;
            current_statement__ = 101;
            mx = (a + ((a * (c - 1)) *
              stan::math::gamma_cdf(
                stan::model::rvalue(x, "x", stan::model::index_uni(i)), d, b)));
            current_statement__ = 102;
            nl = stan::model::rvalue(n, "n", stan::model::index_uni(i));
            current_statement__ = 129;
            for (int j = 1; j <= nl; ++j) {
              int lt = std::numeric_limits<int>::min();
              current_statement__ = 103;
              lt = stan::model::rvalue(nij, "nij", stan::model::index_uni(i),
                     stan::model::index_uni(j));
              current_statement__ = 104;
              stan::math::validate_non_negative_index("resp", "lt", lt);
              Eigen::Matrix<local_scalar_t__,1,-1> resp =
                Eigen::Matrix<local_scalar_t__,1,-1>::Constant(lt,
                  DUMMY_VAR__);
              current_statement__ = 106;
              stan::math::validate_non_negative_index("m", "lt", lt);
              Eigen::Matrix<local_scalar_t__,1,-1> m =
                Eigen::Matrix<local_scalar_t__,1,-1>::Constant(lt,
                  DUMMY_VAR__);
              current_statement__ = 108;
              stan::math::validate_non_negative_index("P", "lt", lt);
              current_statement__ = 109;
              stan::math::validate_non_negative_index("P", "lt", lt);
              Eigen::Matrix<local_scalar_t__,-1,-1> P =
                Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lt, lt,
                  DUMMY_VAR__);
              current_statement__ = 111;
              stan::math::validate_non_negative_index("Sigma", "lt", lt);
              current_statement__ = 112;
              stan::math::validate_non_negative_index("Sigma", "lt", lt);
              Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
                Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lt, lt,
                  DUMMY_VAR__);
              current_statement__ = 114;
              stan::model::assign(resp,
                stan::model::rvalue(y, "y", stan::model::index_uni(cnt),
                  stan::model::index_min_max(1, lt)),
                "assigning variable resp");
              current_statement__ = 115;
              stan::model::assign(m, stan::math::rep_row_vector(mx, lt),
                "assigning variable m");
              current_statement__ = 124;
              for (int id1 = 1; id1 <= lt; ++id1) {
                current_statement__ = 122;
                for (int id2 = 1; id2 <= lt; ++id2) {
                  current_statement__ = 120;
                  if (stan::math::logical_eq(id1, id2)) {
                    current_statement__ = 118;
                    stan::model::assign(P, 1, "assigning variable P",
                      stan::model::index_uni(id1),
                      stan::model::index_uni(id2));
                  } else {
                    current_statement__ = 116;
                    stan::model::assign(P, rho_cluster,
                      "assigning variable P", stan::model::index_uni(id1),
                      stan::model::index_uni(id2));
                  }
                }
              }
              current_statement__ = 125;
              stan::model::assign(Sigma,
                stan::math::multiply((1 / invsigma2), P),
                "assigning variable Sigma");
              current_statement__ = 126;
              lp_accum__.add(stan::math::multi_normal_lpdf<false>(resp, m,
                               Sigma));
              current_statement__ = 127;
              cnt = (cnt + 1);
            }
          }
        } else {
          current_statement__ = 96;
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(data_type, 2))
              ||
              stan::math::primitive_value(
                stan::math::logical_eq(data_type, 4)))) {
            int cnt = std::numeric_limits<int>::min();
            current_statement__ = 60;
            cnt = 1;
            current_statement__ = 94;
            for (int i = 1; i <= N; ++i) {
              int nl = std::numeric_limits<int>::min();
              local_scalar_t__ mx = DUMMY_VAR__;
              current_statement__ = 63;
              mx = (a + ((a * (c - 1)) *
                stan::math::gamma_cdf(
                  stan::model::rvalue(x, "x", stan::model::index_uni(i)), d,
                  b)));
              current_statement__ = 64;
              nl = stan::model::rvalue(n, "n", stan::model::index_uni(i));
              current_statement__ = 92;
              for (int j = 1; j <= nl; ++j) {
                int lt = std::numeric_limits<int>::min();
                current_statement__ = 65;
                lt = stan::model::rvalue(nij, "nij",
                       stan::model::index_uni(i), stan::model::index_uni(j));
                current_statement__ = 66;
                stan::math::validate_non_negative_index("resp", "lt", lt);
                Eigen::Matrix<local_scalar_t__,1,-1> resp =
                  Eigen::Matrix<local_scalar_t__,1,-1>::Constant(lt,
                    DUMMY_VAR__);
                current_statement__ = 68;
                stan::math::validate_non_negative_index("m", "lt", lt);
                Eigen::Matrix<local_scalar_t__,1,-1> m =
                  Eigen::Matrix<local_scalar_t__,1,-1>::Constant(lt,
                    DUMMY_VAR__);
                current_statement__ = 70;
                stan::math::validate_non_negative_index("P", "lt", lt);
                current_statement__ = 71;
                stan::math::validate_non_negative_index("P", "lt", lt);
                Eigen::Matrix<local_scalar_t__,-1,-1> P =
                  Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lt, lt,
                    DUMMY_VAR__);
                current_statement__ = 73;
                stan::math::validate_non_negative_index("Sigma", "lt", lt);
                current_statement__ = 74;
                stan::math::validate_non_negative_index("Sigma", "lt", lt);
                Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
                  Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lt, lt,
                    DUMMY_VAR__);
                current_statement__ = 76;
                stan::model::assign(resp,
                  stan::model::rvalue(y, "y", stan::model::index_uni(cnt),
                    stan::model::index_min_max(1, lt)),
                  "assigning variable resp");
                current_statement__ = 77;
                stan::model::assign(m, stan::math::rep_row_vector(mx, lt),
                  "assigning variable m");
                current_statement__ = 86;
                for (int id1 = 1; id1 <= lt; ++id1) {
                  current_statement__ = 84;
                  for (int id2 = 1; id2 <= lt; ++id2) {
                    current_statement__ = 82;
                    if (stan::math::logical_eq(id1, id2)) {
                      current_statement__ = 80;
                      stan::model::assign(P, 1, "assigning variable P",
                        stan::model::index_uni(id1),
                        stan::model::index_uni(id2));
                    } else {
                      current_statement__ = 78;
                      stan::model::assign(P, rho_cluster,
                        "assigning variable P", stan::model::index_uni(id1),
                        stan::model::index_uni(id2));
                    }
                  }
                }
                current_statement__ = 87;
                stan::model::assign(Sigma,
                  stan::math::multiply((1 / invsigma2), P),
                  "assigning variable Sigma");
                current_statement__ = 88;
                lp_accum__.add(stan::math::multi_normal_lpdf<false>(resp, m,
                                 Sigma));
                current_statement__ = 89;
                lp_accum__.add(-stan::math::sum(resp));
                current_statement__ = 90;
                cnt = (cnt + 1);
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mG4c_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double par1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      par1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double par2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      par2 = in__.template read_constrain_lub<local_scalar_t__,
               jacobian__>(0, 1, lp__);
      std::vector<double> pars3i =
        std::vector<double>(is_increasing,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      pars3i = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, is_increasing);
      std::vector<double> pars3d =
        std::vector<double>(is_decreasing,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      pars3d = in__.template read_constrain_lub<
                 std::vector<local_scalar_t__>, jacobian__>(0, 1, lp__,
                 is_decreasing);
      double par4 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      par4 = in__.template read<local_scalar_t__>();
      double par5 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      par5 = in__.template read<local_scalar_t__>();
      double par6 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      par6 = in__.template read<local_scalar_t__>();
      double b = std::numeric_limits<double>::quiet_NaN();
      double a = std::numeric_limits<double>::quiet_NaN();
      double c = std::numeric_limits<double>::quiet_NaN();
      double par3 = std::numeric_limits<double>::quiet_NaN();
      double d = std::numeric_limits<double>::quiet_NaN();
      double k = std::numeric_limits<double>::quiet_NaN();
      double mu_inf = std::numeric_limits<double>::quiet_NaN();
      double invsigma2 = std::numeric_limits<double>::quiet_NaN();
      double mu_0 = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> theta =
        Eigen::Matrix<double,-1,1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y_guess =
        Eigen::Matrix<double,-1,1>::Constant(1,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y_est =
        Eigen::Matrix<double,-1,1>::Constant(1,
          std::numeric_limits<double>::quiet_NaN());
      double rho_cluster = std::numeric_limits<double>::quiet_NaN();
      out__.write(par1);
      out__.write(par2);
      out__.write(pars3i);
      out__.write(pars3d);
      out__.write(par4);
      out__.write(par5);
      out__.write(par6);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 21;
      rho_cluster = par6;
      current_statement__ = 22;
      mu_0 = par1;
      current_statement__ = 28;
      if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
          ||
          stan::math::primitive_value(stan::math::logical_eq(data_type, 3)))) {
        current_statement__ = 26;
        a = par1;
      } else {
        current_statement__ = 25;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 2))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 4)))) {
          current_statement__ = 23;
          a = (stan::math::log(par1) - shift);
        }
      }
      current_statement__ = 34;
      if (is_increasing) {
        current_statement__ = 32;
        par3 = (L +
          stan::model::rvalue(pars3i, "pars3i", stan::model::index_uni(1)));
      } else {
        current_statement__ = 31;
        if (is_decreasing) {
          current_statement__ = 29;
          par3 = (L + ((U - L) *
            stan::model::rvalue(pars3d, "pars3d", stan::model::index_uni(1))));
        }
      }
      current_statement__ = 35;
      mu_inf = (par1 * par3);
      current_statement__ = 41;
      if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
          ||
          stan::math::primitive_value(stan::math::logical_eq(data_type, 3)))) {
        current_statement__ = 39;
        c = (mu_inf / mu_0);
      } else {
        current_statement__ = 38;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 2))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 4)))) {
          current_statement__ = 36;
          c = ((stan::math::log(mu_inf) - shift) / (stan::math::log(mu_0) -
            shift));
        }
      }
      current_statement__ = 42;
      d = stan::math::exp(par4);
      current_statement__ = 43;
      k = stan::math::log(par2);
      current_statement__ = 44;
      invsigma2 = stan::math::exp(par5);
      current_statement__ = 45;
      stan::model::assign(theta, stan::math::exp(k),
        "assigning variable theta", stan::model::index_uni(1));
      current_statement__ = 46;
      stan::model::assign(theta, c, "assigning variable theta",
        stan::model::index_uni(2));
      current_statement__ = 47;
      stan::model::assign(theta, d, "assigning variable theta",
        stan::model::index_uni(3));
      current_statement__ = 48;
      stan::model::assign(theta, a, "assigning variable theta",
        stan::model::index_uni(4));
      current_statement__ = 49;
      stan::model::assign(y_guess, init_b, "assigning variable y_guess",
        stan::model::index_uni(1));
      current_statement__ = 50;
      stan::model::assign(y_est,
        stan::math::algebra_solver(algebra_system_functor__(), y_guess,
          theta, x_r, x_i, pstream__, 1e-10, stan::math::positive_infinity(),
          1e3), "assigning variable y_est");
      current_statement__ = 51;
      b = stan::model::rvalue(y_est, "y_est", stan::model::index_uni(1));
      if (emit_transformed_parameters__) {
        out__.write(b);
        out__.write(a);
        out__.write(c);
        out__.write(par3);
        out__.write(d);
        out__.write(k);
        out__.write(mu_inf);
        out__.write(invsigma2);
        out__.write(mu_0);
        out__.write(theta);
        out__.write(y_guess);
        out__.write(y_est);
        out__.write(rho_cluster);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ par1 = DUMMY_VAR__;
      current_statement__ = 1;
      par1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, par1);
      local_scalar_t__ par2 = DUMMY_VAR__;
      current_statement__ = 2;
      par2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, par2);
      std::vector<local_scalar_t__> pars3i =
        std::vector<local_scalar_t__>(is_increasing, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(pars3i,
        in__.read<std::vector<local_scalar_t__>>(is_increasing),
        "assigning variable pars3i");
      out__.write_free_lb(0, pars3i);
      std::vector<local_scalar_t__> pars3d =
        std::vector<local_scalar_t__>(is_decreasing, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(pars3d,
        in__.read<std::vector<local_scalar_t__>>(is_decreasing),
        "assigning variable pars3d");
      out__.write_free_lub(0, 1, pars3d);
      local_scalar_t__ par4 = DUMMY_VAR__;
      current_statement__ = 5;
      par4 = in__.read<local_scalar_t__>();
      out__.write(par4);
      local_scalar_t__ par5 = DUMMY_VAR__;
      current_statement__ = 6;
      par5 = in__.read<local_scalar_t__>();
      out__.write(par5);
      local_scalar_t__ par6 = DUMMY_VAR__;
      current_statement__ = 7;
      par6 = in__.read<local_scalar_t__>();
      out__.write(par6);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "par1", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "par2", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "pars3i", "double",
        std::vector<size_t>{static_cast<size_t>(is_increasing)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "pars3d", "double",
        std::vector<size_t>{static_cast<size_t>(is_decreasing)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "par4", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "par5", "double",
        std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "par6", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ par1 = DUMMY_VAR__;
      current_statement__ = 1;
      par1 = context__.vals_r("par1")[(1 - 1)];
      out__.write_free_lb(0, par1);
      local_scalar_t__ par2 = DUMMY_VAR__;
      current_statement__ = 2;
      par2 = context__.vals_r("par2")[(1 - 1)];
      out__.write_free_lub(0, 1, par2);
      std::vector<local_scalar_t__> pars3i =
        std::vector<local_scalar_t__>(is_increasing, DUMMY_VAR__);
      current_statement__ = 3;
      pars3i = context__.vals_r("pars3i");
      out__.write_free_lb(0, pars3i);
      std::vector<local_scalar_t__> pars3d =
        std::vector<local_scalar_t__>(is_decreasing, DUMMY_VAR__);
      current_statement__ = 4;
      pars3d = context__.vals_r("pars3d");
      out__.write_free_lub(0, 1, pars3d);
      local_scalar_t__ par4 = DUMMY_VAR__;
      current_statement__ = 5;
      par4 = context__.vals_r("par4")[(1 - 1)];
      out__.write(par4);
      local_scalar_t__ par5 = DUMMY_VAR__;
      current_statement__ = 6;
      par5 = context__.vals_r("par5")[(1 - 1)];
      out__.write(par5);
      local_scalar_t__ par6 = DUMMY_VAR__;
      current_statement__ = 7;
      par6 = context__.vals_r("par6")[(1 - 1)];
      out__.write(par6);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"par1", "par2", "pars3i", "pars3d",
                "par4", "par5", "par6"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"b", "a", "c", "par3", "d", "k", "mu_inf", "invsigma2", "mu_0",
             "theta", "y_guess", "y_est", "rho_cluster"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(is_increasing)},
                std::vector<size_t>{static_cast<size_t>(is_decreasing)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(4)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "par1");
    param_names__.emplace_back(std::string() + "par2");
    for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3i" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3d" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "par4");
    param_names__.emplace_back(std::string() + "par5");
    param_names__.emplace_back(std::string() + "par6");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "c");
      param_names__.emplace_back(std::string() + "par3");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "k");
      param_names__.emplace_back(std::string() + "mu_inf");
      param_names__.emplace_back(std::string() + "invsigma2");
      param_names__.emplace_back(std::string() + "mu_0");
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_guess" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_est" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "rho_cluster");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "par1");
    param_names__.emplace_back(std::string() + "par2");
    for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3i" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3d" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "par4");
    param_names__.emplace_back(std::string() + "par5");
    param_names__.emplace_back(std::string() + "par6");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "c");
      param_names__.emplace_back(std::string() + "par3");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "k");
      param_names__.emplace_back(std::string() + "mu_inf");
      param_names__.emplace_back(std::string() + "invsigma2");
      param_names__.emplace_back(std::string() + "mu_0");
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_guess" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_est" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "rho_cluster");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"par1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pars3i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_increasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_decreasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_guess\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_est\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho_cluster\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"par1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pars3i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_increasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_decreasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_guess\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_est\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho_cluster\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((1 + 1) + is_increasing) +
      is_decreasing) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 4) + 1) + 1) +
      1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((1 + 1) + is_increasing) +
      is_decreasing) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 4) + 1) + 1) +
      1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mG4c_namespace::model_mG4c;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mG4c_namespace::profiles__;
}
#endif
#endif
