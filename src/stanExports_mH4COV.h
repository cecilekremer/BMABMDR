// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_mH4COV_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mH4COV");
    reader.add_event(298, 296, "end", "model_mH4COV");
    return reader;
}
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
pert_dist_lpdf(const T0__& theta,
                   const T1__& alpha,
                   const T2__& beta,
                   const T3__& lb,
                   const T4__& ub, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        local_scalar_t__ x1(DUMMY_VAR__);
        (void) x1;  // dummy to suppress unused var warning
        stan::math::initialize(x1, DUMMY_VAR__);
        stan::math::fill(x1, DUMMY_VAR__);
        current_statement_begin__ = 4;
        local_scalar_t__ x2(DUMMY_VAR__);
        (void) x2;  // dummy to suppress unused var warning
        stan::math::initialize(x2, DUMMY_VAR__);
        stan::math::fill(x2, DUMMY_VAR__);
        current_statement_begin__ = 5;
        local_scalar_t__ x3(DUMMY_VAR__);
        (void) x3;  // dummy to suppress unused var warning
        stan::math::initialize(x3, DUMMY_VAR__);
        stan::math::fill(x3, DUMMY_VAR__);
        current_statement_begin__ = 6;
        local_scalar_t__ x4(DUMMY_VAR__);
        (void) x4;  // dummy to suppress unused var warning
        stan::math::initialize(x4, DUMMY_VAR__);
        stan::math::fill(x4, DUMMY_VAR__);
        current_statement_begin__ = 8;
        stan::math::assign(x1, ((alpha - 1) * stan::math::log((theta - lb))));
        current_statement_begin__ = 9;
        stan::math::assign(x2, ((beta - 1) * stan::math::log((ub - theta))));
        current_statement_begin__ = 10;
        stan::math::assign(x3, (((alpha + beta) - 1) * stan::math::log((ub - lb))));
        current_statement_begin__ = 11;
        stan::math::assign(x4, lbeta(alpha, beta));
        current_statement_begin__ = 12;
        return stan::math::promote_scalar<fun_return_scalar_t__>((((x1 + x2) - x3) - x4));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
pert_dist_lpdf(const T0__& theta,
                   const T1__& alpha,
                   const T2__& beta,
                   const T3__& lb,
                   const T4__& ub, std::ostream* pstream__) {
    return pert_dist_lpdf<false>(theta,alpha,beta,lb,ub, pstream__);
}
struct pert_dist_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& theta,
                   const T1__& alpha,
                   const T2__& beta,
                   const T3__& lb,
                   const T4__& ub, std::ostream* pstream__) const {
        return pert_dist_lpdf(theta, alpha, beta, lb, ub, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_mH4COV
  : public stan::model::model_base_crtp<model_mH4COV> {
private:
        int N;
        int nlevels;
        int nlevels_a;
        int nlevels_BMD;
        int nlevels_d;
        int nlevels_sigma;
        int nlevels_b;
        vector_d n;
        vector_d x;
        vector_d m;
        vector_d s2;
        matrix_d trt_ind;
        double q;
        double shift;
        matrix_d priormu;
        matrix_d priorlb;
        matrix_d priorub;
        matrix_d shape1;
        matrix_d shape2;
        matrix_d priorSigma;
        int data_type;
        int is_increasing;
        double L;
        int is_decreasing;
        double U;
        double truncd;
public:
    model_mH4COV(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_mH4COV(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_mH4COV_namespace::model_mH4COV";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "nlevels", "int", context__.to_vec());
            nlevels = int(0);
            vals_i__ = context__.vals_i("nlevels");
            pos__ = 0;
            nlevels = vals_i__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "nlevels_a", "int", context__.to_vec());
            nlevels_a = int(0);
            vals_i__ = context__.vals_i("nlevels_a");
            pos__ = 0;
            nlevels_a = vals_i__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "nlevels_BMD", "int", context__.to_vec());
            nlevels_BMD = int(0);
            vals_i__ = context__.vals_i("nlevels_BMD");
            pos__ = 0;
            nlevels_BMD = vals_i__[pos__++];
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "nlevels_d", "int", context__.to_vec());
            nlevels_d = int(0);
            vals_i__ = context__.vals_i("nlevels_d");
            pos__ = 0;
            nlevels_d = vals_i__[pos__++];
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "nlevels_sigma", "int", context__.to_vec());
            nlevels_sigma = int(0);
            vals_i__ = context__.vals_i("nlevels_sigma");
            pos__ = 0;
            nlevels_sigma = vals_i__[pos__++];
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "nlevels_b", "int", context__.to_vec());
            nlevels_b = int(0);
            vals_i__ = context__.vals_i("nlevels_b");
            pos__ = 0;
            nlevels_b = vals_i__[pos__++];
            current_statement_begin__ = 24;
            validate_non_negative_index("n", "N", N);
            context__.validate_dims("data initialization", "n", "vector_d", context__.to_vec(N));
            n = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("n");
            pos__ = 0;
            size_t n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < n_j_1_max__; ++j_1__) {
                n(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 25;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N));
            x = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                x(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 26;
            validate_non_negative_index("m", "N", N);
            context__.validate_dims("data initialization", "m", "vector_d", context__.to_vec(N));
            m = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("m");
            pos__ = 0;
            size_t m_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < m_j_1_max__; ++j_1__) {
                m(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("s2", "N", N);
            context__.validate_dims("data initialization", "s2", "vector_d", context__.to_vec(N));
            s2 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("s2");
            pos__ = 0;
            size_t s2_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < s2_j_1_max__; ++j_1__) {
                s2(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("trt_ind", "N", N);
            validate_non_negative_index("trt_ind", "nlevels", nlevels);
            context__.validate_dims("data initialization", "trt_ind", "matrix_d", context__.to_vec(N,nlevels));
            trt_ind = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, nlevels);
            vals_r__ = context__.vals_r("trt_ind");
            pos__ = 0;
            size_t trt_ind_j_2_max__ = nlevels;
            size_t trt_ind_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < trt_ind_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < trt_ind_j_1_max__; ++j_1__) {
                    trt_ind(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "q", "double", context__.to_vec());
            q = double(0);
            vals_r__ = context__.vals_r("q");
            pos__ = 0;
            q = vals_r__[pos__++];
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "shift", "double", context__.to_vec());
            shift = double(0);
            vals_r__ = context__.vals_r("shift");
            pos__ = 0;
            shift = vals_r__[pos__++];
            current_statement_begin__ = 31;
            validate_non_negative_index("priormu", "5", 5);
            validate_non_negative_index("priormu", "nlevels", nlevels);
            context__.validate_dims("data initialization", "priormu", "matrix_d", context__.to_vec(5,nlevels));
            priormu = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(5, nlevels);
            vals_r__ = context__.vals_r("priormu");
            pos__ = 0;
            size_t priormu_j_2_max__ = nlevels;
            size_t priormu_j_1_max__ = 5;
            for (size_t j_2__ = 0; j_2__ < priormu_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < priormu_j_1_max__; ++j_1__) {
                    priormu(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("priorlb", "5", 5);
            validate_non_negative_index("priorlb", "nlevels", nlevels);
            context__.validate_dims("data initialization", "priorlb", "matrix_d", context__.to_vec(5,nlevels));
            priorlb = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(5, nlevels);
            vals_r__ = context__.vals_r("priorlb");
            pos__ = 0;
            size_t priorlb_j_2_max__ = nlevels;
            size_t priorlb_j_1_max__ = 5;
            for (size_t j_2__ = 0; j_2__ < priorlb_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < priorlb_j_1_max__; ++j_1__) {
                    priorlb(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("priorub", "5", 5);
            validate_non_negative_index("priorub", "nlevels", nlevels);
            context__.validate_dims("data initialization", "priorub", "matrix_d", context__.to_vec(5,nlevels));
            priorub = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(5, nlevels);
            vals_r__ = context__.vals_r("priorub");
            pos__ = 0;
            size_t priorub_j_2_max__ = nlevels;
            size_t priorub_j_1_max__ = 5;
            for (size_t j_2__ = 0; j_2__ < priorub_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < priorub_j_1_max__; ++j_1__) {
                    priorub(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 34;
            validate_non_negative_index("shape1", "5", 5);
            validate_non_negative_index("shape1", "nlevels", nlevels);
            context__.validate_dims("data initialization", "shape1", "matrix_d", context__.to_vec(5,nlevels));
            shape1 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(5, nlevels);
            vals_r__ = context__.vals_r("shape1");
            pos__ = 0;
            size_t shape1_j_2_max__ = nlevels;
            size_t shape1_j_1_max__ = 5;
            for (size_t j_2__ = 0; j_2__ < shape1_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < shape1_j_1_max__; ++j_1__) {
                    shape1(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 35;
            validate_non_negative_index("shape2", "5", 5);
            validate_non_negative_index("shape2", "nlevels", nlevels);
            context__.validate_dims("data initialization", "shape2", "matrix_d", context__.to_vec(5,nlevels));
            shape2 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(5, nlevels);
            vals_r__ = context__.vals_r("shape2");
            pos__ = 0;
            size_t shape2_j_2_max__ = nlevels;
            size_t shape2_j_1_max__ = 5;
            for (size_t j_2__ = 0; j_2__ < shape2_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < shape2_j_1_max__; ++j_1__) {
                    shape2(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("priorSigma", "5", 5);
            validate_non_negative_index("priorSigma", "5", 5);
            context__.validate_dims("data initialization", "priorSigma", "matrix_d", context__.to_vec(5,5));
            priorSigma = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(5, 5);
            vals_r__ = context__.vals_r("priorSigma");
            pos__ = 0;
            size_t priorSigma_j_2_max__ = 5;
            size_t priorSigma_j_1_max__ = 5;
            for (size_t j_2__ = 0; j_2__ < priorSigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < priorSigma_j_1_max__; ++j_1__) {
                    priorSigma(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            stan::math::check_cov_matrix(function__, "priorSigma", priorSigma);
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "data_type", "int", context__.to_vec());
            data_type = int(0);
            vals_i__ = context__.vals_i("data_type");
            pos__ = 0;
            data_type = vals_i__[pos__++];
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "is_increasing", "int", context__.to_vec());
            is_increasing = int(0);
            vals_i__ = context__.vals_i("is_increasing");
            pos__ = 0;
            is_increasing = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_increasing", is_increasing, 0);
            check_less_or_equal(function__, "is_increasing", is_increasing, 1);
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "L", "double", context__.to_vec());
            L = double(0);
            vals_r__ = context__.vals_r("L");
            pos__ = 0;
            L = vals_r__[pos__++];
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "is_decreasing", "int", context__.to_vec());
            is_decreasing = int(0);
            vals_i__ = context__.vals_i("is_decreasing");
            pos__ = 0;
            is_decreasing = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_decreasing", is_decreasing, 0);
            check_less_or_equal(function__, "is_decreasing", is_decreasing, 1);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "U", "double", context__.to_vec());
            U = double(0);
            vals_r__ = context__.vals_r("U");
            pos__ = 0;
            U = vals_r__[pos__++];
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "truncd", "double", context__.to_vec());
            truncd = double(0);
            vals_r__ = context__.vals_r("truncd");
            pos__ = 0;
            truncd = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 45;
            validate_non_negative_index("par1", "nlevels_a", nlevels_a);
            num_params_r__ += (1 * nlevels_a);
            current_statement_begin__ = 46;
            validate_non_negative_index("par2", "nlevels_BMD", nlevels_BMD);
            num_params_r__ += (1 * nlevels_BMD);
            current_statement_begin__ = 47;
            validate_non_negative_index("pars3i", "is_increasing", is_increasing);
            num_params_r__ += (1 * is_increasing);
            current_statement_begin__ = 48;
            validate_non_negative_index("pars3d", "is_decreasing", is_decreasing);
            num_params_r__ += (1 * is_decreasing);
            current_statement_begin__ = 49;
            validate_non_negative_index("par4", "nlevels_d", nlevels_d);
            num_params_r__ += (1 * nlevels_d);
            current_statement_begin__ = 50;
            validate_non_negative_index("par5", "nlevels_sigma", nlevels_sigma);
            num_params_r__ += (1 * nlevels_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_mH4COV() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 45;
        if (!(context__.contains_r("par1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par1");
        pos__ = 0U;
        validate_non_negative_index("par1", "nlevels_a", nlevels_a);
        context__.validate_dims("parameter initialization", "par1", "double", context__.to_vec(nlevels_a));
        std::vector<double> par1(nlevels_a, double(0));
        size_t par1_k_0_max__ = nlevels_a;
        for (size_t k_0__ = 0; k_0__ < par1_k_0_max__; ++k_0__) {
            par1[k_0__] = vals_r__[pos__++];
        }
        size_t par1_i_0_max__ = nlevels_a;
        for (size_t i_0__ = 0; i_0__ < par1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, par1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("par2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par2");
        pos__ = 0U;
        validate_non_negative_index("par2", "nlevels_BMD", nlevels_BMD);
        context__.validate_dims("parameter initialization", "par2", "double", context__.to_vec(nlevels_BMD));
        std::vector<double> par2(nlevels_BMD, double(0));
        size_t par2_k_0_max__ = nlevels_BMD;
        for (size_t k_0__ = 0; k_0__ < par2_k_0_max__; ++k_0__) {
            par2[k_0__] = vals_r__[pos__++];
        }
        size_t par2_i_0_max__ = nlevels_BMD;
        for (size_t i_0__ = 0; i_0__ < par2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, par2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("pars3i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pars3i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pars3i");
        pos__ = 0U;
        validate_non_negative_index("pars3i", "is_increasing", is_increasing);
        context__.validate_dims("parameter initialization", "pars3i", "double", context__.to_vec(is_increasing));
        std::vector<double> pars3i(is_increasing, double(0));
        size_t pars3i_k_0_max__ = is_increasing;
        for (size_t k_0__ = 0; k_0__ < pars3i_k_0_max__; ++k_0__) {
            pars3i[k_0__] = vals_r__[pos__++];
        }
        size_t pars3i_i_0_max__ = is_increasing;
        for (size_t i_0__ = 0; i_0__ < pars3i_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, pars3i[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pars3i: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 48;
        if (!(context__.contains_r("pars3d")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pars3d missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pars3d");
        pos__ = 0U;
        validate_non_negative_index("pars3d", "is_decreasing", is_decreasing);
        context__.validate_dims("parameter initialization", "pars3d", "double", context__.to_vec(is_decreasing));
        std::vector<double> pars3d(is_decreasing, double(0));
        size_t pars3d_k_0_max__ = is_decreasing;
        for (size_t k_0__ = 0; k_0__ < pars3d_k_0_max__; ++k_0__) {
            pars3d[k_0__] = vals_r__[pos__++];
        }
        size_t pars3d_i_0_max__ = is_decreasing;
        for (size_t i_0__ = 0; i_0__ < pars3d_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, pars3d[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pars3d: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 49;
        if (!(context__.contains_r("par4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par4");
        pos__ = 0U;
        validate_non_negative_index("par4", "nlevels_d", nlevels_d);
        context__.validate_dims("parameter initialization", "par4", "double", context__.to_vec(nlevels_d));
        std::vector<double> par4(nlevels_d, double(0));
        size_t par4_k_0_max__ = nlevels_d;
        for (size_t k_0__ = 0; k_0__ < par4_k_0_max__; ++k_0__) {
            par4[k_0__] = vals_r__[pos__++];
        }
        size_t par4_i_0_max__ = nlevels_d;
        for (size_t i_0__ = 0; i_0__ < par4_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(par4[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par4: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("par5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par5");
        pos__ = 0U;
        validate_non_negative_index("par5", "nlevels_sigma", nlevels_sigma);
        context__.validate_dims("parameter initialization", "par5", "double", context__.to_vec(nlevels_sigma));
        std::vector<double> par5(nlevels_sigma, double(0));
        size_t par5_k_0_max__ = nlevels_sigma;
        for (size_t k_0__ = 0; k_0__ < par5_k_0_max__; ++k_0__) {
            par5[k_0__] = vals_r__[pos__++];
        }
        size_t par5_i_0_max__ = nlevels_sigma;
        for (size_t i_0__ = 0; i_0__ < par5_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(par5[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par5: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 45;
            std::vector<local_scalar_t__> par1;
            size_t par1_d_0_max__ = nlevels_a;
            par1.reserve(par1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < par1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    par1.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    par1.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 46;
            std::vector<local_scalar_t__> par2;
            size_t par2_d_0_max__ = nlevels_BMD;
            par2.reserve(par2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < par2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    par2.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    par2.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 47;
            std::vector<local_scalar_t__> pars3i;
            size_t pars3i_d_0_max__ = is_increasing;
            pars3i.reserve(pars3i_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < pars3i_d_0_max__; ++d_0__) {
                if (jacobian__)
                    pars3i.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    pars3i.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 48;
            std::vector<local_scalar_t__> pars3d;
            size_t pars3d_d_0_max__ = is_decreasing;
            pars3d.reserve(pars3d_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < pars3d_d_0_max__; ++d_0__) {
                if (jacobian__)
                    pars3d.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    pars3d.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 49;
            std::vector<local_scalar_t__> par4;
            size_t par4_d_0_max__ = nlevels_d;
            par4.reserve(par4_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < par4_d_0_max__; ++d_0__) {
                if (jacobian__)
                    par4.push_back(in__.scalar_constrain(lp__));
                else
                    par4.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 50;
            std::vector<local_scalar_t__> par5;
            size_t par5_d_0_max__ = nlevels_sigma;
            par5.reserve(par5_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < par5_d_0_max__; ++d_0__) {
                if (jacobian__)
                    par5.push_back(in__.scalar_constrain(lp__));
                else
                    par5.push_back(in__.scalar_constrain());
            }
            // transformed parameters
            current_statement_begin__ = 53;
            validate_non_negative_index("b", "nlevels_b", nlevels_b);
            std::vector<local_scalar_t__> b(nlevels_b, local_scalar_t__(0));
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 54;
            validate_non_negative_index("a", "nlevels_a", nlevels_a);
            std::vector<local_scalar_t__> a(nlevels_a, local_scalar_t__(0));
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("c", "nlevels_a", nlevels_a);
            std::vector<local_scalar_t__> c(nlevels_a, local_scalar_t__(0));
            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c, DUMMY_VAR__);
            current_statement_begin__ = 56;
            local_scalar_t__ par3;
            (void) par3;  // dummy to suppress unused var warning
            stan::math::initialize(par3, DUMMY_VAR__);
            stan::math::fill(par3, DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("d", "nlevels_d", nlevels_d);
            std::vector<local_scalar_t__> d(nlevels_d, local_scalar_t__(0));
            stan::math::initialize(d, DUMMY_VAR__);
            stan::math::fill(d, DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("k", "nlevels_BMD", nlevels_BMD);
            std::vector<local_scalar_t__> k(nlevels_BMD, local_scalar_t__(0));
            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k, DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("mu_inf", "nlevels_a", nlevels_a);
            std::vector<local_scalar_t__> mu_inf(nlevels_a, local_scalar_t__(0));
            stan::math::initialize(mu_inf, DUMMY_VAR__);
            stan::math::fill(mu_inf, DUMMY_VAR__);
            current_statement_begin__ = 60;
            validate_non_negative_index("invsigma2", "nlevels_sigma", nlevels_sigma);
            std::vector<local_scalar_t__> invsigma2(nlevels_sigma, local_scalar_t__(0));
            stan::math::initialize(invsigma2, DUMMY_VAR__);
            stan::math::fill(invsigma2, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("mu_0", "nlevels_a", nlevels_a);
            std::vector<local_scalar_t__> mu_0(nlevels_a, local_scalar_t__(0));
            stan::math::initialize(mu_0, DUMMY_VAR__);
            stan::math::fill(mu_0, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 64;
            for (int mn = 1; mn <= nlevels_d; ++mn) {
                current_statement_begin__ = 65;
                stan::model::assign(d, 
                            stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(par4, mn, "par4", 1)), 
                            "assigning variable d");
            }
            current_statement_begin__ = 69;
            if (as_bool(is_increasing)) {
                current_statement_begin__ = 70;
                stan::math::assign(par3, (L + get_base1(pars3i, 1, "pars3i", 1)));
            } else if (as_bool(is_decreasing)) {
                current_statement_begin__ = 72;
                stan::math::assign(par3, (L + ((U - L) * get_base1(pars3d, 1, "pars3d", 1))));
            }
            current_statement_begin__ = 75;
            for (int mn = 1; mn <= nlevels_a; ++mn) {
                current_statement_begin__ = 76;
                stan::model::assign(mu_0, 
                            stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                            get_base1(par1, mn, "par1", 1), 
                            "assigning variable mu_0");
                current_statement_begin__ = 78;
                if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 3))))) {
                    current_statement_begin__ = 79;
                    stan::model::assign(a, 
                                stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                get_base1(par1, mn, "par1", 1), 
                                "assigning variable a");
                } else if (as_bool((primitive_value(logical_eq(data_type, 2)) || primitive_value(logical_eq(data_type, 4))))) {
                    current_statement_begin__ = 81;
                    stan::model::assign(a, 
                                stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                (stan::math::log(get_base1(par1, mn, "par1", 1)) - shift), 
                                "assigning variable a");
                }
                current_statement_begin__ = 83;
                stan::model::assign(mu_inf, 
                            stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                            (get_base1(par1, mn, "par1", 1) * par3), 
                            "assigning variable mu_inf");
            }
            current_statement_begin__ = 88;
            for (int mn = 1; mn <= nlevels_sigma; ++mn) {
                current_statement_begin__ = 89;
                stan::model::assign(invsigma2, 
                            stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(par5, mn, "par5", 1)), 
                            "assigning variable invsigma2");
            }
            current_statement_begin__ = 93;
            for (int mn = 1; mn <= nlevels_BMD; ++mn) {
                current_statement_begin__ = 94;
                stan::model::assign(k, 
                            stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                            stan::math::log(get_base1(par2, mn, "par2", 1)), 
                            "assigning variable k");
            }
            current_statement_begin__ = 98;
            for (int mn = 1; mn <= nlevels_a; ++mn) {
                current_statement_begin__ = 99;
                if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 3))))) {
                    current_statement_begin__ = 100;
                    stan::model::assign(c, 
                                stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                (get_base1(mu_inf, mn, "mu_inf", 1) / get_base1(mu_0, mn, "mu_0", 1)), 
                                "assigning variable c");
                } else if (as_bool((primitive_value(logical_eq(data_type, 2)) || primitive_value(logical_eq(data_type, 4))))) {
                    current_statement_begin__ = 102;
                    stan::model::assign(c, 
                                stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                ((stan::math::log(get_base1(mu_inf, mn, "mu_inf", 1)) - shift) / (stan::math::log(get_base1(mu_0, mn, "mu_0", 1)) - shift)), 
                                "assigning variable c");
                }
            }
            current_statement_begin__ = 107;
            if (as_bool((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) && primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(logical_eq(nlevels_BMD, 1))))) {
                current_statement_begin__ = 109;
                for (int mn = 1; mn <= nlevels_b; ++mn) {
                    current_statement_begin__ = 111;
                    if (as_bool(logical_eq(data_type, 1))) {
                        current_statement_begin__ = 112;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(c, 1, "c", 1) - 1) / q) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 2))) {
                        current_statement_begin__ = 114;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) / stan::math::log((1 + q))) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 3))) {
                        current_statement_begin__ = 116;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(c, 1, "c", 1) - 1) / -(q)) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 4))) {
                        current_statement_begin__ = 118;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) / stan::math::log((1 - q))) - 1)), 
                                    "assigning variable b");
                    }
                }
            } else if (as_bool((primitive_value((primitive_value(logical_gt(nlevels_a, 1)) && primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(logical_eq(nlevels_BMD, 1))))) {
                current_statement_begin__ = 125;
                for (int mn = 1; mn <= nlevels_b; ++mn) {
                    current_statement_begin__ = 127;
                    if (as_bool(logical_eq(data_type, 1))) {
                        current_statement_begin__ = 128;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(c, mn, "c", 1) - 1) / q) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 2))) {
                        current_statement_begin__ = 130;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) / stan::math::log((1 + q))) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 3))) {
                        current_statement_begin__ = 132;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(c, mn, "c", 1) - 1) / -(q)) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 4))) {
                        current_statement_begin__ = 134;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) / stan::math::log((1 - q))) - 1)), 
                                    "assigning variable b");
                    }
                }
            } else if (as_bool((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) && primitive_value(logical_gt(nlevels_d, 1)))) && primitive_value(logical_gt(nlevels_BMD, 1))))) {
                current_statement_begin__ = 141;
                for (int mn = 1; mn <= nlevels_b; ++mn) {
                    current_statement_begin__ = 143;
                    if (as_bool(logical_eq(data_type, 1))) {
                        current_statement_begin__ = 144;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(c, 1, "c", 1) - 1) / q) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 2))) {
                        current_statement_begin__ = 146;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) / stan::math::log((1 + q))) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 3))) {
                        current_statement_begin__ = 148;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(c, 1, "c", 1) - 1) / -(q)) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 4))) {
                        current_statement_begin__ = 150;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) / stan::math::log((1 - q))) - 1)), 
                                    "assigning variable b");
                    }
                }
            } else if (as_bool((primitive_value((primitive_value(logical_gt(nlevels_a, 1)) && primitive_value(logical_gt(nlevels_d, 1)))) && primitive_value(logical_gt(nlevels_BMD, 1))))) {
                current_statement_begin__ = 157;
                for (int mn = 1; mn <= nlevels_b; ++mn) {
                    current_statement_begin__ = 159;
                    if (as_bool(logical_eq(data_type, 1))) {
                        current_statement_begin__ = 160;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(c, mn, "c", 1) - 1) / q) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 2))) {
                        current_statement_begin__ = 162;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) / stan::math::log((1 + q))) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 3))) {
                        current_statement_begin__ = 164;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(c, mn, "c", 1) - 1) / -(q)) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 4))) {
                        current_statement_begin__ = 166;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) / stan::math::log((1 - q))) - 1)), 
                                    "assigning variable b");
                    }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 53;
            size_t b_k_0_max__ = nlevels_b;
            for (size_t k_0__ = 0; k_0__ < b_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(b[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: b" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 54;
            size_t a_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(a[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: a" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable a: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 55;
            size_t c_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < c_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(c[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: c" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable c: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 56;
            if (stan::math::is_uninitialized(par3)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: par3";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable par3: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 57;
            size_t d_k_0_max__ = nlevels_d;
            for (size_t k_0__ = 0; k_0__ < d_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(d[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: d" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable d: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 58;
            size_t k_k_0_max__ = nlevels_BMD;
            for (size_t k_0__ = 0; k_0__ < k_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(k[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: k" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable k: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 59;
            size_t mu_inf_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < mu_inf_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(mu_inf[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_inf" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 60;
            size_t invsigma2_k_0_max__ = nlevels_sigma;
            for (size_t k_0__ = 0; k_0__ < invsigma2_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(invsigma2[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: invsigma2" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable invsigma2: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 61;
            size_t mu_0_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < mu_0_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(mu_0[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_0" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 177;
            for (int i = 1; i <= nlevels_a; ++i) {
                current_statement_begin__ = 178;
                lp_accum__.add(pert_dist_lpdf<propto__>(get_base1(par1, i, "par1", 1), get_base1(shape1, 1, i, "shape1", 1), get_base1(shape2, 1, i, "shape2", 1), get_base1(priorlb, 1, i, "priorlb", 1), get_base1(priorub, 1, i, "priorub", 1), pstream__));
            }
            current_statement_begin__ = 182;
            for (int i = 1; i <= nlevels_BMD; ++i) {
                current_statement_begin__ = 183;
                lp_accum__.add(pert_dist_lpdf<propto__>(get_base1(par2, i, "par2", 1), get_base1(shape1, 2, i, "shape1", 1), get_base1(shape2, 2, i, "shape2", 1), get_base1(priorlb, 2, i, "priorlb", 1), get_base1(priorub, 2, i, "priorub", 1), pstream__));
            }
            current_statement_begin__ = 187;
            for (int i = 1; i <= nlevels_sigma; ++i) {
                current_statement_begin__ = 188;
                lp_accum__.add(normal_log<propto__>(get_base1(par5, i, "par5", 1), get_base1(priormu, 5, i, "priormu", 1), get_base1(priorSigma, 5, 5, "priorSigma", 1)));
            }
            current_statement_begin__ = 192;
            for (int i = 1; i <= nlevels_d; ++i) {
                current_statement_begin__ = 193;
                lp_accum__.add(normal_log<propto__>(get_base1(par4, i, "par4", 1), get_base1(priormu, 4, i, "priormu", 1), get_base1(priorSigma, 4, 4, "priorSigma", 1)));
                if (get_base1(par4, i, "par4", 1) > truncd) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_cdf_log(truncd, get_base1(priormu, 4, i, "priormu", 1), get_base1(priorSigma, 4, 4, "priorSigma", 1)));
            }
            current_statement_begin__ = 197;
            lp_accum__.add(pert_dist_lpdf<propto__>(par3, get_base1(shape1, 3, 1, "shape1", 1), get_base1(shape2, 3, 1, "shape2", 1), get_base1(priorlb, 3, 1, "priorlb", 1), get_base1(priorub, 3, 1, "priorub", 1), pstream__));
            current_statement_begin__ = 199;
            if (as_bool((primitive_value((primitive_value((primitive_value(logical_gt(nlevels_d, 1)) && primitive_value(logical_gt(nlevels_BMD, 1)))) && primitive_value(logical_eq(nlevels_a, 1)))) && primitive_value(logical_eq(nlevels_sigma, 1))))) {
                current_statement_begin__ = 202;
                if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 3))))) {
                    current_statement_begin__ = 203;
                    for (int i = 1; i <= N; ++i) {
                        current_statement_begin__ = 204;
                        for (int mn = 1; mn <= nlevels; ++mn) {
                            current_statement_begin__ = 205;
                            lp_accum__.add(((((((-(0.5) * get_base1(n, i, "n", 1)) * stan::math::log((2 * stan::math::pi()))) + ((0.5 * get_base1(n, i, "n", 1)) * stan::math::log(get_base1(invsigma2, 1, "invsigma2", 1)))) - (((0.5 * (get_base1(n, i, "n", 1) - 1)) * get_base1(s2, i, "s2", 1)) * get_base1(invsigma2, 1, "invsigma2", 1))) - (((0.5 * get_base1(n, i, "n", 1)) * square(((get_base1(m, i, "m", 1) - get_base1(a, 1, "a", 1)) - ((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) * (1 - (get_base1(b, mn, "b", 1) / (get_base1(b, mn, "b", 1) + pow(get_base1(x, i, "x", 1), get_base1(d, mn, "d", 1))))))))) * get_base1(invsigma2, 1, "invsigma2", 1))) * get_base1(trt_ind, i, mn, "trt_ind", 1)));
                        }
                    }
                } else if (as_bool((primitive_value(logical_eq(data_type, 2)) || primitive_value(logical_eq(data_type, 4))))) {
                    current_statement_begin__ = 213;
                    for (int i = 1; i <= N; ++i) {
                        current_statement_begin__ = 214;
                        for (int mn = 1; mn <= nlevels; ++mn) {
                            current_statement_begin__ = 215;
                            lp_accum__.add((((((((-(0.5) * get_base1(n, i, "n", 1)) * stan::math::log((2 * stan::math::pi()))) + ((0.5 * get_base1(n, i, "n", 1)) * stan::math::log(get_base1(invsigma2, 1, "invsigma2", 1)))) - (((0.5 * (get_base1(n, i, "n", 1) - 1)) * get_base1(s2, i, "s2", 1)) * get_base1(invsigma2, 1, "invsigma2", 1))) - (((0.5 * get_base1(n, i, "n", 1)) * square(((get_base1(m, i, "m", 1) - get_base1(a, 1, "a", 1)) - ((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) * (1 - (get_base1(b, mn, "b", 1) / (get_base1(b, mn, "b", 1) + pow(get_base1(x, i, "x", 1), get_base1(d, mn, "d", 1))))))))) * get_base1(invsigma2, 1, "invsigma2", 1))) - (get_base1(m, i, "m", 1) * get_base1(n, i, "n", 1))) * get_base1(trt_ind, i, mn, "trt_ind", 1)));
                        }
                    }
                }
            } else if (as_bool((primitive_value((primitive_value((primitive_value(logical_gt(nlevels_a, 1)) && primitive_value(logical_gt(nlevels_sigma, 1)))) && primitive_value(logical_eq(nlevels_BMD, 1)))) && primitive_value(logical_eq(nlevels_d, 1))))) {
                current_statement_begin__ = 226;
                if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 3))))) {
                    current_statement_begin__ = 227;
                    for (int i = 1; i <= N; ++i) {
                        current_statement_begin__ = 228;
                        for (int mn = 1; mn <= nlevels; ++mn) {
                            current_statement_begin__ = 229;
                            lp_accum__.add(((((((-(0.5) * get_base1(n, i, "n", 1)) * stan::math::log((2 * stan::math::pi()))) + ((0.5 * get_base1(n, i, "n", 1)) * stan::math::log(get_base1(invsigma2, mn, "invsigma2", 1)))) - (((0.5 * (get_base1(n, i, "n", 1) - 1)) * get_base1(s2, i, "s2", 1)) * get_base1(invsigma2, mn, "invsigma2", 1))) - (((0.5 * get_base1(n, i, "n", 1)) * square(((get_base1(m, i, "m", 1) - get_base1(a, mn, "a", 1)) - ((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) * (1 - (get_base1(b, mn, "b", 1) / (get_base1(b, mn, "b", 1) + pow(get_base1(x, i, "x", 1), get_base1(d, 1, "d", 1))))))))) * get_base1(invsigma2, mn, "invsigma2", 1))) * get_base1(trt_ind, i, mn, "trt_ind", 1)));
                        }
                    }
                } else if (as_bool((primitive_value(logical_eq(data_type, 2)) || primitive_value(logical_eq(data_type, 4))))) {
                    current_statement_begin__ = 237;
                    for (int i = 1; i <= N; ++i) {
                        current_statement_begin__ = 238;
                        for (int mn = 1; mn <= nlevels; ++mn) {
                            current_statement_begin__ = 239;
                            lp_accum__.add((((((((-(0.5) * get_base1(n, i, "n", 1)) * stan::math::log((2 * stan::math::pi()))) + ((0.5 * get_base1(n, i, "n", 1)) * stan::math::log(get_base1(invsigma2, mn, "invsigma2", 1)))) - (((0.5 * (get_base1(n, i, "n", 1) - 1)) * get_base1(s2, i, "s2", 1)) * get_base1(invsigma2, mn, "invsigma2", 1))) - (((0.5 * get_base1(n, i, "n", 1)) * square(((get_base1(m, i, "m", 1) - get_base1(a, mn, "a", 1)) - ((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) * (1 - (get_base1(b, mn, "b", 1) / (get_base1(b, mn, "b", 1) + pow(get_base1(x, i, "x", 1), get_base1(d, 1, "d", 1))))))))) * get_base1(invsigma2, mn, "invsigma2", 1))) - (get_base1(m, i, "m", 1) * get_base1(n, i, "n", 1))) * get_base1(trt_ind, i, mn, "trt_ind", 1)));
                        }
                    }
                }
            } else if (as_bool((primitive_value((primitive_value((primitive_value(logical_gt(nlevels_d, 1)) && primitive_value(logical_gt(nlevels_BMD, 1)))) && primitive_value(logical_gt(nlevels_a, 1)))) && primitive_value(logical_gt(nlevels_sigma, 1))))) {
                current_statement_begin__ = 251;
                if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 3))))) {
                    current_statement_begin__ = 252;
                    for (int i = 1; i <= N; ++i) {
                        current_statement_begin__ = 253;
                        for (int mn = 1; mn <= nlevels; ++mn) {
                            current_statement_begin__ = 254;
                            lp_accum__.add(((((((-(0.5) * get_base1(n, i, "n", 1)) * stan::math::log((2 * stan::math::pi()))) + ((0.5 * get_base1(n, i, "n", 1)) * stan::math::log(get_base1(invsigma2, mn, "invsigma2", 1)))) - (((0.5 * (get_base1(n, i, "n", 1) - 1)) * get_base1(s2, i, "s2", 1)) * get_base1(invsigma2, mn, "invsigma2", 1))) - (((0.5 * get_base1(n, i, "n", 1)) * square(((get_base1(m, i, "m", 1) - get_base1(a, mn, "a", 1)) - ((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) * (1 - (get_base1(b, mn, "b", 1) / (get_base1(b, mn, "b", 1) + pow(get_base1(x, i, "x", 1), get_base1(d, mn, "d", 1))))))))) * get_base1(invsigma2, mn, "invsigma2", 1))) * get_base1(trt_ind, i, mn, "trt_ind", 1)));
                        }
                    }
                } else if (as_bool((primitive_value(logical_eq(data_type, 2)) || primitive_value(logical_eq(data_type, 4))))) {
                    current_statement_begin__ = 262;
                    for (int i = 1; i <= N; ++i) {
                        current_statement_begin__ = 263;
                        for (int mn = 1; mn <= nlevels; ++mn) {
                            current_statement_begin__ = 264;
                            lp_accum__.add((((((((-(0.5) * get_base1(n, i, "n", 1)) * stan::math::log((2 * stan::math::pi()))) + ((0.5 * get_base1(n, i, "n", 1)) * stan::math::log(get_base1(invsigma2, mn, "invsigma2", 1)))) - (((0.5 * (get_base1(n, i, "n", 1) - 1)) * get_base1(s2, i, "s2", 1)) * get_base1(invsigma2, mn, "invsigma2", 1))) - (((0.5 * get_base1(n, i, "n", 1)) * square(((get_base1(m, i, "m", 1) - get_base1(a, mn, "a", 1)) - ((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) * (1 - (get_base1(b, mn, "b", 1) / (get_base1(b, mn, "b", 1) + pow(get_base1(x, i, "x", 1), get_base1(d, mn, "d", 1))))))))) * get_base1(invsigma2, mn, "invsigma2", 1))) - (get_base1(m, i, "m", 1) * get_base1(n, i, "n", 1))) * get_base1(trt_ind, i, mn, "trt_ind", 1)));
                        }
                    }
                }
            } else {
                current_statement_begin__ = 274;
                if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 3))))) {
                    current_statement_begin__ = 275;
                    for (int i = 1; i <= N; ++i) {
                        current_statement_begin__ = 276;
                        for (int mn = 1; mn <= nlevels; ++mn) {
                            current_statement_begin__ = 277;
                            lp_accum__.add(((((((-(0.5) * get_base1(n, i, "n", 1)) * stan::math::log((2 * stan::math::pi()))) + ((0.5 * get_base1(n, i, "n", 1)) * stan::math::log(get_base1(invsigma2, 1, "invsigma2", 1)))) - (((0.5 * (get_base1(n, i, "n", 1) - 1)) * get_base1(s2, i, "s2", 1)) * get_base1(invsigma2, 1, "invsigma2", 1))) - (((0.5 * get_base1(n, i, "n", 1)) * square(((get_base1(m, i, "m", 1) - get_base1(a, 1, "a", 1)) - ((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) * (1 - (get_base1(b, 1, "b", 1) / (get_base1(b, 1, "b", 1) + pow(get_base1(x, i, "x", 1), get_base1(d, 1, "d", 1))))))))) * get_base1(invsigma2, 1, "invsigma2", 1))) * get_base1(trt_ind, i, mn, "trt_ind", 1)));
                        }
                    }
                } else if (as_bool((primitive_value(logical_eq(data_type, 2)) || primitive_value(logical_eq(data_type, 4))))) {
                    current_statement_begin__ = 284;
                    for (int i = 1; i <= N; ++i) {
                        current_statement_begin__ = 285;
                        for (int mn = 1; mn <= nlevels; ++mn) {
                            current_statement_begin__ = 286;
                            lp_accum__.add((((((((-(0.5) * get_base1(n, i, "n", 1)) * stan::math::log((2 * stan::math::pi()))) + ((0.5 * get_base1(n, i, "n", 1)) * stan::math::log(get_base1(invsigma2, 1, "invsigma2", 1)))) - (((0.5 * (get_base1(n, i, "n", 1) - 1)) * get_base1(s2, i, "s2", 1)) * get_base1(invsigma2, 1, "invsigma2", 1))) - (((0.5 * get_base1(n, i, "n", 1)) * square(((get_base1(m, i, "m", 1) - get_base1(a, 1, "a", 1)) - ((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) * (1 - (get_base1(b, 1, "b", 1) / (get_base1(b, 1, "b", 1) + pow(get_base1(x, i, "x", 1), get_base1(d, 1, "d", 1))))))))) * get_base1(invsigma2, 1, "invsigma2", 1))) - (get_base1(m, i, "m", 1) * get_base1(n, i, "n", 1))) * get_base1(trt_ind, i, mn, "trt_ind", 1)));
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("par1");
        names__.push_back("par2");
        names__.push_back("pars3i");
        names__.push_back("pars3d");
        names__.push_back("par4");
        names__.push_back("par5");
        names__.push_back("b");
        names__.push_back("a");
        names__.push_back("c");
        names__.push_back("par3");
        names__.push_back("d");
        names__.push_back("k");
        names__.push_back("mu_inf");
        names__.push_back("invsigma2");
        names__.push_back("mu_0");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nlevels_a);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nlevels_BMD);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_increasing);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_decreasing);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nlevels_d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nlevels_sigma);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nlevels_b);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nlevels_a);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nlevels_a);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nlevels_d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nlevels_BMD);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nlevels_a);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nlevels_sigma);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nlevels_a);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mH4COV_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> par1;
        size_t par1_d_0_max__ = nlevels_a;
        par1.reserve(par1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < par1_d_0_max__; ++d_0__) {
            par1.push_back(in__.scalar_lb_constrain(0));
        }
        size_t par1_k_0_max__ = nlevels_a;
        for (size_t k_0__ = 0; k_0__ < par1_k_0_max__; ++k_0__) {
            vars__.push_back(par1[k_0__]);
        }
        std::vector<double> par2;
        size_t par2_d_0_max__ = nlevels_BMD;
        par2.reserve(par2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < par2_d_0_max__; ++d_0__) {
            par2.push_back(in__.scalar_lb_constrain(0));
        }
        size_t par2_k_0_max__ = nlevels_BMD;
        for (size_t k_0__ = 0; k_0__ < par2_k_0_max__; ++k_0__) {
            vars__.push_back(par2[k_0__]);
        }
        std::vector<double> pars3i;
        size_t pars3i_d_0_max__ = is_increasing;
        pars3i.reserve(pars3i_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < pars3i_d_0_max__; ++d_0__) {
            pars3i.push_back(in__.scalar_lb_constrain(0));
        }
        size_t pars3i_k_0_max__ = is_increasing;
        for (size_t k_0__ = 0; k_0__ < pars3i_k_0_max__; ++k_0__) {
            vars__.push_back(pars3i[k_0__]);
        }
        std::vector<double> pars3d;
        size_t pars3d_d_0_max__ = is_decreasing;
        pars3d.reserve(pars3d_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < pars3d_d_0_max__; ++d_0__) {
            pars3d.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t pars3d_k_0_max__ = is_decreasing;
        for (size_t k_0__ = 0; k_0__ < pars3d_k_0_max__; ++k_0__) {
            vars__.push_back(pars3d[k_0__]);
        }
        std::vector<double> par4;
        size_t par4_d_0_max__ = nlevels_d;
        par4.reserve(par4_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < par4_d_0_max__; ++d_0__) {
            par4.push_back(in__.scalar_constrain());
        }
        size_t par4_k_0_max__ = nlevels_d;
        for (size_t k_0__ = 0; k_0__ < par4_k_0_max__; ++k_0__) {
            vars__.push_back(par4[k_0__]);
        }
        std::vector<double> par5;
        size_t par5_d_0_max__ = nlevels_sigma;
        par5.reserve(par5_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < par5_d_0_max__; ++d_0__) {
            par5.push_back(in__.scalar_constrain());
        }
        size_t par5_k_0_max__ = nlevels_sigma;
        for (size_t k_0__ = 0; k_0__ < par5_k_0_max__; ++k_0__) {
            vars__.push_back(par5[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 53;
            validate_non_negative_index("b", "nlevels_b", nlevels_b);
            std::vector<double> b(nlevels_b, double(0));
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 54;
            validate_non_negative_index("a", "nlevels_a", nlevels_a);
            std::vector<double> a(nlevels_a, double(0));
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("c", "nlevels_a", nlevels_a);
            std::vector<double> c(nlevels_a, double(0));
            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c, DUMMY_VAR__);
            current_statement_begin__ = 56;
            double par3;
            (void) par3;  // dummy to suppress unused var warning
            stan::math::initialize(par3, DUMMY_VAR__);
            stan::math::fill(par3, DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("d", "nlevels_d", nlevels_d);
            std::vector<double> d(nlevels_d, double(0));
            stan::math::initialize(d, DUMMY_VAR__);
            stan::math::fill(d, DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("k", "nlevels_BMD", nlevels_BMD);
            std::vector<double> k(nlevels_BMD, double(0));
            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k, DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("mu_inf", "nlevels_a", nlevels_a);
            std::vector<double> mu_inf(nlevels_a, double(0));
            stan::math::initialize(mu_inf, DUMMY_VAR__);
            stan::math::fill(mu_inf, DUMMY_VAR__);
            current_statement_begin__ = 60;
            validate_non_negative_index("invsigma2", "nlevels_sigma", nlevels_sigma);
            std::vector<double> invsigma2(nlevels_sigma, double(0));
            stan::math::initialize(invsigma2, DUMMY_VAR__);
            stan::math::fill(invsigma2, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("mu_0", "nlevels_a", nlevels_a);
            std::vector<double> mu_0(nlevels_a, double(0));
            stan::math::initialize(mu_0, DUMMY_VAR__);
            stan::math::fill(mu_0, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 64;
            for (int mn = 1; mn <= nlevels_d; ++mn) {
                current_statement_begin__ = 65;
                stan::model::assign(d, 
                            stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(par4, mn, "par4", 1)), 
                            "assigning variable d");
            }
            current_statement_begin__ = 69;
            if (as_bool(is_increasing)) {
                current_statement_begin__ = 70;
                stan::math::assign(par3, (L + get_base1(pars3i, 1, "pars3i", 1)));
            } else if (as_bool(is_decreasing)) {
                current_statement_begin__ = 72;
                stan::math::assign(par3, (L + ((U - L) * get_base1(pars3d, 1, "pars3d", 1))));
            }
            current_statement_begin__ = 75;
            for (int mn = 1; mn <= nlevels_a; ++mn) {
                current_statement_begin__ = 76;
                stan::model::assign(mu_0, 
                            stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                            get_base1(par1, mn, "par1", 1), 
                            "assigning variable mu_0");
                current_statement_begin__ = 78;
                if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 3))))) {
                    current_statement_begin__ = 79;
                    stan::model::assign(a, 
                                stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                get_base1(par1, mn, "par1", 1), 
                                "assigning variable a");
                } else if (as_bool((primitive_value(logical_eq(data_type, 2)) || primitive_value(logical_eq(data_type, 4))))) {
                    current_statement_begin__ = 81;
                    stan::model::assign(a, 
                                stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                (stan::math::log(get_base1(par1, mn, "par1", 1)) - shift), 
                                "assigning variable a");
                }
                current_statement_begin__ = 83;
                stan::model::assign(mu_inf, 
                            stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                            (get_base1(par1, mn, "par1", 1) * par3), 
                            "assigning variable mu_inf");
            }
            current_statement_begin__ = 88;
            for (int mn = 1; mn <= nlevels_sigma; ++mn) {
                current_statement_begin__ = 89;
                stan::model::assign(invsigma2, 
                            stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(par5, mn, "par5", 1)), 
                            "assigning variable invsigma2");
            }
            current_statement_begin__ = 93;
            for (int mn = 1; mn <= nlevels_BMD; ++mn) {
                current_statement_begin__ = 94;
                stan::model::assign(k, 
                            stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                            stan::math::log(get_base1(par2, mn, "par2", 1)), 
                            "assigning variable k");
            }
            current_statement_begin__ = 98;
            for (int mn = 1; mn <= nlevels_a; ++mn) {
                current_statement_begin__ = 99;
                if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 3))))) {
                    current_statement_begin__ = 100;
                    stan::model::assign(c, 
                                stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                (get_base1(mu_inf, mn, "mu_inf", 1) / get_base1(mu_0, mn, "mu_0", 1)), 
                                "assigning variable c");
                } else if (as_bool((primitive_value(logical_eq(data_type, 2)) || primitive_value(logical_eq(data_type, 4))))) {
                    current_statement_begin__ = 102;
                    stan::model::assign(c, 
                                stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                ((stan::math::log(get_base1(mu_inf, mn, "mu_inf", 1)) - shift) / (stan::math::log(get_base1(mu_0, mn, "mu_0", 1)) - shift)), 
                                "assigning variable c");
                }
            }
            current_statement_begin__ = 107;
            if (as_bool((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) && primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(logical_eq(nlevels_BMD, 1))))) {
                current_statement_begin__ = 109;
                for (int mn = 1; mn <= nlevels_b; ++mn) {
                    current_statement_begin__ = 111;
                    if (as_bool(logical_eq(data_type, 1))) {
                        current_statement_begin__ = 112;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(c, 1, "c", 1) - 1) / q) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 2))) {
                        current_statement_begin__ = 114;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) / stan::math::log((1 + q))) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 3))) {
                        current_statement_begin__ = 116;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(c, 1, "c", 1) - 1) / -(q)) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 4))) {
                        current_statement_begin__ = 118;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) / stan::math::log((1 - q))) - 1)), 
                                    "assigning variable b");
                    }
                }
            } else if (as_bool((primitive_value((primitive_value(logical_gt(nlevels_a, 1)) && primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(logical_eq(nlevels_BMD, 1))))) {
                current_statement_begin__ = 125;
                for (int mn = 1; mn <= nlevels_b; ++mn) {
                    current_statement_begin__ = 127;
                    if (as_bool(logical_eq(data_type, 1))) {
                        current_statement_begin__ = 128;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(c, mn, "c", 1) - 1) / q) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 2))) {
                        current_statement_begin__ = 130;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) / stan::math::log((1 + q))) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 3))) {
                        current_statement_begin__ = 132;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(c, mn, "c", 1) - 1) / -(q)) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 4))) {
                        current_statement_begin__ = 134;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, 1, "k", 1) * get_base1(d, 1, "d", 1))) * (((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) / stan::math::log((1 - q))) - 1)), 
                                    "assigning variable b");
                    }
                }
            } else if (as_bool((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) && primitive_value(logical_gt(nlevels_d, 1)))) && primitive_value(logical_gt(nlevels_BMD, 1))))) {
                current_statement_begin__ = 141;
                for (int mn = 1; mn <= nlevels_b; ++mn) {
                    current_statement_begin__ = 143;
                    if (as_bool(logical_eq(data_type, 1))) {
                        current_statement_begin__ = 144;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(c, 1, "c", 1) - 1) / q) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 2))) {
                        current_statement_begin__ = 146;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) / stan::math::log((1 + q))) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 3))) {
                        current_statement_begin__ = 148;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(c, 1, "c", 1) - 1) / -(q)) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 4))) {
                        current_statement_begin__ = 150;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(a, 1, "a", 1) * (get_base1(c, 1, "c", 1) - 1)) / stan::math::log((1 - q))) - 1)), 
                                    "assigning variable b");
                    }
                }
            } else if (as_bool((primitive_value((primitive_value(logical_gt(nlevels_a, 1)) && primitive_value(logical_gt(nlevels_d, 1)))) && primitive_value(logical_gt(nlevels_BMD, 1))))) {
                current_statement_begin__ = 157;
                for (int mn = 1; mn <= nlevels_b; ++mn) {
                    current_statement_begin__ = 159;
                    if (as_bool(logical_eq(data_type, 1))) {
                        current_statement_begin__ = 160;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(c, mn, "c", 1) - 1) / q) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 2))) {
                        current_statement_begin__ = 162;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) / stan::math::log((1 + q))) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 3))) {
                        current_statement_begin__ = 164;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(c, mn, "c", 1) - 1) / -(q)) - 1)), 
                                    "assigning variable b");
                    } else if (as_bool(logical_eq(data_type, 4))) {
                        current_statement_begin__ = 166;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(mn), stan::model::nil_index_list()), 
                                    (stan::math::exp((get_base1(k, mn, "k", 1) * get_base1(d, mn, "d", 1))) * (((get_base1(a, mn, "a", 1) * (get_base1(c, mn, "c", 1) - 1)) / stan::math::log((1 - q))) - 1)), 
                                    "assigning variable b");
                    }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t b_k_0_max__ = nlevels_b;
                for (size_t k_0__ = 0; k_0__ < b_k_0_max__; ++k_0__) {
                    vars__.push_back(b[k_0__]);
                }
                size_t a_k_0_max__ = nlevels_a;
                for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
                    vars__.push_back(a[k_0__]);
                }
                size_t c_k_0_max__ = nlevels_a;
                for (size_t k_0__ = 0; k_0__ < c_k_0_max__; ++k_0__) {
                    vars__.push_back(c[k_0__]);
                }
                vars__.push_back(par3);
                size_t d_k_0_max__ = nlevels_d;
                for (size_t k_0__ = 0; k_0__ < d_k_0_max__; ++k_0__) {
                    vars__.push_back(d[k_0__]);
                }
                size_t k_k_0_max__ = nlevels_BMD;
                for (size_t k_0__ = 0; k_0__ < k_k_0_max__; ++k_0__) {
                    vars__.push_back(k[k_0__]);
                }
                size_t mu_inf_k_0_max__ = nlevels_a;
                for (size_t k_0__ = 0; k_0__ < mu_inf_k_0_max__; ++k_0__) {
                    vars__.push_back(mu_inf[k_0__]);
                }
                size_t invsigma2_k_0_max__ = nlevels_sigma;
                for (size_t k_0__ = 0; k_0__ < invsigma2_k_0_max__; ++k_0__) {
                    vars__.push_back(invsigma2[k_0__]);
                }
                size_t mu_0_k_0_max__ = nlevels_a;
                for (size_t k_0__ = 0; k_0__ < mu_0_k_0_max__; ++k_0__) {
                    vars__.push_back(mu_0[k_0__]);
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_mH4COV";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t par1_k_0_max__ = nlevels_a;
        for (size_t k_0__ = 0; k_0__ < par1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "par1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t par2_k_0_max__ = nlevels_BMD;
        for (size_t k_0__ = 0; k_0__ < par2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "par2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pars3i_k_0_max__ = is_increasing;
        for (size_t k_0__ = 0; k_0__ < pars3i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pars3i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pars3d_k_0_max__ = is_decreasing;
        for (size_t k_0__ = 0; k_0__ < pars3d_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pars3d" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t par4_k_0_max__ = nlevels_d;
        for (size_t k_0__ = 0; k_0__ < par4_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "par4" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t par5_k_0_max__ = nlevels_sigma;
        for (size_t k_0__ = 0; k_0__ < par5_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "par5" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t b_k_0_max__ = nlevels_b;
            for (size_t k_0__ = 0; k_0__ < b_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t a_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t c_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < c_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "c" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "par3";
            param_names__.push_back(param_name_stream__.str());
            size_t d_k_0_max__ = nlevels_d;
            for (size_t k_0__ = 0; k_0__ < d_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "d" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t k_k_0_max__ = nlevels_BMD;
            for (size_t k_0__ = 0; k_0__ < k_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "k" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_inf_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < mu_inf_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_inf" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t invsigma2_k_0_max__ = nlevels_sigma;
            for (size_t k_0__ = 0; k_0__ < invsigma2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invsigma2" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_0_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < mu_0_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_0" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t par1_k_0_max__ = nlevels_a;
        for (size_t k_0__ = 0; k_0__ < par1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "par1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t par2_k_0_max__ = nlevels_BMD;
        for (size_t k_0__ = 0; k_0__ < par2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "par2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pars3i_k_0_max__ = is_increasing;
        for (size_t k_0__ = 0; k_0__ < pars3i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pars3i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pars3d_k_0_max__ = is_decreasing;
        for (size_t k_0__ = 0; k_0__ < pars3d_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pars3d" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t par4_k_0_max__ = nlevels_d;
        for (size_t k_0__ = 0; k_0__ < par4_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "par4" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t par5_k_0_max__ = nlevels_sigma;
        for (size_t k_0__ = 0; k_0__ < par5_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "par5" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t b_k_0_max__ = nlevels_b;
            for (size_t k_0__ = 0; k_0__ < b_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t a_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t c_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < c_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "c" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "par3";
            param_names__.push_back(param_name_stream__.str());
            size_t d_k_0_max__ = nlevels_d;
            for (size_t k_0__ = 0; k_0__ < d_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "d" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t k_k_0_max__ = nlevels_BMD;
            for (size_t k_0__ = 0; k_0__ < k_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "k" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_inf_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < mu_inf_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_inf" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t invsigma2_k_0_max__ = nlevels_sigma;
            for (size_t k_0__ = 0; k_0__ < invsigma2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invsigma2" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_0_k_0_max__ = nlevels_a;
            for (size_t k_0__ = 0; k_0__ < mu_0_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_0" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_mH4COV_namespace::model_mH4COV stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
