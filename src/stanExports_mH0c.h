// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_mH0c_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 37, column 2 to column 16)",
                                                      " (in 'string', line 40, column 2 to column 9)",
                                                      " (in 'string', line 41, column 2 to column 17)",
                                                      " (in 'string', line 42, column 2 to column 19)",
                                                      " (in 'string', line 43, column 2 to column 23)",
                                                      " (in 'string', line 47, column 4 to column 28)",
                                                      " (in 'string', line 46, column 44 to line 48, column 3)",
                                                      " (in 'string', line 46, column 8 to line 48, column 3)",
                                                      " (in 'string', line 45, column 4 to column 15)",
                                                      " (in 'string', line 44, column 38 to line 46, column 3)",
                                                      " (in 'string', line 44, column 2 to line 48, column 3)",
                                                      " (in 'string', line 49, column 2 to column 24)",
                                                      " (in 'string', line 52, column 2 to column 59)",
                                                      " (in 'string', line 53, column 2 to column 46)",
                                                      " (in 'string', line 54, column 2 to column 40)",
                                                      " (in 'string', line 87, column 4 to column 12)",
                                                      " (in 'string', line 88, column 4 to column 12)",
                                                      " (in 'string', line 90, column 4 to column 11)",
                                                      " (in 'string', line 93, column 4 to column 14)",
                                                      " (in 'string', line 95, column 4 to column 23)",
                                                      " (in 'string', line 96, column 15 to column 17)",
                                                      " (in 'string', line 96, column 4 to column 24)",
                                                      " (in 'string', line 97, column 15 to column 17)",
                                                      " (in 'string', line 97, column 4 to column 21)",
                                                      " (in 'string', line 98, column 11 to column 13)",
                                                      " (in 'string', line 98, column 15 to column 17)",
                                                      " (in 'string', line 98, column 4 to column 21)",
                                                      " (in 'string', line 99, column 11 to column 13)",
                                                      " (in 'string', line 99, column 15 to column 17)",
                                                      " (in 'string', line 99, column 4 to column 25)",
                                                      " (in 'string', line 100, column 4 to column 24)",
                                                      " (in 'string', line 102, column 4 to column 30)",
                                                      " (in 'string', line 108, column 10 to column 36)",
                                                      " (in 'string', line 107, column 13 to line 109, column 9)",
                                                      " (in 'string', line 106, column 10 to column 26)",
                                                      " (in 'string', line 105, column 22 to line 107, column 9)",
                                                      " (in 'string', line 105, column 8 to line 109, column 9)",
                                                      " (in 'string', line 104, column 22 to line 110, column 7)",
                                                      " (in 'string', line 104, column 6 to line 110, column 7)",
                                                      " (in 'string', line 103, column 20 to line 111, column 5)",
                                                      " (in 'string', line 103, column 4 to line 111, column 5)",
                                                      " (in 'string', line 112, column 4 to column 28)",
                                                      " (in 'string', line 113, column 4 to column 49)",
                                                      " (in 'string', line 114, column 4 to column 27)",
                                                      " (in 'string', line 115, column 4 to column 18)",
                                                      " (in 'string', line 94, column 18 to line 116, column 5)",
                                                      " (in 'string', line 94, column 4 to line 116, column 5)",
                                                      " (in 'string', line 89, column 17 to line 117, column 5)",
                                                      " (in 'string', line 89, column 4 to line 117, column 5)",
                                                      " (in 'string', line 86, column 44 to line 118, column 3)",
                                                      " (in 'string', line 86, column 8 to line 118, column 3)",
                                                      " (in 'string', line 56, column 4 to column 12)",
                                                      " (in 'string', line 57, column 4 to column 12)",
                                                      " (in 'string', line 59, column 4 to column 11)",
                                                      " (in 'string', line 62, column 4 to column 14)",
                                                      " (in 'string', line 64, column 4 to column 23)",
                                                      " (in 'string', line 65, column 15 to column 17)",
                                                      " (in 'string', line 65, column 4 to column 24)",
                                                      " (in 'string', line 66, column 15 to column 17)",
                                                      " (in 'string', line 66, column 4 to column 21)",
                                                      " (in 'string', line 67, column 11 to column 13)",
                                                      " (in 'string', line 67, column 15 to column 17)",
                                                      " (in 'string', line 67, column 4 to column 21)",
                                                      " (in 'string', line 68, column 11 to column 13)",
                                                      " (in 'string', line 68, column 15 to column 17)",
                                                      " (in 'string', line 68, column 4 to column 25)",
                                                      " (in 'string', line 69, column 4 to column 24)",
                                                      " (in 'string', line 71, column 4 to column 30)",
                                                      " (in 'string', line 77, column 10 to column 36)",
                                                      " (in 'string', line 76, column 13 to line 78, column 9)",
                                                      " (in 'string', line 75, column 10 to column 26)",
                                                      " (in 'string', line 74, column 22 to line 76, column 9)",
                                                      " (in 'string', line 74, column 8 to line 78, column 9)",
                                                      " (in 'string', line 73, column 22 to line 79, column 7)",
                                                      " (in 'string', line 73, column 6 to line 79, column 7)",
                                                      " (in 'string', line 72, column 20 to line 80, column 5)",
                                                      " (in 'string', line 72, column 4 to line 80, column 5)",
                                                      " (in 'string', line 81, column 4 to column 28)",
                                                      " (in 'string', line 82, column 4 to column 49)",
                                                      " (in 'string', line 83, column 4 to column 18)",
                                                      " (in 'string', line 63, column 18 to line 84, column 5)",
                                                      " (in 'string', line 63, column 4 to line 84, column 5)",
                                                      " (in 'string', line 58, column 17 to line 85, column 5)",
                                                      " (in 'string', line 58, column 4 to line 85, column 5)",
                                                      " (in 'string', line 55, column 38 to line 86, column 3)",
                                                      " (in 'string', line 55, column 2 to line 118, column 3)",
                                                      " (in 'string', line 19, column 2 to column 8)",
                                                      " (in 'string', line 20, column 8 to column 9)",
                                                      " (in 'string', line 20, column 2 to column 11)",
                                                      " (in 'string', line 21, column 2 to column 9)",
                                                      " (in 'string', line 22, column 2 to column 11)",
                                                      " (in 'string', line 23, column 2 to column 12)",
                                                      " (in 'string', line 24, column 10 to column 11)",
                                                      " (in 'string', line 24, column 13 to column 18)",
                                                      " (in 'string', line 24, column 2 to column 20)",
                                                      " (in 'string', line 25, column 9 to column 11)",
                                                      " (in 'string', line 25, column 13 to column 17)",
                                                      " (in 'string', line 25, column 2 to column 21)",
                                                      " (in 'string', line 27, column 2 to column 9)",
                                                      " (in 'string', line 28, column 2 to column 13)",
                                                      " (in 'string', line 29, column 2 to column 20)",
                                                      " (in 'string', line 30, column 2 to column 27)",
                                                      " (in 'string', line 31, column 2 to column 15)",
                                                      " (in 'string', line 32, column 2 to column 15)",
                                                      " (in 'string', line 33, column 2 to column 14)",
                                                      " (in 'string', line 34, column 2 to column 16)",
                                                      " (in 'string', line 3, column 4 to column 12)",
                                                      " (in 'string', line 4, column 4 to column 12)",
                                                      " (in 'string', line 5, column 4 to column 12)",
                                                      " (in 'string', line 6, column 4 to column 12)",
                                                      " (in 'string', line 7, column 4 to column 15)",
                                                      " (in 'string', line 8, column 4 to column 14)",
                                                      " (in 'string', line 9, column 4 to column 43)",
                                                      " (in 'string', line 10, column 4 to column 42)",
                                                      " (in 'string', line 11, column 4 to column 39)",
                                                      " (in 'string', line 12, column 4 to column 38)",
                                                      " (in 'string', line 13, column 4 to column 41)",
                                                      " (in 'string', line 14, column 4 to column 28)",
                                                      " (in 'string', line 15, column 4 to column 31)",
                                                      " (in 'string', line 2, column 71 to line 16, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
pert_dist_lpdf(const T0__& theta, const T1__& lb, const T2__& md,
               const T3__& ub, const T4__& gama, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x1;
    x1 = DUMMY_VAR__;
    
    local_scalar_t__ x2;
    x2 = DUMMY_VAR__;
    
    local_scalar_t__ x3;
    x3 = DUMMY_VAR__;
    
    local_scalar_t__ x4;
    x4 = DUMMY_VAR__;
    
    local_scalar_t__ alpha;
    alpha = DUMMY_VAR__;
    
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 113;
    alpha = (1 + ((gama * (md - lb)) / (ub - lb)));
    current_statement__ = 114;
    beta = (1 + ((gama * (ub - md)) / (ub - lb)));
    current_statement__ = 115;
    x1 = ((alpha - 1) * stan::math::log((theta - lb)));
    current_statement__ = 116;
    x2 = ((beta - 1) * stan::math::log((ub - theta)));
    current_statement__ = 117;
    x3 = (((alpha + beta) - 1) * stan::math::log((ub - lb)));
    current_statement__ = 118;
    x4 = lbeta(alpha, beta);
    current_statement__ = 119;
    return (((x1 + x2) - x3) - x4);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct pert_dist_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
operator()(const T0__& theta, const T1__& lb, const T2__& md, const T3__& ub,
           const T4__& gama, std::ostream* pstream__)  const 
{
return pert_dist_lpdf<propto__>(theta, lb, md, ub, gama, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_mH0c final : public model_base_crtp<model_mH0c> {
private:
  int N;
  std::vector<int> n;
  int nc;
  int maxN;
  int maxNc;
  std::vector<std::vector<int>> nij;
  Eigen::Matrix<double, -1, -1> y;
  double q;
  double shift;
  Eigen::Matrix<double, -1, 1> priormu;
  Eigen::Matrix<double, -1, -1> priorSigma;
  double priorlb;
  double priorub;
  double priorg;
  int data_type;
 
public:
  ~model_mH0c() { }
  
  inline std::string model_name() const final { return "model_mH0c"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_mH0c(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_mH0c_namespace::model_mH0c";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 87;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 87;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 88;
      validate_non_negative_index("n", "N", N);
      current_statement__ = 89;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec(N));
      n = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 89;
      assign(n, nil_index_list(), context__.vals_i("n"),
        "assigning variable n");
      current_statement__ = 90;
      context__.validate_dims("data initialization","nc","int",
          context__.to_vec());
      nc = std::numeric_limits<int>::min();
      
      current_statement__ = 90;
      nc = context__.vals_i("nc")[(1 - 1)];
      current_statement__ = 91;
      context__.validate_dims("data initialization","maxN","int",
          context__.to_vec());
      maxN = std::numeric_limits<int>::min();
      
      current_statement__ = 91;
      maxN = context__.vals_i("maxN")[(1 - 1)];
      current_statement__ = 92;
      context__.validate_dims("data initialization","maxNc","int",
          context__.to_vec());
      maxNc = std::numeric_limits<int>::min();
      
      current_statement__ = 92;
      maxNc = context__.vals_i("maxNc")[(1 - 1)];
      current_statement__ = 93;
      validate_non_negative_index("nij", "N", N);
      current_statement__ = 94;
      validate_non_negative_index("nij", "maxNc", maxNc);
      current_statement__ = 95;
      context__.validate_dims("data initialization","nij","int",
          context__.to_vec(N, maxNc));
      nij = std::vector<std::vector<int>>(N, std::vector<int>(maxNc, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> nij_flat__;
        current_statement__ = 95;
        assign(nij_flat__, nil_index_list(), context__.vals_i("nij"),
          "assigning variable nij_flat__");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= maxNc; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 95;
            assign(nij,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              nij_flat__[(pos__ - 1)], "assigning variable nij");
            current_statement__ = 95;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 96;
      validate_non_negative_index("y", "nc", nc);
      current_statement__ = 97;
      validate_non_negative_index("y", "maxN", maxN);
      current_statement__ = 98;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(nc, maxN));
      y = Eigen::Matrix<double, -1, -1>(nc, maxN);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 98;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 98;
        pos__ = 1;
        current_statement__ = 98;
        for (int sym1__ = 1; sym1__ <= maxN; ++sym1__) {
          current_statement__ = 98;
          for (int sym2__ = 1; sym2__ <= nc; ++sym2__) {
            current_statement__ = 98;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 98;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 99;
      context__.validate_dims("data initialization","q","double",
          context__.to_vec());
      q = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 99;
      q = context__.vals_r("q")[(1 - 1)];
      current_statement__ = 100;
      context__.validate_dims("data initialization","shift","double",
          context__.to_vec());
      shift = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 100;
      shift = context__.vals_r("shift")[(1 - 1)];
      current_statement__ = 101;
      context__.validate_dims("data initialization","priormu","double",
          context__.to_vec(2));
      priormu = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(priormu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priormu_flat__;
        current_statement__ = 101;
        assign(priormu_flat__, nil_index_list(), context__.vals_r("priormu"),
          "assigning variable priormu_flat__");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 101;
          assign(priormu, cons_list(index_uni(sym1__), nil_index_list()),
            priormu_flat__[(pos__ - 1)], "assigning variable priormu");
          current_statement__ = 101;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 102;
      context__.validate_dims("data initialization","priorSigma","double",
          context__.to_vec(2, 2));
      priorSigma = Eigen::Matrix<double, -1, -1>(2, 2);
      stan::math::fill(priorSigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorSigma_flat__;
        current_statement__ = 102;
        assign(priorSigma_flat__, nil_index_list(),
          context__.vals_r("priorSigma"),
          "assigning variable priorSigma_flat__");
        current_statement__ = 102;
        pos__ = 1;
        current_statement__ = 102;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 102;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 102;
            assign(priorSigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priorSigma_flat__[(pos__ - 1)], "assigning variable priorSigma");
            current_statement__ = 102;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 102;
      current_statement__ = 102;
      check_cov_matrix(function__, "priorSigma", priorSigma);
      current_statement__ = 103;
      context__.validate_dims("data initialization","priorlb","double",
          context__.to_vec());
      priorlb = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 103;
      priorlb = context__.vals_r("priorlb")[(1 - 1)];
      current_statement__ = 104;
      context__.validate_dims("data initialization","priorub","double",
          context__.to_vec());
      priorub = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 104;
      priorub = context__.vals_r("priorub")[(1 - 1)];
      current_statement__ = 105;
      context__.validate_dims("data initialization","priorg","double",
          context__.to_vec());
      priorg = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 105;
      priorg = context__.vals_r("priorg")[(1 - 1)];
      current_statement__ = 106;
      context__.validate_dims("data initialization","data_type","int",
          context__.to_vec());
      data_type = std::numeric_limits<int>::min();
      
      current_statement__ = 106;
      data_type = context__.vals_i("data_type")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 3;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_mH0c_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> par;
      par = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(par, DUMMY_VAR__);
      
      current_statement__ = 1;
      par = in__.vector(3);
      local_scalar_t__ a;
      a = DUMMY_VAR__;
      
      local_scalar_t__ invsigma2;
      invsigma2 = DUMMY_VAR__;
      
      local_scalar_t__ rho_cluster;
      rho_cluster = DUMMY_VAR__;
      
      current_statement__ = 5;
      rho_cluster = par[(3 - 1)];
      current_statement__ = 11;
      if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
          logical_eq(data_type, 3)))) {
        current_statement__ = 9;
        a = par[(1 - 1)];
      } else {
        current_statement__ = 8;
        if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
            logical_eq(data_type, 4)))) {
          current_statement__ = 6;
          a = (stan::math::log(par[(1 - 1)]) - shift);
        } 
      }
      current_statement__ = 12;
      invsigma2 = stan::math::exp(par[(2 - 1)]);
      {
        current_statement__ = 13;
        lp_accum__.add(
          pert_dist_lpdf<propto__>(par[(1 - 1)], priorlb, priormu[(1 - 1)],
            priorub, priorg, pstream__));
        current_statement__ = 14;
        lp_accum__.add(
          normal_lpdf<propto__>(par[(2 - 1)], priormu[(2 - 1)],
            rvalue(priorSigma,
              cons_list(index_uni(2),
                cons_list(index_uni(2), nil_index_list())), "priorSigma")));
        current_statement__ = 15;
        lp_accum__.add(
          pert_dist_lpdf<propto__>(par[(3 - 1)], 0, 0.5, 1,
            0.0001, pstream__));
        current_statement__ = 86;
        if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
            logical_eq(data_type, 3)))) {
          int cnt;
          cnt = std::numeric_limits<int>::min();
          
          current_statement__ = 53;
          cnt = 1;
          current_statement__ = 84;
          for (int i = 1; i <= N; ++i) {
            int nl;
            nl = std::numeric_limits<int>::min();
            
            current_statement__ = 55;
            nl = n[(i - 1)];
            current_statement__ = 82;
            for (int j = 1; j <= nl; ++j) {
              int lt;
              lt = std::numeric_limits<int>::min();
              
              current_statement__ = 56;
              lt = nij[(i - 1)][(j - 1)];
              current_statement__ = 57;
              validate_non_negative_index("resp", "lt", lt);
              Eigen::Matrix<local_scalar_t__, 1, -1> resp;
              resp = Eigen::Matrix<local_scalar_t__, 1, -1>(lt);
              stan::math::fill(resp, DUMMY_VAR__);
              
              current_statement__ = 59;
              validate_non_negative_index("m", "lt", lt);
              Eigen::Matrix<local_scalar_t__, 1, -1> m;
              m = Eigen::Matrix<local_scalar_t__, 1, -1>(lt);
              stan::math::fill(m, DUMMY_VAR__);
              
              current_statement__ = 61;
              validate_non_negative_index("P", "lt", lt);
              current_statement__ = 62;
              validate_non_negative_index("P", "lt", lt);
              Eigen::Matrix<local_scalar_t__, -1, -1> P;
              P = Eigen::Matrix<local_scalar_t__, -1, -1>(lt, lt);
              stan::math::fill(P, DUMMY_VAR__);
              
              current_statement__ = 64;
              validate_non_negative_index("Sigma", "lt", lt);
              current_statement__ = 65;
              validate_non_negative_index("Sigma", "lt", lt);
              Eigen::Matrix<local_scalar_t__, -1, -1> Sigma;
              Sigma = Eigen::Matrix<local_scalar_t__, -1, -1>(lt, lt);
              stan::math::fill(Sigma, DUMMY_VAR__);
              
              current_statement__ = 67;
              assign(resp, nil_index_list(),
                rvalue(y,
                  cons_list(index_uni(cnt),
                    cons_list(index_min_max(1, lt), nil_index_list())), "y"),
                "assigning variable resp");
              current_statement__ = 68;
              assign(m, nil_index_list(), rep_row_vector(a, lt),
                "assigning variable m");
              current_statement__ = 77;
              for (int id1 = 1; id1 <= lt; ++id1) {
                current_statement__ = 75;
                for (int id2 = 1; id2 <= lt; ++id2) {
                  current_statement__ = 73;
                  if (logical_eq(id1, id2)) {
                    current_statement__ = 71;
                    assign(P,
                      cons_list(index_uni(id1),
                        cons_list(index_uni(id2), nil_index_list())), 1,
                      "assigning variable P");
                  } else {
                    current_statement__ = 69;
                    assign(P,
                      cons_list(index_uni(id1),
                        cons_list(index_uni(id2), nil_index_list())),
                      rho_cluster, "assigning variable P");
                  }}}
              current_statement__ = 78;
              assign(Sigma, nil_index_list(), multiply((1 / invsigma2), P),
                "assigning variable Sigma");
              current_statement__ = 79;
              lp_accum__.add(multi_normal_lpdf<false>(resp, m, Sigma));
              current_statement__ = 80;
              cnt = (cnt + 1);}}
        } else {
          current_statement__ = 51;
          if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
              logical_eq(data_type, 4)))) {
            int cnt;
            cnt = std::numeric_limits<int>::min();
            
            current_statement__ = 17;
            cnt = 1;
            current_statement__ = 49;
            for (int i = 1; i <= N; ++i) {
              int nl;
              nl = std::numeric_limits<int>::min();
              
              current_statement__ = 19;
              nl = n[(i - 1)];
              current_statement__ = 47;
              for (int j = 1; j <= nl; ++j) {
                int lt;
                lt = std::numeric_limits<int>::min();
                
                current_statement__ = 20;
                lt = nij[(i - 1)][(j - 1)];
                current_statement__ = 21;
                validate_non_negative_index("resp", "lt", lt);
                Eigen::Matrix<local_scalar_t__, 1, -1> resp;
                resp = Eigen::Matrix<local_scalar_t__, 1, -1>(lt);
                stan::math::fill(resp, DUMMY_VAR__);
                
                current_statement__ = 23;
                validate_non_negative_index("m", "lt", lt);
                Eigen::Matrix<local_scalar_t__, 1, -1> m;
                m = Eigen::Matrix<local_scalar_t__, 1, -1>(lt);
                stan::math::fill(m, DUMMY_VAR__);
                
                current_statement__ = 25;
                validate_non_negative_index("P", "lt", lt);
                current_statement__ = 26;
                validate_non_negative_index("P", "lt", lt);
                Eigen::Matrix<local_scalar_t__, -1, -1> P;
                P = Eigen::Matrix<local_scalar_t__, -1, -1>(lt, lt);
                stan::math::fill(P, DUMMY_VAR__);
                
                current_statement__ = 28;
                validate_non_negative_index("Sigma", "lt", lt);
                current_statement__ = 29;
                validate_non_negative_index("Sigma", "lt", lt);
                Eigen::Matrix<local_scalar_t__, -1, -1> Sigma;
                Sigma = Eigen::Matrix<local_scalar_t__, -1, -1>(lt, lt);
                stan::math::fill(Sigma, DUMMY_VAR__);
                
                current_statement__ = 31;
                assign(resp, nil_index_list(),
                  rvalue(y,
                    cons_list(index_uni(cnt),
                      cons_list(index_min_max(1, lt), nil_index_list())),
                    "y"), "assigning variable resp");
                current_statement__ = 32;
                assign(m, nil_index_list(), rep_row_vector(a, lt),
                  "assigning variable m");
                current_statement__ = 41;
                for (int id1 = 1; id1 <= lt; ++id1) {
                  current_statement__ = 39;
                  for (int id2 = 1; id2 <= lt; ++id2) {
                    current_statement__ = 37;
                    if (logical_eq(id1, id2)) {
                      current_statement__ = 35;
                      assign(P,
                        cons_list(index_uni(id1),
                          cons_list(index_uni(id2), nil_index_list())), 1,
                        "assigning variable P");
                    } else {
                      current_statement__ = 33;
                      assign(P,
                        cons_list(index_uni(id1),
                          cons_list(index_uni(id2), nil_index_list())),
                        rho_cluster, "assigning variable P");
                    }}}
                current_statement__ = 42;
                assign(Sigma, nil_index_list(), multiply((1 / invsigma2), P),
                  "assigning variable Sigma");
                current_statement__ = 43;
                lp_accum__.add(multi_normal_lpdf<false>(resp, m, Sigma));
                current_statement__ = 44;
                lp_accum__.add(-sum(resp));
                current_statement__ = 45;
                cnt = (cnt + 1);}}
          } 
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_mH0c_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> par;
      par = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(par, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      par = in__.vector(3);
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      double invsigma2;
      invsigma2 = std::numeric_limits<double>::quiet_NaN();
      
      double rho_cluster;
      rho_cluster = std::numeric_limits<double>::quiet_NaN();
      
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(par[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      rho_cluster = par[(3 - 1)];
      current_statement__ = 11;
      if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
          logical_eq(data_type, 3)))) {
        current_statement__ = 9;
        a = par[(1 - 1)];
      } else {
        current_statement__ = 8;
        if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
            logical_eq(data_type, 4)))) {
          current_statement__ = 6;
          a = (stan::math::log(par[(1 - 1)]) - shift);
        } 
      }
      current_statement__ = 12;
      invsigma2 = stan::math::exp(par[(2 - 1)]);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(a);
        vars__.emplace_back(invsigma2);
        vars__.emplace_back(rho_cluster);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> par;
      par = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(par, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> par_flat__;
        current_statement__ = 1;
        assign(par_flat__, nil_index_list(), context__.vals_r("par"),
          "assigning variable par_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 1;
          assign(par, cons_list(index_uni(sym1__), nil_index_list()),
            par_flat__[(pos__ - 1)], "assigning variable par");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(par[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("par");
    names__.emplace_back("a");
    names__.emplace_back("invsigma2");
    names__.emplace_back("rho_cluster");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "invsigma2");
      param_names__.emplace_back(std::string() + "rho_cluster");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "invsigma2");
      param_names__.emplace_back(std::string() + "rho_cluster");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"par\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"rho_cluster\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"par\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"rho_cluster\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_mH0c_namespace::model_mH0c;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mH0c_namespace::profiles__;
}
#endif
#endif
