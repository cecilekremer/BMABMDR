// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_mL4_Q_COV_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 41, column 2 to column 41)",
                                                      " (in 'string', line 42, column 2 to column 34)",
                                                      " (in 'string', line 43, column 2 to column 23)",
                                                      " (in 'string', line 46, column 2 to column 20)",
                                                      " (in 'string', line 47, column 2 to column 20)",
                                                      " (in 'string', line 48, column 2 to column 20)",
                                                      " (in 'string', line 49, column 2 to column 22)",
                                                      " (in 'string', line 51, column 2 to column 33)",
                                                      " (in 'string', line 54, column 4 to column 23)",
                                                      " (in 'string', line 55, column 4 to column 26)",
                                                      " (in 'string', line 53, column 26 to line 56, column 3)",
                                                      " (in 'string', line 53, column 2 to line 56, column 3)",
                                                      " (in 'string', line 59, column 4 to column 21)",
                                                      " (in 'string', line 58, column 24 to line 60, column 3)",
                                                      " (in 'string', line 58, column 2 to line 60, column 3)",
                                                      " (in 'string', line 63, column 4 to column 26)",
                                                      " (in 'string', line 62, column 24 to line 64, column 3)",
                                                      " (in 'string', line 62, column 2 to line 64, column 3)",
                                                      " (in 'string', line 80, column 6 to column 110)",
                                                      " (in 'string', line 79, column 26 to line 81, column 5)",
                                                      " (in 'string', line 79, column 4 to line 81, column 5)",
                                                      " (in 'string', line 78, column 61 to line 82, column 3)",
                                                      " (in 'string', line 78, column 8 to line 82, column 3)",
                                                      " (in 'string', line 76, column 6 to column 107)",
                                                      " (in 'string', line 75, column 26 to line 77, column 5)",
                                                      " (in 'string', line 75, column 4 to line 77, column 5)",
                                                      " (in 'string', line 74, column 62 to line 78, column 3)",
                                                      " (in 'string', line 74, column 8 to line 82, column 3)",
                                                      " (in 'string', line 72, column 6 to column 108)",
                                                      " (in 'string', line 71, column 26 to line 73, column 5)",
                                                      " (in 'string', line 71, column 4 to line 73, column 5)",
                                                      " (in 'string', line 70, column 63 to line 74, column 3)",
                                                      " (in 'string', line 70, column 8 to line 82, column 3)",
                                                      " (in 'string', line 68, column 6 to column 105)",
                                                      " (in 'string', line 67, column 26 to line 69, column 5)",
                                                      " (in 'string', line 67, column 4 to line 69, column 5)",
                                                      " (in 'string', line 66, column 58 to line 70, column 3)",
                                                      " (in 'string', line 66, column 2 to line 82, column 3)",
                                                      " (in 'string', line 87, column 4 to column 85)",
                                                      " (in 'string', line 86, column 23 to line 88, column 3)",
                                                      " (in 'string', line 86, column 2 to line 88, column 3)",
                                                      " (in 'string', line 92, column 4 to column 86)",
                                                      " (in 'string', line 91, column 25 to line 93, column 3)",
                                                      " (in 'string', line 91, column 2 to line 93, column 3)",
                                                      " (in 'string', line 97, column 56 to column 62)",
                                                      " (in 'string', line 97, column 4 to column 64)",
                                                      " (in 'string', line 96, column 23 to line 98, column 3)",
                                                      " (in 'string', line 96, column 2 to line 98, column 3)",
                                                      " (in 'string', line 142, column 29 to line 144, column 169)",
                                                      " (in 'string', line 142, column 27 to line 145, column 9)",
                                                      " (in 'string', line 142, column 14 to line 145, column 9)",
                                                      " (in 'string', line 139, column 24 to line 141, column 70)",
                                                      " (in 'string', line 139, column 22 to line 142, column 9)",
                                                      " (in 'string', line 139, column 8 to line 145, column 9)",
                                                      " (in 'string', line 138, column 26 to line 146, column 7)",
                                                      " (in 'string', line 138, column 6 to line 146, column 7)",
                                                      " (in 'string', line 137, column 17 to line 147, column 5)",
                                                      " (in 'string', line 137, column 4 to line 147, column 5)",
                                                      " (in 'string', line 136, column 64 to line 148, column 3)",
                                                      " (in 'string', line 136, column 8 to line 148, column 3)",
                                                      " (in 'string', line 130, column 29 to line 132, column 172)",
                                                      " (in 'string', line 130, column 27 to line 133, column 9)",
                                                      " (in 'string', line 130, column 14 to line 133, column 9)",
                                                      " (in 'string', line 127, column 24 to line 129, column 71)",
                                                      " (in 'string', line 127, column 22 to line 130, column 9)",
                                                      " (in 'string', line 127, column 8 to line 133, column 9)",
                                                      " (in 'string', line 126, column 26 to line 134, column 7)",
                                                      " (in 'string', line 126, column 6 to line 134, column 7)",
                                                      " (in 'string', line 125, column 17 to line 135, column 5)",
                                                      " (in 'string', line 125, column 4 to line 135, column 5)",
                                                      " (in 'string', line 124, column 61 to line 136, column 3)",
                                                      " (in 'string', line 124, column 8 to line 148, column 3)",
                                                      " (in 'string', line 118, column 29 to line 120, column 171)",
                                                      " (in 'string', line 118, column 27 to line 121, column 9)",
                                                      " (in 'string', line 118, column 14 to line 121, column 9)",
                                                      " (in 'string', line 115, column 24 to line 117, column 71)",
                                                      " (in 'string', line 115, column 22 to line 118, column 9)",
                                                      " (in 'string', line 115, column 8 to line 121, column 9)",
                                                      " (in 'string', line 114, column 26 to line 122, column 7)",
                                                      " (in 'string', line 114, column 6 to line 122, column 7)",
                                                      " (in 'string', line 113, column 17 to line 123, column 5)",
                                                      " (in 'string', line 113, column 4 to line 123, column 5)",
                                                      " (in 'string', line 112, column 63 to line 124, column 3)",
                                                      " (in 'string', line 112, column 8 to line 148, column 3)",
                                                      " (in 'string', line 106, column 29 to line 108, column 171)",
                                                      " (in 'string', line 106, column 27 to line 109, column 9)",
                                                      " (in 'string', line 106, column 14 to line 109, column 9)",
                                                      " (in 'string', line 103, column 24 to line 105, column 70)",
                                                      " (in 'string', line 103, column 22 to line 106, column 9)",
                                                      " (in 'string', line 103, column 8 to line 109, column 9)",
                                                      " (in 'string', line 102, column 26 to line 110, column 7)",
                                                      " (in 'string', line 102, column 6 to line 110, column 7)",
                                                      " (in 'string', line 101, column 17 to line 111, column 5)",
                                                      " (in 'string', line 101, column 4 to line 111, column 5)",
                                                      " (in 'string', line 100, column 56 to line 112, column 3)",
                                                      " (in 'string', line 100, column 2 to line 148, column 3)",
                                                      " (in 'string', line 21, column 2 to column 8)",
                                                      " (in 'string', line 22, column 2 to column 14)",
                                                      " (in 'string', line 23, column 2 to column 16)",
                                                      " (in 'string', line 24, column 2 to column 18)",
                                                      " (in 'string', line 25, column 2 to column 16)",
                                                      " (in 'string', line 26, column 2 to column 16)",
                                                      " (in 'string', line 27, column 9 to column 10)",
                                                      " (in 'string', line 27, column 2 to column 14)",
                                                      " (in 'string', line 28, column 9 to column 10)",
                                                      " (in 'string', line 28, column 2 to column 14)",
                                                      " (in 'string', line 29, column 9 to column 10)",
                                                      " (in 'string', line 29, column 2 to column 14)",
                                                      " (in 'string', line 30, column 9 to column 10)",
                                                      " (in 'string', line 30, column 12 to column 19)",
                                                      " (in 'string', line 30, column 2 to column 29)",
                                                      " (in 'string', line 31, column 2 to column 9)",
                                                      " (in 'string', line 32, column 12 to column 19)",
                                                      " (in 'string', line 32, column 2 to column 29)",
                                                      " (in 'string', line 33, column 12 to column 19)",
                                                      " (in 'string', line 33, column 2 to column 29)",
                                                      " (in 'string', line 34, column 12 to column 19)",
                                                      " (in 'string', line 34, column 2 to column 29)",
                                                      " (in 'string', line 35, column 12 to column 19)",
                                                      " (in 'string', line 35, column 2 to column 31)",
                                                      " (in 'string', line 36, column 2 to column 11)",
                                                      " (in 'string', line 37, column 2 to column 27)",
                                                      " (in 'string', line 38, column 2 to column 14)",
                                                      " (in 'string', line 41, column 30 to column 39)",
                                                      " (in 'string', line 42, column 21 to column 32)",
                                                      " (in 'string', line 43, column 12 to column 21)",
                                                      " (in 'string', line 46, column 9 to column 18)",
                                                      " (in 'string', line 47, column 9 to column 18)",
                                                      " (in 'string', line 48, column 9 to column 18)",
                                                      " (in 'string', line 49, column 9 to column 20)",
                                                      " (in 'string', line 51, column 20 to column 31)",
                                                      " (in 'string', line 3, column 4 to column 12)",
                                                      " (in 'string', line 4, column 4 to column 12)",
                                                      " (in 'string', line 5, column 4 to column 12)",
                                                      " (in 'string', line 6, column 4 to column 12)",
                                                      " (in 'string', line 7, column 4 to column 15)",
                                                      " (in 'string', line 8, column 4 to column 14)",
                                                      " (in 'string', line 10, column 4 to column 43)",
                                                      " (in 'string', line 11, column 4 to column 42)",
                                                      " (in 'string', line 13, column 4 to column 39)",
                                                      " (in 'string', line 14, column 4 to column 38)",
                                                      " (in 'string', line 15, column 4 to column 41)",
                                                      " (in 'string', line 16, column 4 to column 28)",
                                                      " (in 'string', line 17, column 4 to column 31)",
                                                      " (in 'string', line 2, column 71 to line 18, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
pert_dist_lpdf(const T0__& theta, const T1__& lb, const T2__& md,
               const T3__& ub, const T4__& gama, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x1;
    x1 = DUMMY_VAR__;
    
    local_scalar_t__ x2;
    x2 = DUMMY_VAR__;
    
    local_scalar_t__ x3;
    x3 = DUMMY_VAR__;
    
    local_scalar_t__ x4;
    x4 = DUMMY_VAR__;
    
    local_scalar_t__ alpha;
    alpha = DUMMY_VAR__;
    
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 138;
    alpha = (1 + ((gama * (md - lb)) / (ub - lb)));
    current_statement__ = 139;
    beta = (1 + ((gama * (ub - md)) / (ub - lb)));
    current_statement__ = 140;
    x1 = ((alpha - 1) * stan::math::log((theta - lb)));
    current_statement__ = 141;
    x2 = ((beta - 1) * stan::math::log((ub - theta)));
    current_statement__ = 142;
    x3 = (((alpha + beta) - 1) * stan::math::log((ub - lb)));
    current_statement__ = 143;
    x4 = lbeta(alpha, beta);
    current_statement__ = 144;
    return (((x1 + x2) - x3) - x4);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct pert_dist_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
operator()(const T0__& theta, const T1__& lb, const T2__& md, const T3__& ub,
           const T4__& gama, std::ostream* pstream__)  const 
{
return pert_dist_lpdf<propto__>(theta, lb, md, ub, gama, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_mL4_Q_COV final : public model_base_crtp<model_mL4_Q_COV> {
private:
  int N;
  int nlevels;
  int nlevels_a;
  int nlevels_BMD;
  int nlevels_d;
  int nlevels_b;
  Eigen::Matrix<double, -1, 1> n;
  Eigen::Matrix<double, -1, 1> x;
  Eigen::Matrix<double, -1, 1> y;
  Eigen::Matrix<double, -1, -1> trt_ind;
  double q;
  Eigen::Matrix<double, -1, -1> priormu;
  Eigen::Matrix<double, -1, -1> priorlb;
  Eigen::Matrix<double, -1, -1> priorub;
  Eigen::Matrix<double, -1, -1> priorgama;
  double eps;
  Eigen::Matrix<double, -1, -1> priorSigma;
  double truncd;
 
public:
  ~model_mL4_Q_COV() { }
  
  inline std::string model_name() const final { return "model_mL4_Q_COV"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_mL4_Q_COV(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_mL4_Q_COV_namespace::model_mL4_Q_COV";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 97;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 97;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 98;
      context__.validate_dims("data initialization","nlevels","int",
          context__.to_vec());
      nlevels = std::numeric_limits<int>::min();
      
      current_statement__ = 98;
      nlevels = context__.vals_i("nlevels")[(1 - 1)];
      current_statement__ = 99;
      context__.validate_dims("data initialization","nlevels_a","int",
          context__.to_vec());
      nlevels_a = std::numeric_limits<int>::min();
      
      current_statement__ = 99;
      nlevels_a = context__.vals_i("nlevels_a")[(1 - 1)];
      current_statement__ = 100;
      context__.validate_dims("data initialization","nlevels_BMD","int",
          context__.to_vec());
      nlevels_BMD = std::numeric_limits<int>::min();
      
      current_statement__ = 100;
      nlevels_BMD = context__.vals_i("nlevels_BMD")[(1 - 1)];
      current_statement__ = 101;
      context__.validate_dims("data initialization","nlevels_d","int",
          context__.to_vec());
      nlevels_d = std::numeric_limits<int>::min();
      
      current_statement__ = 101;
      nlevels_d = context__.vals_i("nlevels_d")[(1 - 1)];
      current_statement__ = 102;
      context__.validate_dims("data initialization","nlevels_b","int",
          context__.to_vec());
      nlevels_b = std::numeric_limits<int>::min();
      
      current_statement__ = 102;
      nlevels_b = context__.vals_i("nlevels_b")[(1 - 1)];
      current_statement__ = 103;
      validate_non_negative_index("n", "N", N);
      current_statement__ = 104;
      context__.validate_dims("data initialization","n","double",
          context__.to_vec(N));
      n = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(n, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> n_flat__;
        current_statement__ = 104;
        assign(n_flat__, nil_index_list(), context__.vals_r("n"),
          "assigning variable n_flat__");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 104;
          assign(n, cons_list(index_uni(sym1__), nil_index_list()),
            n_flat__[(pos__ - 1)], "assigning variable n");
          current_statement__ = 104;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 105;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 106;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N));
      x = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 106;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 106;
        pos__ = 1;
        current_statement__ = 106;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 106;
          assign(x, cons_list(index_uni(sym1__), nil_index_list()),
            x_flat__[(pos__ - 1)], "assigning variable x");
          current_statement__ = 106;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 107;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 108;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N));
      y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 108;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 108;
        pos__ = 1;
        current_statement__ = 108;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 108;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 108;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 109;
      validate_non_negative_index("trt_ind", "N", N);
      current_statement__ = 110;
      validate_non_negative_index("trt_ind", "nlevels", nlevels);
      current_statement__ = 111;
      context__.validate_dims("data initialization","trt_ind","double",
          context__.to_vec(N, nlevels));
      trt_ind = Eigen::Matrix<double, -1, -1>(N, nlevels);
      stan::math::fill(trt_ind, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> trt_ind_flat__;
        current_statement__ = 111;
        assign(trt_ind_flat__, nil_index_list(), context__.vals_r("trt_ind"),
          "assigning variable trt_ind_flat__");
        current_statement__ = 111;
        pos__ = 1;
        current_statement__ = 111;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 111;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 111;
            assign(trt_ind,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              trt_ind_flat__[(pos__ - 1)], "assigning variable trt_ind");
            current_statement__ = 111;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 112;
      context__.validate_dims("data initialization","q","double",
          context__.to_vec());
      q = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 112;
      q = context__.vals_r("q")[(1 - 1)];
      current_statement__ = 113;
      validate_non_negative_index("priormu", "nlevels", nlevels);
      current_statement__ = 114;
      context__.validate_dims("data initialization","priormu","double",
          context__.to_vec(4, nlevels));
      priormu = Eigen::Matrix<double, -1, -1>(4, nlevels);
      stan::math::fill(priormu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priormu_flat__;
        current_statement__ = 114;
        assign(priormu_flat__, nil_index_list(), context__.vals_r("priormu"),
          "assigning variable priormu_flat__");
        current_statement__ = 114;
        pos__ = 1;
        current_statement__ = 114;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 114;
          for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
            current_statement__ = 114;
            assign(priormu,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priormu_flat__[(pos__ - 1)], "assigning variable priormu");
            current_statement__ = 114;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 115;
      validate_non_negative_index("priorlb", "nlevels", nlevels);
      current_statement__ = 116;
      context__.validate_dims("data initialization","priorlb","double",
          context__.to_vec(4, nlevels));
      priorlb = Eigen::Matrix<double, -1, -1>(4, nlevels);
      stan::math::fill(priorlb, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorlb_flat__;
        current_statement__ = 116;
        assign(priorlb_flat__, nil_index_list(), context__.vals_r("priorlb"),
          "assigning variable priorlb_flat__");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 116;
          for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
            current_statement__ = 116;
            assign(priorlb,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priorlb_flat__[(pos__ - 1)], "assigning variable priorlb");
            current_statement__ = 116;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 117;
      validate_non_negative_index("priorub", "nlevels", nlevels);
      current_statement__ = 118;
      context__.validate_dims("data initialization","priorub","double",
          context__.to_vec(4, nlevels));
      priorub = Eigen::Matrix<double, -1, -1>(4, nlevels);
      stan::math::fill(priorub, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorub_flat__;
        current_statement__ = 118;
        assign(priorub_flat__, nil_index_list(), context__.vals_r("priorub"),
          "assigning variable priorub_flat__");
        current_statement__ = 118;
        pos__ = 1;
        current_statement__ = 118;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 118;
          for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
            current_statement__ = 118;
            assign(priorub,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priorub_flat__[(pos__ - 1)], "assigning variable priorub");
            current_statement__ = 118;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 119;
      validate_non_negative_index("priorgama", "nlevels", nlevels);
      current_statement__ = 120;
      context__.validate_dims("data initialization","priorgama","double",
          context__.to_vec(2, nlevels));
      priorgama = Eigen::Matrix<double, -1, -1>(2, nlevels);
      stan::math::fill(priorgama, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorgama_flat__;
        current_statement__ = 120;
        assign(priorgama_flat__, nil_index_list(),
          context__.vals_r("priorgama"),
          "assigning variable priorgama_flat__");
        current_statement__ = 120;
        pos__ = 1;
        current_statement__ = 120;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 120;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 120;
            assign(priorgama,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priorgama_flat__[(pos__ - 1)], "assigning variable priorgama");
            current_statement__ = 120;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 121;
      context__.validate_dims("data initialization","eps","double",
          context__.to_vec());
      eps = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 121;
      eps = context__.vals_r("eps")[(1 - 1)];
      current_statement__ = 122;
      context__.validate_dims("data initialization","priorSigma","double",
          context__.to_vec(3, 3));
      priorSigma = Eigen::Matrix<double, -1, -1>(3, 3);
      stan::math::fill(priorSigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorSigma_flat__;
        current_statement__ = 122;
        assign(priorSigma_flat__, nil_index_list(),
          context__.vals_r("priorSigma"),
          "assigning variable priorSigma_flat__");
        current_statement__ = 122;
        pos__ = 1;
        current_statement__ = 122;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 122;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 122;
            assign(priorSigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priorSigma_flat__[(pos__ - 1)], "assigning variable priorSigma");
            current_statement__ = 122;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 122;
      current_statement__ = 122;
      check_cov_matrix(function__, "priorSigma", priorSigma);
      current_statement__ = 123;
      context__.validate_dims("data initialization","truncd","double",
          context__.to_vec());
      truncd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 123;
      truncd = context__.vals_r("truncd")[(1 - 1)];
      current_statement__ = 124;
      validate_non_negative_index("par1", "nlevels_a", nlevels_a);
      current_statement__ = 125;
      validate_non_negative_index("par2", "nlevels_BMD", nlevels_BMD);
      current_statement__ = 126;
      validate_non_negative_index("par3", "nlevels_d", nlevels_d);
      current_statement__ = 127;
      validate_non_negative_index("a", "nlevels_a", nlevels_a);
      current_statement__ = 128;
      validate_non_negative_index("b", "nlevels_b", nlevels_b);
      current_statement__ = 129;
      validate_non_negative_index("d", "nlevels_d", nlevels_d);
      current_statement__ = 130;
      validate_non_negative_index("k", "nlevels_BMD", nlevels_BMD);
      current_statement__ = 131;
      validate_non_negative_index("BMD", "nlevels_BMD", nlevels_BMD);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += nlevels_a;
      num_params_r__ += nlevels_BMD;
      num_params_r__ += nlevels_d;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_mL4_Q_COV_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> par1;
      par1 = std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        current_statement__ = 1;
        assign(par1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par1");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(par1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(par1[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable par1");
        } else {
          current_statement__ = 1;
          assign(par1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(par1[(sym1__ - 1)], 0, 1),
            "assigning variable par1");
        }}
      std::vector<local_scalar_t__> par2;
      par2 = std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 2;
        assign(par2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(par2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(par2[(sym1__ - 1)], 0, lp__),
            "assigning variable par2");
        } else {
          current_statement__ = 2;
          assign(par2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(par2[(sym1__ - 1)], 0),
            "assigning variable par2");
        }}
      std::vector<local_scalar_t__> par3;
      par3 = std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        current_statement__ = 3;
        assign(par3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par3");}
      std::vector<local_scalar_t__> a;
      a = std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> b;
      b = std::vector<local_scalar_t__>(nlevels_b, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> d;
      d = std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> k;
      k = std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> BMD;
      BMD = std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      
      current_statement__ = 12;
      for (int mn = 1; mn <= nlevels_BMD; ++mn) {
        current_statement__ = 9;
        assign(BMD, cons_list(index_uni(mn), nil_index_list()),
          par2[(mn - 1)], "assigning variable BMD");
        current_statement__ = 10;
        assign(k, cons_list(index_uni(mn), nil_index_list()),
          stan::math::log(par2[(mn - 1)]), "assigning variable k");}
      current_statement__ = 15;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 13;
        assign(a, cons_list(index_uni(mn), nil_index_list()), par1[(mn - 1)],
          "assigning variable a");}
      current_statement__ = 18;
      for (int mn = 1; mn <= nlevels_d; ++mn) {
        current_statement__ = 16;
        assign(d, cons_list(index_uni(mn), nil_index_list()),
          stan::math::exp(par3[(mn - 1)]), "assigning variable d");}
      current_statement__ = 38;
      if ((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) &&
          primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(
          logical_eq(nlevels_BMD, 1)))) {
        current_statement__ = 36;
        for (int mn = 1; mn <= nlevels_b; ++mn) {
          current_statement__ = 34;
          assign(b, cons_list(index_uni(mn), nil_index_list()),
            (stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
              (((pow(3, 0.5) / stan::math::pi()) *
                 logit(((q * (1 - a[(1 - 1)])) + a[(1 - 1)]))) -
                ((pow(3, 0.5) / stan::math::pi()) * logit(a[(1 - 1)])))),
            "assigning variable b");}
      } else {
        current_statement__ = 33;
        if ((primitive_value((primitive_value(logical_gt(nlevels_a, 1)) &&
            primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(
            logical_eq(nlevels_BMD, 1)))) {
          current_statement__ = 31;
          for (int mn = 1; mn <= nlevels_b; ++mn) {
            current_statement__ = 29;
            assign(b, cons_list(index_uni(mn), nil_index_list()),
              (stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                (((pow(3, 0.5) / stan::math::pi()) *
                   logit(((q * (1 - a[(mn - 1)])) + a[(mn - 1)]))) -
                  ((pow(3, 0.5) / stan::math::pi()) * logit(a[(mn - 1)])))),
              "assigning variable b");}
        } else {
          current_statement__ = 28;
          if ((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) &&
              primitive_value(logical_gt(nlevels_d, 1)))) && primitive_value(
              logical_gt(nlevels_BMD, 1)))) {
            current_statement__ = 26;
            for (int mn = 1; mn <= nlevels_b; ++mn) {
              current_statement__ = 24;
              assign(b, cons_list(index_uni(mn), nil_index_list()),
                (stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                  (((pow(3, 0.5) / stan::math::pi()) *
                     logit(((q * (1 - a[(1 - 1)])) + a[(1 - 1)]))) -
                    ((pow(3, 0.5) / stan::math::pi()) * logit(a[(1 - 1)])))),
                "assigning variable b");}
          } else {
            current_statement__ = 23;
            if ((primitive_value((primitive_value(logical_gt(nlevels_a, 1))
                && primitive_value(logical_gt(nlevels_d, 1)))) &&
                primitive_value(logical_gt(nlevels_BMD, 1)))) {
              current_statement__ = 21;
              for (int mn = 1; mn <= nlevels_b; ++mn) {
                current_statement__ = 19;
                assign(b, cons_list(index_uni(mn), nil_index_list()),
                  (stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                    (((pow(3, 0.5) / stan::math::pi()) *
                       logit(((q * (1 - a[(mn - 1)])) + a[(mn - 1)]))) -
                      ((pow(3, 0.5) / stan::math::pi()) * logit(a[(mn - 1)])))),
                  "assigning variable b");}
            } 
          }
        }
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 8;
        current_statement__ = 8;
        check_greater_or_equal(function__, "BMD[sym1__]", BMD[(sym1__ - 1)],
                               0);}
      {
        current_statement__ = 41;
        for (int i = 1; i <= nlevels_a; ++i) {
          current_statement__ = 39;
          lp_accum__.add(
            pert_dist_lpdf<propto__>(par1[(i - 1)],
              rvalue(priorlb,
                cons_list(index_uni(1),
                  cons_list(index_uni(i), nil_index_list())), "priorlb"),
              rvalue(priormu,
                cons_list(index_uni(1),
                  cons_list(index_uni(i), nil_index_list())), "priormu"),
              rvalue(priorub,
                cons_list(index_uni(1),
                  cons_list(index_uni(i), nil_index_list())), "priorub"),
              rvalue(priorgama,
                cons_list(index_uni(1),
                  cons_list(index_uni(i), nil_index_list())), "priorgama"), pstream__));
        }
        current_statement__ = 44;
        for (int i = 1; i <= nlevels_BMD; ++i) {
          current_statement__ = 42;
          lp_accum__.add(
            pert_dist_lpdf<propto__>(par2[(i - 1)],
              rvalue(priorlb,
                cons_list(index_uni(2),
                  cons_list(index_uni(i), nil_index_list())), "priorlb"),
              rvalue(priormu,
                cons_list(index_uni(2),
                  cons_list(index_uni(i), nil_index_list())), "priormu"),
              rvalue(priorub,
                cons_list(index_uni(2),
                  cons_list(index_uni(i), nil_index_list())), "priorub"),
              rvalue(priorgama,
                cons_list(index_uni(2),
                  cons_list(index_uni(i), nil_index_list())), "priorgama"), pstream__));
        }
        current_statement__ = 48;
        for (int i = 1; i <= nlevels_d; ++i) {
          current_statement__ = 45;
          if (logical_gt(par3[(i - 1)], truncd)) {
            current_statement__ = 45;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 45;
            lp_accum__.add(
              -normal_cdf_log(truncd,
                 rvalue(priormu,
                   cons_list(index_uni(3),
                     cons_list(index_uni(i), nil_index_list())), "priormu"),
                 rvalue(priorSigma,
                   cons_list(index_uni(3),
                     cons_list(index_uni(3), nil_index_list())),
                   "priorSigma")));
          }
          current_statement__ = 46;
          lp_accum__.add(
            normal_lpdf<propto__>(par3[(i - 1)],
              rvalue(priormu,
                cons_list(index_uni(3),
                  cons_list(index_uni(i), nil_index_list())), "priormu"),
              rvalue(priorSigma,
                cons_list(index_uni(3),
                  cons_list(index_uni(3), nil_index_list())), "priorSigma")));
        }
        current_statement__ = 96;
        if ((primitive_value((primitive_value(logical_gt(nlevels_d, 1)) &&
            primitive_value(logical_gt(nlevels_BMD, 1)))) && primitive_value(
            logical_eq(nlevels_a, 1)))) {
          current_statement__ = 94;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 92;
            for (int mn = 1; mn <= nlevels; ++mn) {
              current_statement__ = 90;
              if (logical_eq(x[(i - 1)], 0)) {
                current_statement__ = 88;
                lp_accum__.add(
                  (((binomial_coefficient_log(n[(i - 1)], y[(i - 1)]) +
                      (y[(i - 1)] * stan::math::log((a[(1 - 1)] + eps)))) +
                     ((n[(i - 1)] - y[(i - 1)]) *
                       stan::math::log(((1 - a[(1 - 1)]) + eps)))) *
                    rvalue(trt_ind,
                      cons_list(index_uni(i),
                        cons_list(index_uni(mn), nil_index_list())),
                      "trt_ind")));
              } else {
                current_statement__ = 87;
                if (logical_gt(x[(i - 1)], 0)) {
                  current_statement__ = 85;
                  lp_accum__.add(
                    (((binomial_coefficient_log(n[(i - 1)], y[(i - 1)]) +
                        (y[(i - 1)] *
                          stan::math::log(
                            (inv_logit(
                               ((stan::math::pi() / pow(3, 0.5)) *
                                 (((pow(3, 0.5) / stan::math::pi()) *
                                    logit(a[(1 - 1)])) +
                                   (b[(mn - 1)] *
                                     pow(x[(i - 1)], d[(mn - 1)]))))) + eps))))
                       +
                       ((n[(i - 1)] - y[(i - 1)]) *
                         stan::math::log(
                           ((1 -
                              inv_logit(
                                ((stan::math::pi() / pow(3, 0.5)) *
                                  (((pow(3, 0.5) / stan::math::pi()) *
                                     logit(a[(1 - 1)])) +
                                    (b[(mn - 1)] *
                                      pow(x[(i - 1)], d[(mn - 1)])))))) +
                             eps)))) *
                      rvalue(trt_ind,
                        cons_list(index_uni(i),
                          cons_list(index_uni(mn), nil_index_list())),
                        "trt_ind")));
                } 
              }}}
        } else {
          current_statement__ = 84;
          if ((primitive_value((primitive_value(logical_gt(nlevels_a, 1)) &&
              primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(
              logical_eq(nlevels_BMD, 1)))) {
            current_statement__ = 82;
            for (int i = 1; i <= N; ++i) {
              current_statement__ = 80;
              for (int mn = 1; mn <= nlevels; ++mn) {
                current_statement__ = 78;
                if (logical_eq(x[(i - 1)], 0)) {
                  current_statement__ = 76;
                  lp_accum__.add(
                    (((binomial_coefficient_log(n[(i - 1)], y[(i - 1)]) +
                        (y[(i - 1)] * stan::math::log((a[(mn - 1)] + eps))))
                       +
                       ((n[(i - 1)] - y[(i - 1)]) *
                         stan::math::log(((1 - a[(mn - 1)]) + eps)))) *
                      rvalue(trt_ind,
                        cons_list(index_uni(i),
                          cons_list(index_uni(mn), nil_index_list())),
                        "trt_ind")));
                } else {
                  current_statement__ = 75;
                  if (logical_gt(x[(i - 1)], 0)) {
                    current_statement__ = 73;
                    lp_accum__.add(
                      (((binomial_coefficient_log(n[(i - 1)], y[(i - 1)]) +
                          (y[(i - 1)] *
                            stan::math::log(
                              (inv_logit(
                                 ((stan::math::pi() / pow(3, 0.5)) *
                                   (((pow(3, 0.5) / stan::math::pi()) *
                                      logit(a[(mn - 1)])) +
                                     (b[(mn - 1)] *
                                       pow(x[(i - 1)], d[(1 - 1)]))))) + eps))))
                         +
                         ((n[(i - 1)] - y[(i - 1)]) *
                           stan::math::log(
                             ((1 -
                                inv_logit(
                                  ((stan::math::pi() / pow(3, 0.5)) *
                                    (((pow(3, 0.5) / stan::math::pi()) *
                                       logit(a[(mn - 1)])) +
                                      (b[(mn - 1)] *
                                        pow(x[(i - 1)], d[(1 - 1)])))))) +
                               eps)))) *
                        rvalue(trt_ind,
                          cons_list(index_uni(i),
                            cons_list(index_uni(mn), nil_index_list())),
                          "trt_ind")));
                  } 
                }}}
          } else {
            current_statement__ = 72;
            if ((primitive_value((primitive_value(logical_gt(nlevels_a, 1))
                && primitive_value(logical_gt(nlevels_d, 1)))) &&
                primitive_value(logical_gt(nlevels_BMD, 1)))) {
              current_statement__ = 70;
              for (int i = 1; i <= N; ++i) {
                current_statement__ = 68;
                for (int mn = 1; mn <= nlevels; ++mn) {
                  current_statement__ = 66;
                  if (logical_eq(x[(i - 1)], 0)) {
                    current_statement__ = 64;
                    lp_accum__.add(
                      (((binomial_coefficient_log(n[(i - 1)], y[(i - 1)]) +
                          (y[(i - 1)] * stan::math::log((a[(mn - 1)] + eps))))
                         +
                         ((n[(i - 1)] - y[(i - 1)]) *
                           stan::math::log(((1 - a[(mn - 1)]) + eps)))) *
                        rvalue(trt_ind,
                          cons_list(index_uni(i),
                            cons_list(index_uni(mn), nil_index_list())),
                          "trt_ind")));
                  } else {
                    current_statement__ = 63;
                    if (logical_gt(x[(i - 1)], 0)) {
                      current_statement__ = 61;
                      lp_accum__.add(
                        (((binomial_coefficient_log(n[(i - 1)], y[(i - 1)]) +
                            (y[(i - 1)] *
                              stan::math::log(
                                (inv_logit(
                                   ((stan::math::pi() / pow(3, 0.5)) *
                                     (((pow(3, 0.5) / stan::math::pi()) *
                                        logit(a[(mn - 1)])) +
                                       (b[(mn - 1)] *
                                         pow(x[(i - 1)], d[(mn - 1)]))))) +
                                  eps)))) +
                           ((n[(i - 1)] - y[(i - 1)]) *
                             stan::math::log(
                               ((1 -
                                  inv_logit(
                                    ((stan::math::pi() / pow(3, 0.5)) *
                                      (((pow(3, 0.5) / stan::math::pi()) *
                                         logit(a[(mn - 1)])) +
                                        (b[(mn - 1)] *
                                          pow(x[(i - 1)], d[(mn - 1)])))))) +
                                 eps)))) *
                          rvalue(trt_ind,
                            cons_list(index_uni(i),
                              cons_list(index_uni(mn), nil_index_list())),
                            "trt_ind")));
                    } 
                  }}}
            } else {
              current_statement__ = 60;
              if ((primitive_value((primitive_value(logical_eq(nlevels_a, 1))
                  && primitive_value(logical_eq(nlevels_d, 1)))) &&
                  primitive_value(logical_eq(nlevels_BMD, 1)))) {
                current_statement__ = 58;
                for (int i = 1; i <= N; ++i) {
                  current_statement__ = 56;
                  for (int mn = 1; mn <= nlevels; ++mn) {
                    current_statement__ = 54;
                    if (logical_eq(x[(i - 1)], 0)) {
                      current_statement__ = 52;
                      lp_accum__.add(
                        (((binomial_coefficient_log(n[(i - 1)], y[(i - 1)]) +
                            (y[(i - 1)] *
                              stan::math::log((a[(1 - 1)] + eps)))) +
                           ((n[(i - 1)] - y[(i - 1)]) *
                             stan::math::log(((1 - a[(1 - 1)]) + eps)))) *
                          rvalue(trt_ind,
                            cons_list(index_uni(i),
                              cons_list(index_uni(mn), nil_index_list())),
                            "trt_ind")));
                    } else {
                      current_statement__ = 51;
                      if (logical_gt(x[(i - 1)], 0)) {
                        current_statement__ = 49;
                        lp_accum__.add(
                          (((binomial_coefficient_log(n[(i - 1)], y[(i - 1)])
                              +
                              (y[(i - 1)] *
                                stan::math::log(
                                  (inv_logit(
                                     ((stan::math::pi() / pow(3, 0.5)) *
                                       (((pow(3, 0.5) / stan::math::pi()) *
                                          logit(a[(1 - 1)])) +
                                         (b[(1 - 1)] *
                                           pow(x[(i - 1)], d[(1 - 1)]))))) +
                                    eps)))) +
                             ((n[(i - 1)] - y[(i - 1)]) *
                               stan::math::log(
                                 ((1 -
                                    inv_logit(
                                      ((stan::math::pi() / pow(3, 0.5)) *
                                        (((pow(3, 0.5) / stan::math::pi()) *
                                           logit(a[(1 - 1)])) +
                                          (b[(1 - 1)] *
                                            pow(x[(i - 1)], d[(1 - 1)]))))))
                                   + eps)))) *
                            rvalue(trt_ind,
                              cons_list(index_uni(i),
                                cons_list(index_uni(mn), nil_index_list())),
                              "trt_ind")));
                      } 
                    }}}
              } 
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_mL4_Q_COV_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> par1;
      par1 = std::vector<double>(nlevels_a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        current_statement__ = 1;
        assign(par1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par1");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        current_statement__ = 1;
        assign(par1, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(par1[(sym1__ - 1)], 0, 1),
          "assigning variable par1");}
      std::vector<double> par2;
      par2 = std::vector<double>(nlevels_BMD, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 2;
        assign(par2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 2;
        assign(par2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(par2[(sym1__ - 1)], 0),
          "assigning variable par2");}
      std::vector<double> par3;
      par3 = std::vector<double>(nlevels_d, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        current_statement__ = 3;
        assign(par3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par3");}
      std::vector<double> a;
      a = std::vector<double>(nlevels_a, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> b;
      b = std::vector<double>(nlevels_b, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> d;
      d = std::vector<double>(nlevels_d, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> k;
      k = std::vector<double>(nlevels_BMD, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> BMD;
      BMD = std::vector<double>(nlevels_BMD, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        vars__.emplace_back(par1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        vars__.emplace_back(par2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        vars__.emplace_back(par3[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 12;
      for (int mn = 1; mn <= nlevels_BMD; ++mn) {
        current_statement__ = 9;
        assign(BMD, cons_list(index_uni(mn), nil_index_list()),
          par2[(mn - 1)], "assigning variable BMD");
        current_statement__ = 10;
        assign(k, cons_list(index_uni(mn), nil_index_list()),
          stan::math::log(par2[(mn - 1)]), "assigning variable k");}
      current_statement__ = 15;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 13;
        assign(a, cons_list(index_uni(mn), nil_index_list()), par1[(mn - 1)],
          "assigning variable a");}
      current_statement__ = 18;
      for (int mn = 1; mn <= nlevels_d; ++mn) {
        current_statement__ = 16;
        assign(d, cons_list(index_uni(mn), nil_index_list()),
          stan::math::exp(par3[(mn - 1)]), "assigning variable d");}
      current_statement__ = 38;
      if ((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) &&
          primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(
          logical_eq(nlevels_BMD, 1)))) {
        current_statement__ = 36;
        for (int mn = 1; mn <= nlevels_b; ++mn) {
          current_statement__ = 34;
          assign(b, cons_list(index_uni(mn), nil_index_list()),
            (stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
              (((pow(3, 0.5) / stan::math::pi()) *
                 logit(((q * (1 - a[(1 - 1)])) + a[(1 - 1)]))) -
                ((pow(3, 0.5) / stan::math::pi()) * logit(a[(1 - 1)])))),
            "assigning variable b");}
      } else {
        current_statement__ = 33;
        if ((primitive_value((primitive_value(logical_gt(nlevels_a, 1)) &&
            primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(
            logical_eq(nlevels_BMD, 1)))) {
          current_statement__ = 31;
          for (int mn = 1; mn <= nlevels_b; ++mn) {
            current_statement__ = 29;
            assign(b, cons_list(index_uni(mn), nil_index_list()),
              (stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                (((pow(3, 0.5) / stan::math::pi()) *
                   logit(((q * (1 - a[(mn - 1)])) + a[(mn - 1)]))) -
                  ((pow(3, 0.5) / stan::math::pi()) * logit(a[(mn - 1)])))),
              "assigning variable b");}
        } else {
          current_statement__ = 28;
          if ((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) &&
              primitive_value(logical_gt(nlevels_d, 1)))) && primitive_value(
              logical_gt(nlevels_BMD, 1)))) {
            current_statement__ = 26;
            for (int mn = 1; mn <= nlevels_b; ++mn) {
              current_statement__ = 24;
              assign(b, cons_list(index_uni(mn), nil_index_list()),
                (stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                  (((pow(3, 0.5) / stan::math::pi()) *
                     logit(((q * (1 - a[(1 - 1)])) + a[(1 - 1)]))) -
                    ((pow(3, 0.5) / stan::math::pi()) * logit(a[(1 - 1)])))),
                "assigning variable b");}
          } else {
            current_statement__ = 23;
            if ((primitive_value((primitive_value(logical_gt(nlevels_a, 1))
                && primitive_value(logical_gt(nlevels_d, 1)))) &&
                primitive_value(logical_gt(nlevels_BMD, 1)))) {
              current_statement__ = 21;
              for (int mn = 1; mn <= nlevels_b; ++mn) {
                current_statement__ = 19;
                assign(b, cons_list(index_uni(mn), nil_index_list()),
                  (stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                    (((pow(3, 0.5) / stan::math::pi()) *
                       logit(((q * (1 - a[(mn - 1)])) + a[(mn - 1)]))) -
                      ((pow(3, 0.5) / stan::math::pi()) * logit(a[(mn - 1)])))),
                  "assigning variable b");}
            } 
          }
        }
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 8;
        current_statement__ = 8;
        check_greater_or_equal(function__, "BMD[sym1__]", BMD[(sym1__ - 1)],
                               0);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
          vars__.emplace_back(a[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nlevels_b; ++sym1__) {
          vars__.emplace_back(b[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
          vars__.emplace_back(d[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
          vars__.emplace_back(k[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
          vars__.emplace_back(BMD[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> par1;
      par1 = std::vector<double>(nlevels_a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(par1, nil_index_list(), context__.vals_r("par1"),
        "assigning variable par1");
      std::vector<double> par1_free__;
      par1_free__ = std::vector<double>(nlevels_a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        current_statement__ = 1;
        assign(par1_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(par1[(sym1__ - 1)], 0, 1),
          "assigning variable par1_free__");}
      std::vector<double> par2;
      par2 = std::vector<double>(nlevels_BMD, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(par2, nil_index_list(), context__.vals_r("par2"),
        "assigning variable par2");
      std::vector<double> par2_free__;
      par2_free__ = std::vector<double>(nlevels_BMD, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 2;
        assign(par2_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(par2[(sym1__ - 1)], 0),
          "assigning variable par2_free__");}
      std::vector<double> par3;
      par3 = std::vector<double>(nlevels_d, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(par3, nil_index_list(), context__.vals_r("par3"),
        "assigning variable par3");
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        vars__.emplace_back(par1_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        vars__.emplace_back(par2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        vars__.emplace_back(par3[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("par1");
    names__.emplace_back("par2");
    names__.emplace_back("par3");
    names__.emplace_back("a");
    names__.emplace_back("b");
    names__.emplace_back("d");
    names__.emplace_back("k");
    names__.emplace_back("BMD");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_a)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_BMD)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_d)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_a)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_b)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_d)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_BMD)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_BMD)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par3" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_b; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "d" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "BMD" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par3" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_b; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "d" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "BMD" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"par1\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_BMD << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_d << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_b << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_d << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_BMD << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"BMD\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_BMD << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"par1\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_BMD << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_d << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_b << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_d << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_BMD << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"BMD\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_BMD << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_mL4_Q_COV_namespace::model_mL4_Q_COV;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mL4_Q_COV_namespace::profiles__;
}
#endif
#endif
