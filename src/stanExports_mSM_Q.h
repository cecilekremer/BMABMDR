// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mSM_Q_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 85> locations_array__ =
  {" (found before start of program)",
  " (in 'mSM_Q', line 34, column 2 to column 20)",
  " (in 'mSM_Q', line 35, column 2 to column 41)",
  " (in 'mSM_Q', line 38, column 2 to column 18)",
  " (in 'mSM_Q', line 39, column 2 to column 15)",
  " (in 'mSM_Q', line 40, column 2 to column 15)",
  " (in 'mSM_Q', line 42, column 2 to column 16)",
  " (in 'mSM_Q', line 44, column 4 to column 27)",
  " (in 'mSM_Q', line 46, column 6 to column 20)",
  " (in 'mSM_Q', line 45, column 17 to line 47, column 5)",
  " (in 'mSM_Q', line 45, column 4 to line 47, column 5)",
  " (in 'mSM_Q', line 49, column 6 to column 20)",
  " (in 'mSM_Q', line 48, column 17 to line 50, column 5)",
  " (in 'mSM_Q', line 48, column 4 to line 50, column 5)",
  " (in 'mSM_Q', line 43, column 19 to line 51, column 3)",
  " (in 'mSM_Q', line 43, column 2 to line 51, column 3)",
  " (in 'mSM_Q', line 67, column 6 to column 20)",
  " (in 'mSM_Q', line 68, column 6 to column 20)",
  " (in 'mSM_Q', line 66, column 17 to line 69, column 5)",
  " (in 'mSM_Q', line 66, column 4 to line 69, column 5)",
  " (in 'mSM_Q', line 65, column 8 to line 70, column 3)",
  " (in 'mSM_Q', line 57, column 6 to column 16)",
  " (in 'mSM_Q', line 60, column 10 to column 53)",
  " (in 'mSM_Q', line 61, column 10 to column 61)",
  " (in 'mSM_Q', line 62, column 10 to column 20)",
  " (in 'mSM_Q', line 59, column 31 to line 63, column 9)",
  " (in 'mSM_Q', line 59, column 8 to line 63, column 9)",
  " (in 'mSM_Q', line 58, column 23 to line 64, column 7)",
  " (in 'mSM_Q', line 58, column 6 to line 64, column 7)",
  " (in 'mSM_Q', line 52, column 18 to line 65, column 3)",
  " (in 'mSM_Q', line 52, column 2 to line 70, column 3)",
  " (in 'mSM_Q', line 73, column 2 to column 65)",
  " (in 'mSM_Q', line 79, column 6 to column 48)",
  " (in 'mSM_Q', line 78, column 9 to line 81, column 5)",
  " (in 'mSM_Q', line 76, column 6 to column 38)",
  " (in 'mSM_Q', line 75, column 27 to line 78, column 5)",
  " (in 'mSM_Q', line 75, column 4 to line 81, column 5)",
  " (in 'mSM_Q', line 74, column 19 to line 82, column 3)",
  " (in 'mSM_Q', line 74, column 2 to line 82, column 3)",
  " (in 'mSM_Q', line 89, column 4 to column 59)",
  " (in 'mSM_Q', line 94, column 6 to column 66)",
  " (in 'mSM_Q', line 90, column 18 to line 95, column 5)",
  " (in 'mSM_Q', line 90, column 4 to line 95, column 5)",
  " (in 'mSM_Q', line 88, column 29 to line 96, column 3)",
  " (in 'mSM_Q', line 88, column 9 to line 96, column 3)",
  " (in 'mSM_Q', line 86, column 6 to column 49)",
  " (in 'mSM_Q', line 84, column 18 to line 87, column 5)",
  " (in 'mSM_Q', line 84, column 4 to line 87, column 5)",
  " (in 'mSM_Q', line 83, column 18 to line 88, column 3)",
  " (in 'mSM_Q', line 83, column 2 to line 96, column 3)",
  " (in 'mSM_Q', line 19, column 2 to column 8)",
  " (in 'mSM_Q', line 20, column 2 to column 12)",
  " (in 'mSM_Q', line 21, column 15 to column 20)",
  " (in 'mSM_Q', line 21, column 2 to column 22)",
  " (in 'mSM_Q', line 22, column 8 to column 9)",
  " (in 'mSM_Q', line 22, column 2 to column 11)",
  " (in 'mSM_Q', line 23, column 8 to column 9)",
  " (in 'mSM_Q', line 23, column 2 to column 11)",
  " (in 'mSM_Q', line 24, column 2 to column 18)",
  " (in 'mSM_Q', line 25, column 2 to column 15)",
  " (in 'mSM_Q', line 26, column 2 to column 18)",
  " (in 'mSM_Q', line 27, column 2 to column 17)",
  " (in 'mSM_Q', line 28, column 2 to column 11)",
  " (in 'mSM_Q', line 29, column 2 to column 31)",
  " (in 'mSM_Q', line 30, column 2 to column 35)",
  " (in 'mSM_Q', line 31, column 2 to column 39)",
  " (in 'mSM_Q', line 34, column 9 to column 14)",
  " (in 'mSM_Q', line 35, column 29 to column 39)",
  " (in 'mSM_Q', line 38, column 9 to column 14)",
  " (in 'mSM_Q', line 39, column 12 to column 13)",
  " (in 'mSM_Q', line 40, column 12 to column 13)",
  " (in 'mSM_Q', line 3, column 4 to column 12)",
  " (in 'mSM_Q', line 4, column 4 to column 12)",
  " (in 'mSM_Q', line 5, column 4 to column 12)",
  " (in 'mSM_Q', line 6, column 4 to column 12)",
  " (in 'mSM_Q', line 7, column 4 to column 15)",
  " (in 'mSM_Q', line 8, column 4 to column 14)",
  " (in 'mSM_Q', line 9, column 4 to column 43)",
  " (in 'mSM_Q', line 10, column 4 to column 42)",
  " (in 'mSM_Q', line 11, column 4 to column 39)",
  " (in 'mSM_Q', line 12, column 4 to column 38)",
  " (in 'mSM_Q', line 13, column 4 to column 41)",
  " (in 'mSM_Q', line 14, column 4 to column 28)",
  " (in 'mSM_Q', line 15, column 4 to column 31)",
  " (in 'mSM_Q', line 2, column 71 to line 16, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& lb, const T2__& md, const T3__&
               ub, const T4__& gama, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& lb, const T2__& md, const T3__&
               ub, const T4__& gama, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ x1 = DUMMY_VAR__;
    local_scalar_t__ x2 = DUMMY_VAR__;
    local_scalar_t__ x3 = DUMMY_VAR__;
    local_scalar_t__ x4 = DUMMY_VAR__;
    local_scalar_t__ alpha = DUMMY_VAR__;
    local_scalar_t__ beta = DUMMY_VAR__;
    current_statement__ = 77;
    alpha = (1 + ((gama * (md - lb)) / (ub - lb)));
    current_statement__ = 78;
    beta = (1 + ((gama * (ub - md)) / (ub - lb)));
    current_statement__ = 79;
    x1 = ((alpha - 1) * stan::math::log((theta - lb)));
    current_statement__ = 80;
    x2 = ((beta - 1) * stan::math::log((ub - theta)));
    current_statement__ = 81;
    x3 = (((alpha + beta) - 1) * stan::math::log((ub - lb)));
    current_statement__ = 82;
    x4 = stan::math::lbeta(alpha, beta);
    current_statement__ = 83;
    return (((x1 + x2) - x3) - x4);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_mSM_Q final : public model_base_crtp<model_mSM_Q> {
private:
  int N;
  int Ndose;
  std::vector<int> n_litter;
  std::vector<int> n;
  std::vector<int> y;
  std::vector<double> priormu;
  double priorlb;
  std::vector<double> priorub;
  double priorgama;
  double eps;
  int is_bin;
  int is_betabin;
  int force_monotone;
public:
  ~model_mSM_Q() {}
  model_mSM_Q(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mSM_Q_namespace::model_mSM_Q";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 50;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 50;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 51;
      context__.validate_dims("data initialization", "Ndose", "int",
        std::vector<size_t>{});
      Ndose = std::numeric_limits<int>::min();
      current_statement__ = 51;
      Ndose = context__.vals_i("Ndose")[(1 - 1)];
      current_statement__ = 52;
      stan::math::validate_non_negative_index("n_litter", "Ndose", Ndose);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "n_litter", "int",
        std::vector<size_t>{static_cast<size_t>(Ndose)});
      n_litter = std::vector<int>(Ndose, std::numeric_limits<int>::min());
      current_statement__ = 53;
      n_litter = context__.vals_i("n_litter");
      current_statement__ = 54;
      stan::math::validate_non_negative_index("n", "N", N);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      n = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 55;
      n = context__.vals_i("n");
      current_statement__ = 56;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 57;
      y = context__.vals_i("y");
      current_statement__ = 58;
      context__.validate_dims("data initialization", "priormu", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      priormu = std::vector<double>(2,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 58;
      priormu = context__.vals_r("priormu");
      current_statement__ = 59;
      context__.validate_dims("data initialization", "priorlb", "double",
        std::vector<size_t>{});
      priorlb = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 59;
      priorlb = context__.vals_r("priorlb")[(1 - 1)];
      current_statement__ = 60;
      context__.validate_dims("data initialization", "priorub", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      priorub = std::vector<double>(2,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 60;
      priorub = context__.vals_r("priorub");
      current_statement__ = 61;
      context__.validate_dims("data initialization", "priorgama", "double",
        std::vector<size_t>{});
      priorgama = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 61;
      priorgama = context__.vals_r("priorgama")[(1 - 1)];
      current_statement__ = 62;
      context__.validate_dims("data initialization", "eps", "double",
        std::vector<size_t>{});
      eps = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 62;
      eps = context__.vals_r("eps")[(1 - 1)];
      current_statement__ = 63;
      context__.validate_dims("data initialization", "is_bin", "int",
        std::vector<size_t>{});
      is_bin = std::numeric_limits<int>::min();
      current_statement__ = 63;
      is_bin = context__.vals_i("is_bin")[(1 - 1)];
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "is_bin", is_bin, 0);
      current_statement__ = 63;
      stan::math::check_less_or_equal(function__, "is_bin", is_bin, 1);
      current_statement__ = 64;
      context__.validate_dims("data initialization", "is_betabin", "int",
        std::vector<size_t>{});
      is_betabin = std::numeric_limits<int>::min();
      current_statement__ = 64;
      is_betabin = context__.vals_i("is_betabin")[(1 - 1)];
      current_statement__ = 64;
      stan::math::check_greater_or_equal(function__, "is_betabin",
        is_betabin, 0);
      current_statement__ = 64;
      stan::math::check_less_or_equal(function__, "is_betabin", is_betabin, 1);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "force_monotone", "int",
        std::vector<size_t>{});
      force_monotone = std::numeric_limits<int>::min();
      current_statement__ = 65;
      force_monotone = context__.vals_i("force_monotone")[(1 - 1)];
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "force_monotone",
        force_monotone, 0);
      current_statement__ = 65;
      stan::math::check_less_or_equal(function__, "force_monotone",
        force_monotone, 1);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("par", "Ndose", Ndose);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("rho", "is_betabin", is_betabin);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("a", "Ndose", Ndose);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("abet", "N", N);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("bbet", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = Ndose + is_betabin;
  }
  inline std::string model_name() const final {
    return "model_mSM_Q";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mSM_Q_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> par =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Ndose, DUMMY_VAR__);
      current_statement__ = 1;
      par = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(Ndose);
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(is_betabin, DUMMY_VAR__);
      current_statement__ = 2;
      rho = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(0, 1, lp__, is_betabin);
      Eigen::Matrix<local_scalar_t__,-1,1> a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Ndose, DUMMY_VAR__);
      std::vector<local_scalar_t__> abet =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> bbet =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(a,
        stan::model::rvalue(par, "par", stan::model::index_uni(1)),
        "assigning variable a", stan::model::index_uni(1));
      current_statement__ = 15;
      for (int k = 2; k <= Ndose; ++k) {
        current_statement__ = 7;
        stan::model::assign(a,
          (stan::model::rvalue(a, "a", stan::model::index_uni((k - 1))) +
          stan::model::rvalue(par, "par", stan::model::index_uni(k))),
          "assigning variable a", stan::model::index_uni(k));
        current_statement__ = 10;
        if (stan::math::logical_lte(
              stan::model::rvalue(a, "a", stan::model::index_uni(k)), 0)) {
          current_statement__ = 8;
          stan::model::assign(a, 0.0001, "assigning variable a",
            stan::model::index_uni(k));
        }
        current_statement__ = 13;
        if (stan::math::logical_gte(
              stan::model::rvalue(a, "a", stan::model::index_uni(k)), 1)) {
          current_statement__ = 11;
          stan::model::assign(a, 0.9999, "assigning variable a",
            stan::model::index_uni(k));
        }
      }
      current_statement__ = 30;
      if (stan::math::logical_eq(is_bin, 0)) {
        int j = std::numeric_limits<int>::min();
        current_statement__ = 21;
        j = 1;
        current_statement__ = 28;
        for (int i = 1; i <= Ndose; ++i) {
          current_statement__ = 26;
          for (int k = 1; k <=
               stan::model::rvalue(n_litter, "n_litter",
                 stan::model::index_uni(i)); ++k) {
            current_statement__ = 22;
            stan::model::assign(abet,
              (stan::model::rvalue(a, "a", stan::model::index_uni(i)) * ((1 /
              stan::model::rvalue(rho, "rho",
                stan::model::index_uni(is_betabin))) - 1.0)),
              "assigning variable abet", stan::model::index_uni(j));
            current_statement__ = 23;
            stan::model::assign(bbet, ((1.0 -
              stan::model::rvalue(a, "a", stan::model::index_uni(i))) * ((1.0
              /
              stan::model::rvalue(rho, "rho",
                stan::model::index_uni(is_betabin))) - 1)),
              "assigning variable bbet", stan::model::index_uni(j));
            current_statement__ = 24;
            j = (j + 1);
          }
        }
      } else {
        current_statement__ = 19;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 16;
          stan::model::assign(abet, 0.0, "assigning variable abet",
            stan::model::index_uni(i));
          current_statement__ = 17;
          stan::model::assign(bbet, 0.0, "assigning variable bbet",
            stan::model::index_uni(i));
        }
      }
      {
        current_statement__ = 31;
        lp_accum__.add(pert_dist_lpdf<propto__>(
                         stan::model::rvalue(par, "par",
                           stan::model::index_uni(1)), priorlb,
                         stan::model::rvalue(priormu, "priormu",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(priorub, "priorub",
                           stan::model::index_uni(1)), priorgama, pstream__));
        current_statement__ = 38;
        for (int k = 2; k <= Ndose; ++k) {
          current_statement__ = 36;
          if (stan::math::logical_eq(force_monotone, 1)) {
            current_statement__ = 34;
            lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                             stan::model::rvalue(par, "par",
                               stan::model::index_uni(k)), 0,
                             stan::model::rvalue(priorub, "priorub",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 32;
            lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                             stan::model::rvalue(par, "par",
                               stan::model::index_uni(k)),
                             -stan::model::rvalue(priorub, "priorub",
                                stan::model::index_uni(2)),
                             stan::model::rvalue(priorub, "priorub",
                               stan::model::index_uni(2))));
          }
        }
        current_statement__ = 49;
        if (stan::math::logical_eq(is_bin, 1)) {
          current_statement__ = 47;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 45;
            lp_accum__.add(stan::math::binomial_lpmf<false>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(n, "n",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(a, "a",
                               stan::model::index_uni(i))));
          }
        } else {
          current_statement__ = 44;
          if (stan::math::logical_eq(is_betabin, 1)) {
            current_statement__ = 39;
            lp_accum__.add(pert_dist_lpdf<propto__>(
                             stan::model::rvalue(rho, "rho",
                               stan::model::index_uni(is_betabin)), 0.0,
                             stan::model::rvalue(priormu, "priormu",
                               stan::model::index_uni(2)), 1.0, 4.0,
                             pstream__));
            current_statement__ = 42;
            for (int i = 1; i <= N; ++i) {
              current_statement__ = 40;
              lp_accum__.add(stan::math::beta_binomial_lpmf<false>(
                               stan::model::rvalue(y, "y",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(n, "n",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(abet, "abet",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(bbet, "bbet",
                                 stan::model::index_uni(i))));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mSM_Q_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> par =
        Eigen::Matrix<double,-1,1>::Constant(Ndose,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      par = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(Ndose);
      std::vector<double> rho =
        std::vector<double>(is_betabin,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      rho = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(0, 1, lp__, is_betabin);
      Eigen::Matrix<double,-1,1> a =
        Eigen::Matrix<double,-1,1>::Constant(Ndose,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> abet =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> bbet =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      out__.write(par);
      out__.write(rho);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 6;
      stan::model::assign(a,
        stan::model::rvalue(par, "par", stan::model::index_uni(1)),
        "assigning variable a", stan::model::index_uni(1));
      current_statement__ = 15;
      for (int k = 2; k <= Ndose; ++k) {
        current_statement__ = 7;
        stan::model::assign(a,
          (stan::model::rvalue(a, "a", stan::model::index_uni((k - 1))) +
          stan::model::rvalue(par, "par", stan::model::index_uni(k))),
          "assigning variable a", stan::model::index_uni(k));
        current_statement__ = 10;
        if (stan::math::logical_lte(
              stan::model::rvalue(a, "a", stan::model::index_uni(k)), 0)) {
          current_statement__ = 8;
          stan::model::assign(a, 0.0001, "assigning variable a",
            stan::model::index_uni(k));
        }
        current_statement__ = 13;
        if (stan::math::logical_gte(
              stan::model::rvalue(a, "a", stan::model::index_uni(k)), 1)) {
          current_statement__ = 11;
          stan::model::assign(a, 0.9999, "assigning variable a",
            stan::model::index_uni(k));
        }
      }
      current_statement__ = 30;
      if (stan::math::logical_eq(is_bin, 0)) {
        int j = std::numeric_limits<int>::min();
        current_statement__ = 21;
        j = 1;
        current_statement__ = 28;
        for (int i = 1; i <= Ndose; ++i) {
          current_statement__ = 26;
          for (int k = 1; k <=
               stan::model::rvalue(n_litter, "n_litter",
                 stan::model::index_uni(i)); ++k) {
            current_statement__ = 22;
            stan::model::assign(abet,
              (stan::model::rvalue(a, "a", stan::model::index_uni(i)) * ((1 /
              stan::model::rvalue(rho, "rho",
                stan::model::index_uni(is_betabin))) - 1.0)),
              "assigning variable abet", stan::model::index_uni(j));
            current_statement__ = 23;
            stan::model::assign(bbet, ((1.0 -
              stan::model::rvalue(a, "a", stan::model::index_uni(i))) * ((1.0
              /
              stan::model::rvalue(rho, "rho",
                stan::model::index_uni(is_betabin))) - 1)),
              "assigning variable bbet", stan::model::index_uni(j));
            current_statement__ = 24;
            j = (j + 1);
          }
        }
      } else {
        current_statement__ = 19;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 16;
          stan::model::assign(abet, 0.0, "assigning variable abet",
            stan::model::index_uni(i));
          current_statement__ = 17;
          stan::model::assign(bbet, 0.0, "assigning variable bbet",
            stan::model::index_uni(i));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(a);
        out__.write(abet);
        out__.write(bbet);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> par =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Ndose, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(par,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Ndose),
        "assigning variable par");
      out__.write(par);
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(is_betabin, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(rho,
        in__.read<std::vector<local_scalar_t__>>(is_betabin),
        "assigning variable rho");
      out__.write_free_lub(0, 1, rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "par", "double",
        std::vector<size_t>{static_cast<size_t>(Ndose)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "rho", "double",
        std::vector<size_t>{static_cast<size_t>(is_betabin)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> par =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Ndose, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> par_flat__;
        current_statement__ = 1;
        par_flat__ = context__.vals_r("par");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= Ndose; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(par, par_flat__[(pos__ - 1)],
            "assigning variable par", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(par);
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(is_betabin, DUMMY_VAR__);
      current_statement__ = 2;
      rho = context__.vals_r("rho");
      out__.write_free_lub(0, 1, rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"par", "rho"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"a", "abet", "bbet"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    Ndose)},
                std::vector<size_t>{static_cast<size_t>(is_betabin)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(Ndose)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= Ndose; ++sym1__) {
      param_names__.emplace_back(std::string() + "par" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_betabin; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Ndose; ++sym1__) {
        param_names__.emplace_back(std::string() + "a" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "abet" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "bbet" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= Ndose; ++sym1__) {
      param_names__.emplace_back(std::string() + "par" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_betabin; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Ndose; ++sym1__) {
        param_names__.emplace_back(std::string() + "a" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "abet" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "bbet" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"par\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ndose) + "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_betabin) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ndose) + "},\"block\":\"transformed_parameters\"},{\"name\":\"abet\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"bbet\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"par\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ndose) + "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_betabin) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Ndose) + "},\"block\":\"transformed_parameters\"},{\"name\":\"abet\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"bbet\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (Ndose + is_betabin);
    const size_t num_transformed = emit_transformed_parameters * (((Ndose +
      N) + N));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (Ndose + is_betabin);
    const size_t num_transformed = emit_transformed_parameters * (((Ndose +
      N) + N));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mSM_Q_namespace::model_mSM_Q;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mSM_Q_namespace::profiles__;
}
#endif
#endif
