// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mLN4COV_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 285> locations_array__ =
  {" (found before start of program)",
  " (in 'mLN4COV', line 43, column 2 to column 32)",
  " (in 'mLN4COV', line 44, column 2 to column 34)",
  " (in 'mLN4COV', line 45, column 2 to column 38)",
  " (in 'mLN4COV', line 46, column 2 to column 47)",
  " (in 'mLN4COV', line 47, column 2 to column 23)",
  " (in 'mLN4COV', line 48, column 2 to column 27)",
  " (in 'mLN4COV', line 51, column 2 to column 20)",
  " (in 'mLN4COV', line 52, column 2 to column 20)",
  " (in 'mLN4COV', line 53, column 2 to column 20)",
  " (in 'mLN4COV', line 54, column 2 to column 12)",
  " (in 'mLN4COV', line 55, column 2 to column 20)",
  " (in 'mLN4COV', line 56, column 2 to column 22)",
  " (in 'mLN4COV', line 57, column 2 to column 25)",
  " (in 'mLN4COV', line 58, column 2 to column 32)",
  " (in 'mLN4COV', line 59, column 2 to column 23)",
  " (in 'mLN4COV', line 62, column 4 to column 26)",
  " (in 'mLN4COV', line 61, column 24 to line 63, column 3)",
  " (in 'mLN4COV', line 61, column 2 to line 63, column 3)",
  " (in 'mLN4COV', line 68, column 4 to column 36)",
  " (in 'mLN4COV', line 67, column 25 to line 69, column 3)",
  " (in 'mLN4COV', line 67, column 8 to line 69, column 3)",
  " (in 'mLN4COV', line 66, column 4 to column 25)",
  " (in 'mLN4COV', line 65, column 19 to line 67, column 3)",
  " (in 'mLN4COV', line 65, column 2 to line 69, column 3)",
  " (in 'mLN4COV', line 71, column 4 to column 24)",
  " (in 'mLN4COV', line 75, column 6 to column 36)",
  " (in 'mLN4COV', line 74, column 46 to line 76, column 5)",
  " (in 'mLN4COV', line 74, column 10 to line 76, column 5)",
  " (in 'mLN4COV', line 73, column 6 to column 23)",
  " (in 'mLN4COV', line 72, column 40 to line 74, column 5)",
  " (in 'mLN4COV', line 72, column 4 to line 76, column 5)",
  " (in 'mLN4COV', line 77, column 4 to column 31)",
  " (in 'mLN4COV', line 70, column 24 to line 78, column 3)",
  " (in 'mLN4COV', line 70, column 2 to line 78, column 3)",
  " (in 'mLN4COV', line 81, column 2 to column 30)",
  " (in 'mLN4COV', line 80, column 2 to line 81, column 30)",
  " (in 'mLN4COV', line 84, column 2 to column 24)",
  " (in 'mLN4COV', line 83, column 2 to line 84, column 24)",
  " (in 'mLN4COV', line 90, column 6 to column 60)",
  " (in 'mLN4COV', line 89, column 46 to line 91, column 5)",
  " (in 'mLN4COV', line 89, column 10 to line 91, column 5)",
  " (in 'mLN4COV', line 88, column 6 to column 34)",
  " (in 'mLN4COV', line 87, column 40 to line 89, column 5)",
  " (in 'mLN4COV', line 87, column 4 to line 91, column 5)",
  " (in 'mLN4COV', line 86, column 24 to line 92, column 3)",
  " (in 'mLN4COV', line 86, column 2 to line 92, column 3)",
  " (in 'mLN4COV', line 139, column 8 to column 71)",
  " (in 'mLN4COV', line 138, column 30 to line 140, column 7)",
  " (in 'mLN4COV', line 138, column 12 to line 140, column 7)",
  " (in 'mLN4COV', line 137, column 8 to column 55)",
  " (in 'mLN4COV', line 136, column 30 to line 138, column 7)",
  " (in 'mLN4COV', line 136, column 12 to line 140, column 7)",
  " (in 'mLN4COV', line 135, column 8 to column 71)",
  " (in 'mLN4COV', line 134, column 30 to line 136, column 7)",
  " (in 'mLN4COV', line 134, column 12 to line 140, column 7)",
  " (in 'mLN4COV', line 133, column 8 to column 54)",
  " (in 'mLN4COV', line 132, column 24 to line 134, column 7)",
  " (in 'mLN4COV', line 132, column 6 to line 140, column 7)",
  " (in 'mLN4COV', line 131, column 26 to line 141, column 5)",
  " (in 'mLN4COV', line 131, column 4 to line 141, column 5)",
  " (in 'mLN4COV', line 130, column 63 to line 142, column 3)",
  " (in 'mLN4COV', line 130, column 9 to line 142, column 3)",
  " (in 'mLN4COV', line 127, column 8 to column 69)",
  " (in 'mLN4COV', line 126, column 30 to line 128, column 7)",
  " (in 'mLN4COV', line 126, column 12 to line 128, column 7)",
  " (in 'mLN4COV', line 125, column 8 to column 54)",
  " (in 'mLN4COV', line 124, column 30 to line 126, column 7)",
  " (in 'mLN4COV', line 124, column 12 to line 128, column 7)",
  " (in 'mLN4COV', line 123, column 8 to column 69)",
  " (in 'mLN4COV', line 122, column 30 to line 124, column 7)",
  " (in 'mLN4COV', line 122, column 12 to line 128, column 7)",
  " (in 'mLN4COV', line 121, column 8 to column 53)",
  " (in 'mLN4COV', line 120, column 24 to line 122, column 7)",
  " (in 'mLN4COV', line 120, column 6 to line 128, column 7)",
  " (in 'mLN4COV', line 119, column 26 to line 129, column 5)",
  " (in 'mLN4COV', line 119, column 4 to line 129, column 5)",
  " (in 'mLN4COV', line 118, column 64 to line 130, column 3)",
  " (in 'mLN4COV', line 118, column 9 to line 142, column 3)",
  " (in 'mLN4COV', line 115, column 8 to column 69)",
  " (in 'mLN4COV', line 114, column 30 to line 116, column 7)",
  " (in 'mLN4COV', line 114, column 12 to line 116, column 7)",
  " (in 'mLN4COV', line 113, column 8 to column 53)",
  " (in 'mLN4COV', line 112, column 30 to line 114, column 7)",
  " (in 'mLN4COV', line 112, column 12 to line 116, column 7)",
  " (in 'mLN4COV', line 111, column 8 to column 69)",
  " (in 'mLN4COV', line 110, column 30 to line 112, column 7)",
  " (in 'mLN4COV', line 110, column 12 to line 116, column 7)",
  " (in 'mLN4COV', line 109, column 8 to column 52)",
  " (in 'mLN4COV', line 108, column 24 to line 110, column 7)",
  " (in 'mLN4COV', line 108, column 6 to line 116, column 7)",
  " (in 'mLN4COV', line 107, column 26 to line 117, column 5)",
  " (in 'mLN4COV', line 107, column 4 to line 117, column 5)",
  " (in 'mLN4COV', line 106, column 65 to line 118, column 3)",
  " (in 'mLN4COV', line 106, column 9 to line 142, column 3)",
  " (in 'mLN4COV', line 103, column 8 to column 66)",
  " (in 'mLN4COV', line 102, column 30 to line 104, column 7)",
  " (in 'mLN4COV', line 102, column 12 to line 104, column 7)",
  " (in 'mLN4COV', line 101, column 8 to column 51)",
  " (in 'mLN4COV', line 100, column 30 to line 102, column 7)",
  " (in 'mLN4COV', line 100, column 12 to line 104, column 7)",
  " (in 'mLN4COV', line 99, column 8 to column 66)",
  " (in 'mLN4COV', line 98, column 30 to line 100, column 7)",
  " (in 'mLN4COV', line 98, column 12 to line 104, column 7)",
  " (in 'mLN4COV', line 97, column 8 to column 50)",
  " (in 'mLN4COV', line 96, column 24 to line 98, column 7)",
  " (in 'mLN4COV', line 96, column 6 to line 104, column 7)",
  " (in 'mLN4COV', line 95, column 26 to line 105, column 5)",
  " (in 'mLN4COV', line 95, column 4 to line 105, column 5)",
  " (in 'mLN4COV', line 94, column 59 to line 106, column 3)",
  " (in 'mLN4COV', line 94, column 2 to line 142, column 3)",
  " (in 'mLN4COV', line 147, column 2 to column 76)",
  " (in 'mLN4COV', line 146, column 2 to line 147, column 76)",
  " (in 'mLN4COV', line 150, column 2 to column 76)",
  " (in 'mLN4COV', line 149, column 2 to line 150, column 76)",
  " (in 'mLN4COV', line 153, column 2 to column 49)",
  " (in 'mLN4COV', line 152, column 2 to line 153, column 49)",
  " (in 'mLN4COV', line 156, column 2 to column 59)",
  " (in 'mLN4COV', line 156, column 51 to column 57)",
  " (in 'mLN4COV', line 155, column 2 to line 156, column 59)",
  " (in 'mLN4COV', line 158, column 2 to column 73)",
  " (in 'mLN4COV', line 251, column 23 to line 253, column 68)",
  " (in 'mLN4COV', line 251, column 22 to line 253, column 69)",
  " (in 'mLN4COV', line 251, column 10 to line 253, column 69)",
  " (in 'mLN4COV', line 254, column 23 to line 256, column 50)",
  " (in 'mLN4COV', line 254, column 22 to line 256, column 51)",
  " (in 'mLN4COV', line 254, column 10 to line 256, column 51)",
  " (in 'mLN4COV', line 250, column 28 to line 257, column 9)",
  " (in 'mLN4COV', line 250, column 8 to line 257, column 9)",
  " (in 'mLN4COV', line 249, column 20 to line 258, column 7)",
  " (in 'mLN4COV', line 249, column 6 to line 258, column 7)",
  " (in 'mLN4COV', line 248, column 47 to line 259, column 5)",
  " (in 'mLN4COV', line 248, column 11 to line 259, column 5)",
  " (in 'mLN4COV', line 240, column 24 to line 242, column 56)",
  " (in 'mLN4COV', line 240, column 23 to line 242, column 57)",
  " (in 'mLN4COV', line 240, column 10 to line 242, column 57)",
  " (in 'mLN4COV', line 243, column 23 to line 245, column 38)",
  " (in 'mLN4COV', line 243, column 22 to line 245, column 39)",
  " (in 'mLN4COV', line 243, column 10 to line 245, column 39)",
  " (in 'mLN4COV', line 239, column 28 to line 246, column 9)",
  " (in 'mLN4COV', line 239, column 8 to line 246, column 9)",
  " (in 'mLN4COV', line 238, column 20 to line 247, column 7)",
  " (in 'mLN4COV', line 238, column 6 to line 247, column 7)",
  " (in 'mLN4COV', line 237, column 40 to line 248, column 5)",
  " (in 'mLN4COV', line 237, column 4 to line 259, column 5)",
  " (in 'mLN4COV', line 235, column 9 to line 260, column 3)",
  " (in 'mLN4COV', line 226, column 23 to line 228, column 70)",
  " (in 'mLN4COV', line 226, column 22 to line 228, column 71)",
  " (in 'mLN4COV', line 226, column 10 to line 228, column 71)",
  " (in 'mLN4COV', line 229, column 23 to line 231, column 51)",
  " (in 'mLN4COV', line 229, column 22 to line 231, column 52)",
  " (in 'mLN4COV', line 229, column 10 to line 231, column 52)",
  " (in 'mLN4COV', line 225, column 28 to line 232, column 9)",
  " (in 'mLN4COV', line 225, column 8 to line 232, column 9)",
  " (in 'mLN4COV', line 224, column 20 to line 233, column 7)",
  " (in 'mLN4COV', line 224, column 6 to line 233, column 7)",
  " (in 'mLN4COV', line 223, column 47 to line 234, column 5)",
  " (in 'mLN4COV', line 223, column 11 to line 234, column 5)",
  " (in 'mLN4COV', line 215, column 24 to line 217, column 58)",
  " (in 'mLN4COV', line 215, column 23 to line 217, column 59)",
  " (in 'mLN4COV', line 215, column 10 to line 217, column 59)",
  " (in 'mLN4COV', line 218, column 23 to line 220, column 39)",
  " (in 'mLN4COV', line 218, column 22 to line 220, column 40)",
  " (in 'mLN4COV', line 218, column 10 to line 220, column 40)",
  " (in 'mLN4COV', line 214, column 28 to line 221, column 9)",
  " (in 'mLN4COV', line 214, column 8 to line 221, column 9)",
  " (in 'mLN4COV', line 213, column 20 to line 222, column 7)",
  " (in 'mLN4COV', line 213, column 6 to line 222, column 7)",
  " (in 'mLN4COV', line 212, column 40 to line 223, column 5)",
  " (in 'mLN4COV', line 212, column 4 to line 234, column 5)",
  " (in 'mLN4COV', line 210, column 85 to line 235, column 3)",
  " (in 'mLN4COV', line 210, column 9 to line 260, column 3)",
  " (in 'mLN4COV', line 201, column 23 to line 203, column 70)",
  " (in 'mLN4COV', line 201, column 22 to line 203, column 71)",
  " (in 'mLN4COV', line 201, column 10 to line 203, column 71)",
  " (in 'mLN4COV', line 204, column 23 to line 206, column 51)",
  " (in 'mLN4COV', line 204, column 22 to line 206, column 52)",
  " (in 'mLN4COV', line 204, column 10 to line 206, column 52)",
  " (in 'mLN4COV', line 200, column 28 to line 207, column 9)",
  " (in 'mLN4COV', line 200, column 8 to line 207, column 9)",
  " (in 'mLN4COV', line 199, column 20 to line 208, column 7)",
  " (in 'mLN4COV', line 199, column 6 to line 208, column 7)",
  " (in 'mLN4COV', line 198, column 47 to line 209, column 5)",
  " (in 'mLN4COV', line 198, column 11 to line 209, column 5)",
  " (in 'mLN4COV', line 190, column 24 to line 192, column 58)",
  " (in 'mLN4COV', line 190, column 23 to line 192, column 59)",
  " (in 'mLN4COV', line 190, column 10 to line 192, column 59)",
  " (in 'mLN4COV', line 193, column 23 to line 195, column 39)",
  " (in 'mLN4COV', line 193, column 22 to line 195, column 40)",
  " (in 'mLN4COV', line 193, column 10 to line 195, column 40)",
  " (in 'mLN4COV', line 189, column 28 to line 196, column 9)",
  " (in 'mLN4COV', line 189, column 8 to line 196, column 9)",
  " (in 'mLN4COV', line 188, column 20 to line 197, column 7)",
  " (in 'mLN4COV', line 188, column 6 to line 197, column 7)",
  " (in 'mLN4COV', line 187, column 40 to line 198, column 5)",
  " (in 'mLN4COV', line 187, column 4 to line 209, column 5)",
  " (in 'mLN4COV', line 185, column 86 to line 210, column 3)",
  " (in 'mLN4COV', line 185, column 9 to line 260, column 3)",
  " (in 'mLN4COV', line 176, column 23 to line 178, column 38)",
  " (in 'mLN4COV', line 176, column 22 to line 178, column 39)",
  " (in 'mLN4COV', line 176, column 10 to line 178, column 39)",
  " (in 'mLN4COV', line 179, column 23 to line 181, column 50)",
  " (in 'mLN4COV', line 179, column 22 to line 181, column 51)",
  " (in 'mLN4COV', line 179, column 10 to line 181, column 51)",
  " (in 'mLN4COV', line 175, column 28 to line 182, column 9)",
  " (in 'mLN4COV', line 175, column 8 to line 182, column 9)",
  " (in 'mLN4COV', line 174, column 20 to line 183, column 7)",
  " (in 'mLN4COV', line 174, column 6 to line 183, column 7)",
  " (in 'mLN4COV', line 173, column 46 to line 184, column 5)",
  " (in 'mLN4COV', line 173, column 10 to line 184, column 5)",
  " (in 'mLN4COV', line 164, column 24 to line 167, column 38)",
  " (in 'mLN4COV', line 164, column 23 to line 167, column 39)",
  " (in 'mLN4COV', line 164, column 10 to line 167, column 39)",
  " (in 'mLN4COV', line 168, column 23 to line 170, column 38)",
  " (in 'mLN4COV', line 168, column 22 to line 170, column 39)",
  " (in 'mLN4COV', line 168, column 10 to line 170, column 39)",
  " (in 'mLN4COV', line 163, column 28 to line 171, column 9)",
  " (in 'mLN4COV', line 163, column 8 to line 171, column 9)",
  " (in 'mLN4COV', line 162, column 20 to line 172, column 7)",
  " (in 'mLN4COV', line 162, column 6 to line 172, column 7)",
  " (in 'mLN4COV', line 161, column 40 to line 173, column 5)",
  " (in 'mLN4COV', line 161, column 4 to line 184, column 5)",
  " (in 'mLN4COV', line 159, column 78 to line 185, column 3)",
  " (in 'mLN4COV', line 159, column 2 to line 260, column 3)",
  " (in 'mLN4COV', line 15, column 2 to column 8)",
  " (in 'mLN4COV', line 16, column 2 to column 14)",
  " (in 'mLN4COV', line 17, column 2 to column 16)",
  " (in 'mLN4COV', line 18, column 2 to column 18)",
  " (in 'mLN4COV', line 19, column 2 to column 16)",
  " (in 'mLN4COV', line 20, column 2 to column 20)",
  " (in 'mLN4COV', line 21, column 2 to column 16)",
  " (in 'mLN4COV', line 22, column 9 to column 10)",
  " (in 'mLN4COV', line 22, column 2 to column 14)",
  " (in 'mLN4COV', line 23, column 9 to column 10)",
  " (in 'mLN4COV', line 23, column 2 to column 14)",
  " (in 'mLN4COV', line 24, column 9 to column 10)",
  " (in 'mLN4COV', line 24, column 2 to column 14)",
  " (in 'mLN4COV', line 25, column 9 to column 10)",
  " (in 'mLN4COV', line 25, column 2 to column 15)",
  " (in 'mLN4COV', line 26, column 9 to column 10)",
  " (in 'mLN4COV', line 26, column 12 to column 19)",
  " (in 'mLN4COV', line 26, column 2 to column 29)",
  " (in 'mLN4COV', line 27, column 2 to column 9)",
  " (in 'mLN4COV', line 28, column 2 to column 13)",
  " (in 'mLN4COV', line 29, column 11 to column 18)",
  " (in 'mLN4COV', line 29, column 2 to column 28)",
  " (in 'mLN4COV', line 30, column 11 to column 18)",
  " (in 'mLN4COV', line 30, column 2 to column 28)",
  " (in 'mLN4COV', line 31, column 11 to column 18)",
  " (in 'mLN4COV', line 31, column 2 to column 28)",
  " (in 'mLN4COV', line 32, column 11 to column 18)",
  " (in 'mLN4COV', line 32, column 2 to column 27)",
  " (in 'mLN4COV', line 33, column 11 to column 18)",
  " (in 'mLN4COV', line 33, column 2 to column 27)",
  " (in 'mLN4COV', line 34, column 2 to column 27)",
  " (in 'mLN4COV', line 35, column 2 to column 16)",
  " (in 'mLN4COV', line 36, column 2 to column 38)",
  " (in 'mLN4COV', line 37, column 2 to column 9)",
  " (in 'mLN4COV', line 38, column 2 to column 38)",
  " (in 'mLN4COV', line 39, column 2 to column 9)",
  " (in 'mLN4COV', line 40, column 2 to column 14)",
  " (in 'mLN4COV', line 43, column 21 to column 30)",
  " (in 'mLN4COV', line 44, column 21 to column 32)",
  " (in 'mLN4COV', line 45, column 23 to column 36)",
  " (in 'mLN4COV', line 46, column 32 to column 45)",
  " (in 'mLN4COV', line 47, column 12 to column 21)",
  " (in 'mLN4COV', line 48, column 12 to column 25)",
  " (in 'mLN4COV', line 51, column 9 to column 18)",
  " (in 'mLN4COV', line 52, column 9 to column 18)",
  " (in 'mLN4COV', line 53, column 9 to column 18)",
  " (in 'mLN4COV', line 55, column 9 to column 18)",
  " (in 'mLN4COV', line 56, column 9 to column 20)",
  " (in 'mLN4COV', line 57, column 14 to column 23)",
  " (in 'mLN4COV', line 58, column 17 to column 30)",
  " (in 'mLN4COV', line 59, column 12 to column 21)",
  " (in 'mLN4COV', line 3, column 4 to column 12)",
  " (in 'mLN4COV', line 4, column 4 to column 12)",
  " (in 'mLN4COV', line 5, column 4 to column 12)",
  " (in 'mLN4COV', line 6, column 4 to column 12)",
  " (in 'mLN4COV', line 7, column 4 to column 39)",
  " (in 'mLN4COV', line 8, column 4 to column 38)",
  " (in 'mLN4COV', line 9, column 4 to column 41)",
  " (in 'mLN4COV', line 10, column 4 to column 28)",
  " (in 'mLN4COV', line 11, column 4 to column 31)",
  " (in 'mLN4COV', line 2, column 74 to line 12, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& alpha, const T2__& beta,
               const T3__& lb, const T4__& ub, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& alpha, const T2__& beta,
               const T3__& lb, const T4__& ub, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ x1 = DUMMY_VAR__;
    local_scalar_t__ x2 = DUMMY_VAR__;
    local_scalar_t__ x3 = DUMMY_VAR__;
    local_scalar_t__ x4 = DUMMY_VAR__;
    current_statement__ = 279;
    x1 = ((alpha - 1) * stan::math::log((theta - lb)));
    current_statement__ = 280;
    x2 = ((beta - 1) * stan::math::log((ub - theta)));
    current_statement__ = 281;
    x3 = (((alpha + beta) - 1) * stan::math::log((ub - lb)));
    current_statement__ = 282;
    x4 = stan::math::lbeta(alpha, beta);
    current_statement__ = 283;
    return (((x1 + x2) - x3) - x4);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_mLN4COV final : public model_base_crtp<model_mLN4COV> {
private:
  int N;
  int nlevels;
  int nlevels_a;
  int nlevels_BMD;
  int nlevels_d;
  int nlevels_sigma;
  int nlevels_b;
  Eigen::Matrix<double,-1,1> n_data__;
  Eigen::Matrix<double,-1,1> x_data__;
  Eigen::Matrix<double,-1,1> m_data__;
  Eigen::Matrix<double,-1,1> s2_data__;
  Eigen::Matrix<double,-1,-1> trt_ind_data__;
  double q;
  double shift;
  Eigen::Matrix<double,-1,-1> priormu_data__;
  Eigen::Matrix<double,-1,-1> priorlb_data__;
  Eigen::Matrix<double,-1,-1> priorub_data__;
  Eigen::Matrix<double,-1,-1> shape1_data__;
  Eigen::Matrix<double,-1,-1> shape2_data__;
  Eigen::Matrix<double,-1,-1> priorSigma_data__;
  int data_type;
  int is_increasing;
  double L;
  int is_decreasing;
  double U;
  double truncd;
  Eigen::Map<Eigen::Matrix<double,-1,1>> n{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> m{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> s2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> trt_ind{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priormu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priorlb{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priorub{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> shape1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> shape2{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priorSigma{nullptr, 0, 0};
public:
  ~model_mLN4COV() {}
  model_mLN4COV(stan::io::var_context& context__, unsigned int
                random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mLN4COV_namespace::model_mLN4COV";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 224;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 224;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 225;
      context__.validate_dims("data initialization", "nlevels", "int",
        std::vector<size_t>{});
      nlevels = std::numeric_limits<int>::min();
      current_statement__ = 225;
      nlevels = context__.vals_i("nlevels")[(1 - 1)];
      current_statement__ = 226;
      context__.validate_dims("data initialization", "nlevels_a", "int",
        std::vector<size_t>{});
      nlevels_a = std::numeric_limits<int>::min();
      current_statement__ = 226;
      nlevels_a = context__.vals_i("nlevels_a")[(1 - 1)];
      current_statement__ = 227;
      context__.validate_dims("data initialization", "nlevels_BMD", "int",
        std::vector<size_t>{});
      nlevels_BMD = std::numeric_limits<int>::min();
      current_statement__ = 227;
      nlevels_BMD = context__.vals_i("nlevels_BMD")[(1 - 1)];
      current_statement__ = 228;
      context__.validate_dims("data initialization", "nlevels_d", "int",
        std::vector<size_t>{});
      nlevels_d = std::numeric_limits<int>::min();
      current_statement__ = 228;
      nlevels_d = context__.vals_i("nlevels_d")[(1 - 1)];
      current_statement__ = 229;
      context__.validate_dims("data initialization", "nlevels_sigma", "int",
        std::vector<size_t>{});
      nlevels_sigma = std::numeric_limits<int>::min();
      current_statement__ = 229;
      nlevels_sigma = context__.vals_i("nlevels_sigma")[(1 - 1)];
      current_statement__ = 230;
      context__.validate_dims("data initialization", "nlevels_b", "int",
        std::vector<size_t>{});
      nlevels_b = std::numeric_limits<int>::min();
      current_statement__ = 230;
      nlevels_b = context__.vals_i("nlevels_b")[(1 - 1)];
      current_statement__ = 231;
      stan::math::validate_non_negative_index("n", "N", N);
      current_statement__ = 232;
      context__.validate_dims("data initialization", "n", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      n_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&n) Eigen::Map<Eigen::Matrix<double,-1,1>>(n_data__.data(), N);
      {
        std::vector<local_scalar_t__> n_flat__;
        current_statement__ = 232;
        n_flat__ = context__.vals_r("n");
        current_statement__ = 232;
        pos__ = 1;
        current_statement__ = 232;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 232;
          stan::model::assign(n, n_flat__[(pos__ - 1)],
            "assigning variable n", stan::model::index_uni(sym1__));
          current_statement__ = 232;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 233;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 234;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      x_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,1>>(x_data__.data(), N);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 234;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 234;
        pos__ = 1;
        current_statement__ = 234;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 234;
          stan::model::assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", stan::model::index_uni(sym1__));
          current_statement__ = 234;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 235;
      stan::math::validate_non_negative_index("m", "N", N);
      current_statement__ = 236;
      context__.validate_dims("data initialization", "m", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      m_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&m) Eigen::Map<Eigen::Matrix<double,-1,1>>(m_data__.data(), N);
      {
        std::vector<local_scalar_t__> m_flat__;
        current_statement__ = 236;
        m_flat__ = context__.vals_r("m");
        current_statement__ = 236;
        pos__ = 1;
        current_statement__ = 236;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 236;
          stan::model::assign(m, m_flat__[(pos__ - 1)],
            "assigning variable m", stan::model::index_uni(sym1__));
          current_statement__ = 236;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 237;
      stan::math::validate_non_negative_index("s2", "N", N);
      current_statement__ = 238;
      context__.validate_dims("data initialization", "s2", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      s2_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&s2) Eigen::Map<Eigen::Matrix<double,-1,1>>(s2_data__.data(), N);
      {
        std::vector<local_scalar_t__> s2_flat__;
        current_statement__ = 238;
        s2_flat__ = context__.vals_r("s2");
        current_statement__ = 238;
        pos__ = 1;
        current_statement__ = 238;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 238;
          stan::model::assign(s2, s2_flat__[(pos__ - 1)],
            "assigning variable s2", stan::model::index_uni(sym1__));
          current_statement__ = 238;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 239;
      stan::math::validate_non_negative_index("trt_ind", "N", N);
      current_statement__ = 240;
      stan::math::validate_non_negative_index("trt_ind", "nlevels", nlevels);
      current_statement__ = 241;
      context__.validate_dims("data initialization", "trt_ind", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(nlevels)});
      trt_ind_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, nlevels,
                         std::numeric_limits<double>::quiet_NaN());
      new (&trt_ind)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(trt_ind_data__.data(), N,
        nlevels);
      {
        std::vector<local_scalar_t__> trt_ind_flat__;
        current_statement__ = 241;
        trt_ind_flat__ = context__.vals_r("trt_ind");
        current_statement__ = 241;
        pos__ = 1;
        current_statement__ = 241;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 241;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 241;
            stan::model::assign(trt_ind, trt_ind_flat__[(pos__ - 1)],
              "assigning variable trt_ind", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 241;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 242;
      context__.validate_dims("data initialization", "q", "double",
        std::vector<size_t>{});
      q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 242;
      q = context__.vals_r("q")[(1 - 1)];
      current_statement__ = 243;
      context__.validate_dims("data initialization", "shift", "double",
        std::vector<size_t>{});
      shift = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 243;
      shift = context__.vals_r("shift")[(1 - 1)];
      current_statement__ = 244;
      stan::math::validate_non_negative_index("priormu", "nlevels", nlevels);
      current_statement__ = 245;
      context__.validate_dims("data initialization", "priormu", "double",
        std::vector<size_t>{static_cast<size_t>(5),
          static_cast<size_t>(nlevels)});
      priormu_data__ = Eigen::Matrix<double,-1,-1>::Constant(5, nlevels,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priormu)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priormu_data__.data(), 5,
        nlevels);
      {
        std::vector<local_scalar_t__> priormu_flat__;
        current_statement__ = 245;
        priormu_flat__ = context__.vals_r("priormu");
        current_statement__ = 245;
        pos__ = 1;
        current_statement__ = 245;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 245;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 245;
            stan::model::assign(priormu, priormu_flat__[(pos__ - 1)],
              "assigning variable priormu", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 245;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 246;
      stan::math::validate_non_negative_index("priorlb", "nlevels", nlevels);
      current_statement__ = 247;
      context__.validate_dims("data initialization", "priorlb", "double",
        std::vector<size_t>{static_cast<size_t>(5),
          static_cast<size_t>(nlevels)});
      priorlb_data__ = Eigen::Matrix<double,-1,-1>::Constant(5, nlevels,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priorlb)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priorlb_data__.data(), 5,
        nlevels);
      {
        std::vector<local_scalar_t__> priorlb_flat__;
        current_statement__ = 247;
        priorlb_flat__ = context__.vals_r("priorlb");
        current_statement__ = 247;
        pos__ = 1;
        current_statement__ = 247;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 247;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 247;
            stan::model::assign(priorlb, priorlb_flat__[(pos__ - 1)],
              "assigning variable priorlb", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 247;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 248;
      stan::math::validate_non_negative_index("priorub", "nlevels", nlevels);
      current_statement__ = 249;
      context__.validate_dims("data initialization", "priorub", "double",
        std::vector<size_t>{static_cast<size_t>(5),
          static_cast<size_t>(nlevels)});
      priorub_data__ = Eigen::Matrix<double,-1,-1>::Constant(5, nlevels,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priorub)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priorub_data__.data(), 5,
        nlevels);
      {
        std::vector<local_scalar_t__> priorub_flat__;
        current_statement__ = 249;
        priorub_flat__ = context__.vals_r("priorub");
        current_statement__ = 249;
        pos__ = 1;
        current_statement__ = 249;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 249;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 249;
            stan::model::assign(priorub, priorub_flat__[(pos__ - 1)],
              "assigning variable priorub", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 249;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 250;
      stan::math::validate_non_negative_index("shape1", "nlevels", nlevels);
      current_statement__ = 251;
      context__.validate_dims("data initialization", "shape1", "double",
        std::vector<size_t>{static_cast<size_t>(5),
          static_cast<size_t>(nlevels)});
      shape1_data__ = Eigen::Matrix<double,-1,-1>::Constant(5, nlevels,
                        std::numeric_limits<double>::quiet_NaN());
      new (&shape1)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(shape1_data__.data(), 5,
        nlevels);
      {
        std::vector<local_scalar_t__> shape1_flat__;
        current_statement__ = 251;
        shape1_flat__ = context__.vals_r("shape1");
        current_statement__ = 251;
        pos__ = 1;
        current_statement__ = 251;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 251;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 251;
            stan::model::assign(shape1, shape1_flat__[(pos__ - 1)],
              "assigning variable shape1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 251;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 252;
      stan::math::validate_non_negative_index("shape2", "nlevels", nlevels);
      current_statement__ = 253;
      context__.validate_dims("data initialization", "shape2", "double",
        std::vector<size_t>{static_cast<size_t>(5),
          static_cast<size_t>(nlevels)});
      shape2_data__ = Eigen::Matrix<double,-1,-1>::Constant(5, nlevels,
                        std::numeric_limits<double>::quiet_NaN());
      new (&shape2)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(shape2_data__.data(), 5,
        nlevels);
      {
        std::vector<local_scalar_t__> shape2_flat__;
        current_statement__ = 253;
        shape2_flat__ = context__.vals_r("shape2");
        current_statement__ = 253;
        pos__ = 1;
        current_statement__ = 253;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 253;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 253;
            stan::model::assign(shape2, shape2_flat__[(pos__ - 1)],
              "assigning variable shape2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 253;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 254;
      context__.validate_dims("data initialization", "priorSigma", "double",
        std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(5)});
      priorSigma_data__ = Eigen::Matrix<double,-1,-1>::Constant(5, 5,
                            std::numeric_limits<double>::quiet_NaN());
      new (&priorSigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priorSigma_data__.data(), 5,
        5);
      {
        std::vector<local_scalar_t__> priorSigma_flat__;
        current_statement__ = 254;
        priorSigma_flat__ = context__.vals_r("priorSigma");
        current_statement__ = 254;
        pos__ = 1;
        current_statement__ = 254;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 254;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 254;
            stan::model::assign(priorSigma, priorSigma_flat__[(pos__ - 1)],
              "assigning variable priorSigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 254;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 254;
      stan::math::check_cov_matrix(function__, "priorSigma", priorSigma);
      current_statement__ = 255;
      context__.validate_dims("data initialization", "data_type", "int",
        std::vector<size_t>{});
      data_type = std::numeric_limits<int>::min();
      current_statement__ = 255;
      data_type = context__.vals_i("data_type")[(1 - 1)];
      current_statement__ = 256;
      context__.validate_dims("data initialization", "is_increasing", "int",
        std::vector<size_t>{});
      is_increasing = std::numeric_limits<int>::min();
      current_statement__ = 256;
      is_increasing = context__.vals_i("is_increasing")[(1 - 1)];
      current_statement__ = 256;
      stan::math::check_greater_or_equal(function__, "is_increasing",
        is_increasing, 0);
      current_statement__ = 256;
      stan::math::check_less_or_equal(function__, "is_increasing",
        is_increasing, 1);
      current_statement__ = 257;
      context__.validate_dims("data initialization", "L", "double",
        std::vector<size_t>{});
      L = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 257;
      L = context__.vals_r("L")[(1 - 1)];
      current_statement__ = 258;
      context__.validate_dims("data initialization", "is_decreasing", "int",
        std::vector<size_t>{});
      is_decreasing = std::numeric_limits<int>::min();
      current_statement__ = 258;
      is_decreasing = context__.vals_i("is_decreasing")[(1 - 1)];
      current_statement__ = 258;
      stan::math::check_greater_or_equal(function__, "is_decreasing",
        is_decreasing, 0);
      current_statement__ = 258;
      stan::math::check_less_or_equal(function__, "is_decreasing",
        is_decreasing, 1);
      current_statement__ = 259;
      context__.validate_dims("data initialization", "U", "double",
        std::vector<size_t>{});
      U = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 259;
      U = context__.vals_r("U")[(1 - 1)];
      current_statement__ = 260;
      context__.validate_dims("data initialization", "truncd", "double",
        std::vector<size_t>{});
      truncd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 260;
      truncd = context__.vals_r("truncd")[(1 - 1)];
      current_statement__ = 261;
      stan::math::validate_non_negative_index("par1", "nlevels_a", nlevels_a);
      current_statement__ = 262;
      stan::math::validate_non_negative_index("par2", "nlevels_BMD",
        nlevels_BMD);
      current_statement__ = 263;
      stan::math::validate_non_negative_index("pars3i", "is_increasing",
        is_increasing);
      current_statement__ = 264;
      stan::math::validate_non_negative_index("pars3d", "is_decreasing",
        is_decreasing);
      current_statement__ = 265;
      stan::math::validate_non_negative_index("par4", "nlevels_d", nlevels_d);
      current_statement__ = 266;
      stan::math::validate_non_negative_index("par5", "nlevels_sigma",
        nlevels_sigma);
      current_statement__ = 267;
      stan::math::validate_non_negative_index("b", "nlevels_b", nlevels_b);
      current_statement__ = 268;
      stan::math::validate_non_negative_index("a", "nlevels_a", nlevels_a);
      current_statement__ = 269;
      stan::math::validate_non_negative_index("c", "nlevels_a", nlevels_a);
      current_statement__ = 270;
      stan::math::validate_non_negative_index("d", "nlevels_d", nlevels_d);
      current_statement__ = 271;
      stan::math::validate_non_negative_index("k", "nlevels_BMD", nlevels_BMD);
      current_statement__ = 272;
      stan::math::validate_non_negative_index("mu_inf", "nlevels_a",
        nlevels_a);
      current_statement__ = 273;
      stan::math::validate_non_negative_index("invsigma2", "nlevels_sigma",
        nlevels_sigma);
      current_statement__ = 274;
      stan::math::validate_non_negative_index("mu_0", "nlevels_a", nlevels_a);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = nlevels_a + nlevels_BMD + is_increasing + is_decreasing
      + nlevels_d + nlevels_sigma;
  }
  inline std::string model_name() const final {
    return "model_mLN4COV";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mLN4COV_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> par1 =
        std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      current_statement__ = 1;
      par1 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, nlevels_a);
      std::vector<local_scalar_t__> par2 =
        std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      current_statement__ = 2;
      par2 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, nlevels_BMD);
      std::vector<local_scalar_t__> pars3i =
        std::vector<local_scalar_t__>(is_increasing, DUMMY_VAR__);
      current_statement__ = 3;
      pars3i = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, is_increasing);
      std::vector<local_scalar_t__> pars3d =
        std::vector<local_scalar_t__>(is_decreasing, DUMMY_VAR__);
      current_statement__ = 4;
      pars3d = in__.template read_constrain_lub<
                 std::vector<local_scalar_t__>, jacobian__>(0, 1, lp__,
                 is_decreasing);
      std::vector<local_scalar_t__> par4 =
        std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      current_statement__ = 5;
      par4 = in__.template read<std::vector<local_scalar_t__>>(nlevels_d);
      std::vector<local_scalar_t__> par5 =
        std::vector<local_scalar_t__>(nlevels_sigma, DUMMY_VAR__);
      current_statement__ = 6;
      par5 = in__.template read<std::vector<local_scalar_t__>>(nlevels_sigma);
      std::vector<local_scalar_t__> b =
        std::vector<local_scalar_t__>(nlevels_b, DUMMY_VAR__);
      std::vector<local_scalar_t__> a =
        std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      std::vector<local_scalar_t__> c =
        std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      local_scalar_t__ par3 = DUMMY_VAR__;
      std::vector<local_scalar_t__> d =
        std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      std::vector<local_scalar_t__> k =
        std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      std::vector<local_scalar_t__> mu_inf =
        std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      std::vector<local_scalar_t__> invsigma2 =
        std::vector<local_scalar_t__>(nlevels_sigma, DUMMY_VAR__);
      std::vector<local_scalar_t__> mu_0 =
        std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      current_statement__ = 18;
      for (int mn = 1; mn <= nlevels_d; ++mn) {
        current_statement__ = 16;
        stan::model::assign(d,
          stan::math::exp(
            stan::model::rvalue(par4, "par4", stan::model::index_uni(mn))),
          "assigning variable d", stan::model::index_uni(mn));
      }
      current_statement__ = 24;
      if (is_increasing) {
        current_statement__ = 22;
        par3 = (L +
          stan::model::rvalue(pars3i, "pars3i", stan::model::index_uni(1)));
      } else {
        current_statement__ = 21;
        if (is_decreasing) {
          current_statement__ = 19;
          par3 = (L + ((U - L) *
            stan::model::rvalue(pars3d, "pars3d", stan::model::index_uni(1))));
        }
      }
      current_statement__ = 34;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 25;
        stan::model::assign(mu_0,
          stan::model::rvalue(par1, "par1", stan::model::index_uni(mn)),
          "assigning variable mu_0", stan::model::index_uni(mn));
        current_statement__ = 31;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 3)))) {
          current_statement__ = 29;
          stan::model::assign(a,
            stan::model::rvalue(par1, "par1", stan::model::index_uni(mn)),
            "assigning variable a", stan::model::index_uni(mn));
        } else {
          current_statement__ = 28;
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(data_type, 2))
              ||
              stan::math::primitive_value(
                stan::math::logical_eq(data_type, 4)))) {
            current_statement__ = 26;
            stan::model::assign(a,
              (stan::math::log(
                 stan::model::rvalue(par1, "par1", stan::model::index_uni(mn)))
              - shift), "assigning variable a", stan::model::index_uni(mn));
          }
        }
        current_statement__ = 32;
        stan::model::assign(mu_inf,
          (stan::model::rvalue(par1, "par1", stan::model::index_uni(mn)) *
          par3), "assigning variable mu_inf", stan::model::index_uni(mn));
      }
      current_statement__ = 36;
      for (int mn = 1; mn <= nlevels_sigma; ++mn) {
        current_statement__ = 35;
        stan::model::assign(invsigma2,
          stan::math::exp(
            stan::model::rvalue(par5, "par5", stan::model::index_uni(mn))),
          "assigning variable invsigma2", stan::model::index_uni(mn));
      }
      current_statement__ = 38;
      for (int mn = 1; mn <= nlevels_BMD; ++mn) {
        current_statement__ = 37;
        stan::model::assign(k,
          stan::math::log(
            stan::model::rvalue(par2, "par2", stan::model::index_uni(mn))),
          "assigning variable k", stan::model::index_uni(mn));
      }
      current_statement__ = 46;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 44;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 3)))) {
          current_statement__ = 42;
          stan::model::assign(c,
            (stan::model::rvalue(mu_inf, "mu_inf", stan::model::index_uni(mn))
            / stan::model::rvalue(mu_0, "mu_0", stan::model::index_uni(mn))),
            "assigning variable c", stan::model::index_uni(mn));
        } else {
          current_statement__ = 41;
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(data_type, 2))
              ||
              stan::math::primitive_value(
                stan::math::logical_eq(data_type, 4)))) {
            current_statement__ = 39;
            stan::model::assign(c,
              ((stan::math::log(
                  stan::model::rvalue(mu_inf, "mu_inf",
                    stan::model::index_uni(mn))) - shift) /
              (stan::math::log(
                 stan::model::rvalue(mu_0, "mu_0", stan::model::index_uni(mn)))
              - shift)), "assigning variable c", stan::model::index_uni(mn));
          }
        }
      }
      current_statement__ = 110;
      if ((stan::math::primitive_value(
             (stan::math::primitive_value(
                stan::math::logical_eq(nlevels_a, 1)) &&
             stan::math::primitive_value(stan::math::logical_eq(nlevels_d, 1))))
          &&
          stan::math::primitive_value(stan::math::logical_eq(nlevels_BMD, 1)))) {
        current_statement__ = 108;
        for (int mn = 1; mn <= nlevels_b; ++mn) {
          current_statement__ = 106;
          if (stan::math::logical_eq(data_type, 1)) {
            current_statement__ = 104;
            stan::model::assign(b,
              stan::math::exp(
                (stan::math::inv_Phi((q /
                   (stan::model::rvalue(c, "c", stan::model::index_uni(1)) -
                   1))) -
                (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
              "assigning variable b", stan::model::index_uni(1));
          } else {
            current_statement__ = 103;
            if (stan::math::logical_eq(data_type, 2)) {
              current_statement__ = 101;
              stan::model::assign(b,
                stan::math::exp(
                  (stan::math::inv_Phi((stan::math::log((1 + q)) /
                     (stan::model::rvalue(a, "a", stan::model::index_uni(1))
                     *
                     (stan::model::rvalue(c, "c", stan::model::index_uni(1))
                     - 1)))) -
                  (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                  stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                "assigning variable b", stan::model::index_uni(1));
            } else {
              current_statement__ = 100;
              if (stan::math::logical_eq(data_type, 3)) {
                current_statement__ = 98;
                stan::model::assign(b,
                  stan::math::exp(
                    (stan::math::inv_Phi((-q /
                       (stan::model::rvalue(c, "c", stan::model::index_uni(1))
                       - 1))) -
                    (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                    stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                  "assigning variable b", stan::model::index_uni(1));
              } else {
                current_statement__ = 97;
                if (stan::math::logical_eq(data_type, 4)) {
                  current_statement__ = 95;
                  stan::model::assign(b,
                    stan::math::exp(
                      (stan::math::inv_Phi((stan::math::log((1 - q)) /
                         (stan::model::rvalue(a, "a",
                            stan::model::index_uni(1)) *
                         (stan::model::rvalue(c, "c",
                            stan::model::index_uni(1)) - 1)))) -
                      (stan::model::rvalue(k, "k", stan::model::index_uni(1))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                    "assigning variable b", stan::model::index_uni(1));
                }
              }
            }
          }
        }
      } else {
        current_statement__ = 94;
        if ((stan::math::primitive_value(
               (stan::math::primitive_value(
                  stan::math::logical_gt(nlevels_a, 1)) &&
               stan::math::primitive_value(
                 stan::math::logical_eq(nlevels_d, 1))))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(nlevels_BMD, 1)))) {
          current_statement__ = 92;
          for (int mn = 1; mn <= nlevels_b; ++mn) {
            current_statement__ = 90;
            if (stan::math::logical_eq(data_type, 1)) {
              current_statement__ = 88;
              stan::model::assign(b,
                stan::math::exp(
                  (stan::math::inv_Phi((q /
                     (stan::model::rvalue(c, "c", stan::model::index_uni(mn))
                     - 1))) -
                  (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                  stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                "assigning variable b", stan::model::index_uni(mn));
            } else {
              current_statement__ = 87;
              if (stan::math::logical_eq(data_type, 2)) {
                current_statement__ = 85;
                stan::model::assign(b,
                  stan::math::exp(
                    (stan::math::inv_Phi((stan::math::log((1 + q)) /
                       (stan::model::rvalue(a, "a",
                          stan::model::index_uni(mn)) *
                       (stan::model::rvalue(c, "c",
                          stan::model::index_uni(mn)) - 1)))) -
                    (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                    stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                  "assigning variable b", stan::model::index_uni(mn));
              } else {
                current_statement__ = 84;
                if (stan::math::logical_eq(data_type, 3)) {
                  current_statement__ = 82;
                  stan::model::assign(b,
                    stan::math::exp(
                      (stan::math::inv_Phi((-q /
                         (stan::model::rvalue(c, "c",
                            stan::model::index_uni(mn)) - 1))) -
                      (stan::model::rvalue(k, "k", stan::model::index_uni(1))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                    "assigning variable b", stan::model::index_uni(mn));
                } else {
                  current_statement__ = 81;
                  if (stan::math::logical_eq(data_type, 4)) {
                    current_statement__ = 79;
                    stan::model::assign(b,
                      stan::math::exp(
                        (stan::math::inv_Phi((stan::math::log((1 - q)) /
                           (stan::model::rvalue(a, "a",
                              stan::model::index_uni(mn)) *
                           (stan::model::rvalue(c, "c",
                              stan::model::index_uni(mn)) - 1)))) -
                        (stan::model::rvalue(k, "k",
                           stan::model::index_uni(1)) *
                        stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                      "assigning variable b", stan::model::index_uni(mn));
                  }
                }
              }
            }
          }
        } else {
          current_statement__ = 78;
          if ((stan::math::primitive_value(
                 (stan::math::primitive_value(
                    stan::math::logical_eq(nlevels_a, 1)) &&
                 stan::math::primitive_value(
                   stan::math::logical_gt(nlevels_d, 1))))
              &&
              stan::math::primitive_value(
                stan::math::logical_gt(nlevels_BMD, 1)))) {
            current_statement__ = 76;
            for (int mn = 1; mn <= nlevels_b; ++mn) {
              current_statement__ = 74;
              if (stan::math::logical_eq(data_type, 1)) {
                current_statement__ = 72;
                stan::model::assign(b,
                  stan::math::exp(
                    (stan::math::inv_Phi((q /
                       (stan::model::rvalue(c, "c", stan::model::index_uni(1))
                       - 1))) -
                    (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                    *
                    stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                  "assigning variable b", stan::model::index_uni(mn));
              } else {
                current_statement__ = 71;
                if (stan::math::logical_eq(data_type, 2)) {
                  current_statement__ = 69;
                  stan::model::assign(b,
                    stan::math::exp(
                      (stan::math::inv_Phi((stan::math::log((1 + q)) /
                         (stan::model::rvalue(a, "a",
                            stan::model::index_uni(1)) *
                         (stan::model::rvalue(c, "c",
                            stan::model::index_uni(1)) - 1)))) -
                      (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                    "assigning variable b", stan::model::index_uni(mn));
                } else {
                  current_statement__ = 68;
                  if (stan::math::logical_eq(data_type, 3)) {
                    current_statement__ = 66;
                    stan::model::assign(b,
                      stan::math::exp(
                        (stan::math::inv_Phi((-q /
                           (stan::model::rvalue(c, "c",
                              stan::model::index_uni(1)) - 1))) -
                        (stan::model::rvalue(k, "k",
                           stan::model::index_uni(mn)) *
                        stan::model::rvalue(d, "d",
                          stan::model::index_uni(mn))))),
                      "assigning variable b", stan::model::index_uni(mn));
                  } else {
                    current_statement__ = 65;
                    if (stan::math::logical_eq(data_type, 4)) {
                      current_statement__ = 63;
                      stan::model::assign(b,
                        stan::math::exp(
                          (stan::math::inv_Phi((stan::math::log((1 - q)) /
                             (stan::model::rvalue(a, "a",
                                stan::model::index_uni(1)) *
                             (stan::model::rvalue(c, "c",
                                stan::model::index_uni(1)) - 1)))) -
                          (stan::model::rvalue(k, "k",
                             stan::model::index_uni(mn)) *
                          stan::model::rvalue(d, "d",
                            stan::model::index_uni(mn))))),
                        "assigning variable b", stan::model::index_uni(mn));
                    }
                  }
                }
              }
            }
          } else {
            current_statement__ = 62;
            if ((stan::math::primitive_value(
                   (stan::math::primitive_value(
                      stan::math::logical_gt(nlevels_a, 1)) &&
                   stan::math::primitive_value(
                     stan::math::logical_gt(nlevels_d, 1))))
                &&
                stan::math::primitive_value(
                  stan::math::logical_gt(nlevels_BMD, 1)))) {
              current_statement__ = 60;
              for (int mn = 1; mn <= nlevels_b; ++mn) {
                current_statement__ = 58;
                if (stan::math::logical_eq(data_type, 1)) {
                  current_statement__ = 56;
                  stan::model::assign(b,
                    stan::math::exp(
                      (stan::math::inv_Phi((q /
                         (stan::model::rvalue(c, "c",
                            stan::model::index_uni(mn)) - 1))) -
                      (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                    "assigning variable b", stan::model::index_uni(mn));
                } else {
                  current_statement__ = 55;
                  if (stan::math::logical_eq(data_type, 2)) {
                    current_statement__ = 53;
                    stan::model::assign(b,
                      stan::math::exp(
                        (stan::math::inv_Phi((stan::math::log((1 + q)) /
                           (stan::model::rvalue(a, "a",
                              stan::model::index_uni(mn)) *
                           (stan::model::rvalue(c, "c",
                              stan::model::index_uni(mn)) - 1)))) -
                        (stan::model::rvalue(k, "k",
                           stan::model::index_uni(mn)) *
                        stan::model::rvalue(d, "d",
                          stan::model::index_uni(mn))))),
                      "assigning variable b", stan::model::index_uni(mn));
                  } else {
                    current_statement__ = 52;
                    if (stan::math::logical_eq(data_type, 3)) {
                      current_statement__ = 50;
                      stan::model::assign(b,
                        stan::math::exp(
                          (stan::math::inv_Phi((-q /
                             (stan::model::rvalue(c, "c",
                                stan::model::index_uni(mn)) - 1))) -
                          (stan::model::rvalue(k, "k",
                             stan::model::index_uni(mn)) *
                          stan::model::rvalue(d, "d",
                            stan::model::index_uni(mn))))),
                        "assigning variable b", stan::model::index_uni(mn));
                    } else {
                      current_statement__ = 49;
                      if (stan::math::logical_eq(data_type, 4)) {
                        current_statement__ = 47;
                        stan::model::assign(b,
                          stan::math::exp(
                            (stan::math::inv_Phi((stan::math::log((1 - q)) /
                               (stan::model::rvalue(a, "a",
                                  stan::model::index_uni(mn)) *
                               (stan::model::rvalue(c, "c",
                                  stan::model::index_uni(mn)) - 1)))) -
                            (stan::model::rvalue(k, "k",
                               stan::model::index_uni(mn)) *
                            stan::model::rvalue(d, "d",
                              stan::model::index_uni(mn))))),
                          "assigning variable b", stan::model::index_uni(mn));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      {
        current_statement__ = 112;
        for (int i = 1; i <= nlevels_a; ++i) {
          current_statement__ = 111;
          lp_accum__.add(pert_dist_lpdf<propto__>(
                           stan::model::rvalue(par1, "par1",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(shape1, "shape1",
                             stan::model::index_uni(1),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(shape2, "shape2",
                             stan::model::index_uni(1),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorlb, "priorlb",
                             stan::model::index_uni(1),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorub, "priorub",
                             stan::model::index_uni(1),
                             stan::model::index_uni(i)), pstream__));
        }
        current_statement__ = 114;
        for (int i = 1; i <= nlevels_BMD; ++i) {
          current_statement__ = 113;
          lp_accum__.add(pert_dist_lpdf<propto__>(
                           stan::model::rvalue(par2, "par2",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(shape1, "shape1",
                             stan::model::index_uni(2),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(shape2, "shape2",
                             stan::model::index_uni(2),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorlb, "priorlb",
                             stan::model::index_uni(2),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorub, "priorub",
                             stan::model::index_uni(2),
                             stan::model::index_uni(i)), pstream__));
        }
        current_statement__ = 116;
        for (int i = 1; i <= nlevels_sigma; ++i) {
          current_statement__ = 115;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(par5, "par5",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priormu, "priormu",
                             stan::model::index_uni(5),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorSigma, "priorSigma",
                             stan::model::index_uni(5),
                             stan::model::index_uni(5))));
        }
        current_statement__ = 119;
        for (int i = 1; i <= nlevels_d; ++i) {
          current_statement__ = 117;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(par4, "par4",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priormu, "priormu",
                             stan::model::index_uni(4),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorSigma, "priorSigma",
                             stan::model::index_uni(4),
                             stan::model::index_uni(4))));
          current_statement__ = 118;
          if (stan::math::logical_gt(
                stan::model::rvalue(par4, "par4", stan::model::index_uni(i)),
                truncd)) {
            current_statement__ = 118;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 118;
            lp_accum__.add(-stan::math::normal_lcdf(truncd,
                              stan::model::rvalue(priormu, "priormu",
                                stan::model::index_uni(4),
                                stan::model::index_uni(i)),
                              stan::model::rvalue(priorSigma, "priorSigma",
                                stan::model::index_uni(4),
                                stan::model::index_uni(4))));
          }
        }
        current_statement__ = 120;
        lp_accum__.add(pert_dist_lpdf<propto__>(par3,
                         stan::model::rvalue(shape1, "shape1",
                           stan::model::index_uni(3),
                           stan::model::index_uni(1)),
                         stan::model::rvalue(shape2, "shape2",
                           stan::model::index_uni(3),
                           stan::model::index_uni(1)),
                         stan::model::rvalue(priorlb, "priorlb",
                           stan::model::index_uni(3),
                           stan::model::index_uni(1)),
                         stan::model::rvalue(priorub, "priorub",
                           stan::model::index_uni(3),
                           stan::model::index_uni(1)), pstream__));
        current_statement__ = 223;
        if ((stan::math::primitive_value(
               (stan::math::primitive_value(
                  (stan::math::primitive_value(
                     stan::math::logical_gt(nlevels_d, 1)) &&
                  stan::math::primitive_value(
                    stan::math::logical_gt(nlevels_BMD, 1)))) &&
               stan::math::primitive_value(
                 stan::math::logical_eq(nlevels_a, 1))))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(nlevels_sigma, 1)))) {
          current_statement__ = 221;
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(data_type, 1))
              ||
              stan::math::primitive_value(
                stan::math::logical_eq(data_type, 3)))) {
            current_statement__ = 219;
            for (int i = 1; i <= N; ++i) {
              current_statement__ = 217;
              for (int mn = 1; mn <= nlevels; ++mn) {
                current_statement__ = 212;
                if (stan::math::logical_eq(
                      stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                      0)) {
                  current_statement__ = 210;
                  lp_accum__.add(((((((-0.5 *
                    stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                    stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                    stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                    stan::math::log(
                      stan::model::rvalue(invsigma2, "invsigma2",
                        stan::model::index_uni(1))))) - (((0.5 *
                    (stan::model::rvalue(n, "n", stan::model::index_uni(i)) -
                    1)) *
                    stan::model::rvalue(s2, "s2", stan::model::index_uni(i)))
                    *
                    stan::model::rvalue(invsigma2, "invsigma2",
                      stan::model::index_uni(1)))) - (((0.5 *
                    stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                    stan::math::square(
                      (stan::model::rvalue(m, "m", stan::model::index_uni(i))
                      -
                      stan::model::rvalue(a, "a", stan::model::index_uni(1)))))
                    *
                    stan::model::rvalue(invsigma2, "invsigma2",
                      stan::model::index_uni(1)))) *
                    stan::model::rvalue(trt_ind, "trt_ind",
                      stan::model::index_uni(i), stan::model::index_uni(mn))));
                }
                current_statement__ = 215;
                if (stan::math::logical_gt(
                      stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                      0)) {
                  current_statement__ = 213;
                  lp_accum__.add(((((((-0.5 *
                    stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                    stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                    stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                    stan::math::log(
                      stan::model::rvalue(invsigma2, "invsigma2",
                        stan::model::index_uni(1))))) - (((0.5 *
                    (stan::model::rvalue(n, "n", stan::model::index_uni(i)) -
                    1)) *
                    stan::model::rvalue(s2, "s2", stan::model::index_uni(i)))
                    *
                    stan::model::rvalue(invsigma2, "invsigma2",
                      stan::model::index_uni(1)))) - (((0.5 *
                    stan::model::rvalue(n, "n", stan::model::index_uni(i))) *
                    stan::math::square(
                      ((stan::model::rvalue(m, "m", stan::model::index_uni(i))
                      -
                      stan::model::rvalue(a, "a", stan::model::index_uni(1)))
                      -
                      ((stan::model::rvalue(a, "a", stan::model::index_uni(1))
                      *
                      (stan::model::rvalue(c, "c", stan::model::index_uni(1))
                      - 1)) *
                      stan::math::Phi(
                        (stan::math::log(
                           stan::model::rvalue(b, "b",
                             stan::model::index_uni(mn))) +
                        (stan::model::rvalue(d, "d",
                           stan::model::index_uni(mn)) *
                        stan::math::log(
                          stan::model::rvalue(x, "x",
                            stan::model::index_uni(i)))))))))) *
                    stan::model::rvalue(invsigma2, "invsigma2",
                      stan::model::index_uni(1)))) *
                    stan::model::rvalue(trt_ind, "trt_ind",
                      stan::model::index_uni(i), stan::model::index_uni(mn))));
                }
              }
            }
          } else {
            current_statement__ = 209;
            if ((stan::math::primitive_value(
                   stan::math::logical_eq(data_type, 2))
                ||
                stan::math::primitive_value(
                  stan::math::logical_eq(data_type, 4)))) {
              current_statement__ = 207;
              for (int i = 1; i <= N; ++i) {
                current_statement__ = 205;
                for (int mn = 1; mn <= nlevels; ++mn) {
                  current_statement__ = 200;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                        0)) {
                    current_statement__ = 198;
                    lp_accum__.add(((((((-0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      * stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      *
                      stan::math::log(
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(1))))) - (((0.5 *
                      (stan::model::rvalue(n, "n", stan::model::index_uni(i))
                      - 1)) *
                      stan::model::rvalue(s2, "s2", stan::model::index_uni(i)))
                      *
                      stan::model::rvalue(invsigma2, "invsigma2",
                        stan::model::index_uni(1)))) - (((0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      *
                      stan::math::square(
                        (stan::model::rvalue(m, "m",
                           stan::model::index_uni(i)) -
                        stan::model::rvalue(a, "a", stan::model::index_uni(1)))))
                      *
                      stan::model::rvalue(invsigma2, "invsigma2",
                        stan::model::index_uni(1)))) *
                      stan::model::rvalue(trt_ind, "trt_ind",
                        stan::model::index_uni(i), stan::model::index_uni(mn))));
                  }
                  current_statement__ = 203;
                  if (stan::math::logical_gt(
                        stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                        0)) {
                    current_statement__ = 201;
                    lp_accum__.add((((((((-0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      * stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      *
                      stan::math::log(
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(1))))) - (((0.5 *
                      (stan::model::rvalue(n, "n", stan::model::index_uni(i))
                      - 1)) *
                      stan::model::rvalue(s2, "s2", stan::model::index_uni(i)))
                      *
                      stan::model::rvalue(invsigma2, "invsigma2",
                        stan::model::index_uni(1)))) - (((0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      *
                      stan::math::square(
                        ((stan::model::rvalue(m, "m",
                            stan::model::index_uni(i)) -
                        stan::model::rvalue(a, "a", stan::model::index_uni(1)))
                        -
                        ((stan::model::rvalue(a, "a",
                            stan::model::index_uni(1)) *
                        (stan::model::rvalue(c, "c",
                           stan::model::index_uni(1)) - 1)) *
                        stan::math::Phi(
                          (stan::math::log(
                             stan::model::rvalue(b, "b",
                               stan::model::index_uni(mn))) +
                          (stan::model::rvalue(d, "d",
                             stan::model::index_uni(mn)) *
                          stan::math::log(
                            stan::model::rvalue(x, "x",
                              stan::model::index_uni(i)))))))))) *
                      stan::model::rvalue(invsigma2, "invsigma2",
                        stan::model::index_uni(1)))) -
                      (stan::model::rvalue(m, "m", stan::model::index_uni(i))
                      *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i))))
                      *
                      stan::model::rvalue(trt_ind, "trt_ind",
                        stan::model::index_uni(i), stan::model::index_uni(mn))));
                  }
                }
              }
            }
          }
        } else {
          current_statement__ = 197;
          if ((stan::math::primitive_value(
                 (stan::math::primitive_value(
                    (stan::math::primitive_value(
                       stan::math::logical_gt(nlevels_a, 1)) &&
                    stan::math::primitive_value(
                      stan::math::logical_gt(nlevels_sigma, 1)))) &&
                 stan::math::primitive_value(
                   stan::math::logical_eq(nlevels_BMD, 1))))
              &&
              stan::math::primitive_value(
                stan::math::logical_eq(nlevels_d, 1)))) {
            current_statement__ = 195;
            if ((stan::math::primitive_value(
                   stan::math::logical_eq(data_type, 1))
                ||
                stan::math::primitive_value(
                  stan::math::logical_eq(data_type, 3)))) {
              current_statement__ = 193;
              for (int i = 1; i <= N; ++i) {
                current_statement__ = 191;
                for (int mn = 1; mn <= nlevels; ++mn) {
                  current_statement__ = 186;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                        0)) {
                    current_statement__ = 184;
                    lp_accum__.add(((((((-0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      * stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      *
                      stan::math::log(
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(mn))))) - (((0.5 *
                      (stan::model::rvalue(n, "n", stan::model::index_uni(i))
                      - 1)) *
                      stan::model::rvalue(s2, "s2", stan::model::index_uni(i)))
                      *
                      stan::model::rvalue(invsigma2, "invsigma2",
                        stan::model::index_uni(mn)))) - (((0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      *
                      stan::math::square(
                        (stan::model::rvalue(m, "m",
                           stan::model::index_uni(i)) -
                        stan::model::rvalue(a, "a",
                          stan::model::index_uni(mn))))) *
                      stan::model::rvalue(invsigma2, "invsigma2",
                        stan::model::index_uni(mn)))) *
                      stan::model::rvalue(trt_ind, "trt_ind",
                        stan::model::index_uni(i), stan::model::index_uni(mn))));
                  }
                  current_statement__ = 189;
                  if (stan::math::logical_gt(
                        stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                        0)) {
                    current_statement__ = 187;
                    lp_accum__.add(((((((-0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      * stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      *
                      stan::math::log(
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(mn))))) - (((0.5 *
                      (stan::model::rvalue(n, "n", stan::model::index_uni(i))
                      - 1)) *
                      stan::model::rvalue(s2, "s2", stan::model::index_uni(i)))
                      *
                      stan::model::rvalue(invsigma2, "invsigma2",
                        stan::model::index_uni(mn)))) - (((0.5 *
                      stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                      *
                      stan::math::square(
                        ((stan::model::rvalue(m, "m",
                            stan::model::index_uni(i)) -
                        stan::model::rvalue(a, "a",
                          stan::model::index_uni(mn))) -
                        ((stan::model::rvalue(a, "a",
                            stan::model::index_uni(mn)) *
                        (stan::model::rvalue(c, "c",
                           stan::model::index_uni(mn)) - 1)) *
                        stan::math::Phi(
                          (stan::math::log(
                             stan::model::rvalue(b, "b",
                               stan::model::index_uni(mn))) +
                          (stan::model::rvalue(d, "d",
                             stan::model::index_uni(1)) *
                          stan::math::log(
                            stan::model::rvalue(x, "x",
                              stan::model::index_uni(i)))))))))) *
                      stan::model::rvalue(invsigma2, "invsigma2",
                        stan::model::index_uni(mn)))) *
                      stan::model::rvalue(trt_ind, "trt_ind",
                        stan::model::index_uni(i), stan::model::index_uni(mn))));
                  }
                }
              }
            } else {
              current_statement__ = 183;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(data_type, 2))
                  ||
                  stan::math::primitive_value(
                    stan::math::logical_eq(data_type, 4)))) {
                current_statement__ = 181;
                for (int i = 1; i <= N; ++i) {
                  current_statement__ = 179;
                  for (int mn = 1; mn <= nlevels; ++mn) {
                    current_statement__ = 174;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(x, "x",
                            stan::model::index_uni(i)), 0)) {
                      current_statement__ = 172;
                      lp_accum__.add((((((((-0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        * stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::log(
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(mn))))) - (((0.5 *
                        (stan::model::rvalue(n, "n",
                           stan::model::index_uni(i)) - 1)) *
                        stan::model::rvalue(s2, "s2",
                          stan::model::index_uni(i))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(mn)))) - (((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::square(
                          (stan::model::rvalue(m, "m",
                             stan::model::index_uni(i)) -
                          stan::model::rvalue(a, "a",
                            stan::model::index_uni(mn))))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(mn)))) -
                        (stan::model::rvalue(m, "m",
                           stan::model::index_uni(i)) *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i))))
                        *
                        stan::model::rvalue(trt_ind, "trt_ind",
                          stan::model::index_uni(i),
                          stan::model::index_uni(mn))));
                    }
                    current_statement__ = 177;
                    if (stan::math::logical_gt(
                          stan::model::rvalue(x, "x",
                            stan::model::index_uni(i)), 0)) {
                      current_statement__ = 175;
                      lp_accum__.add((((((((-0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        * stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::log(
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(mn))))) - (((0.5 *
                        (stan::model::rvalue(n, "n",
                           stan::model::index_uni(i)) - 1)) *
                        stan::model::rvalue(s2, "s2",
                          stan::model::index_uni(i))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(mn)))) - (((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::square(
                          ((stan::model::rvalue(m, "m",
                              stan::model::index_uni(i)) -
                          stan::model::rvalue(a, "a",
                            stan::model::index_uni(mn))) -
                          ((stan::model::rvalue(a, "a",
                              stan::model::index_uni(mn)) *
                          (stan::model::rvalue(c, "c",
                             stan::model::index_uni(mn)) - 1)) *
                          stan::math::Phi(
                            (stan::math::log(
                               stan::model::rvalue(b, "b",
                                 stan::model::index_uni(mn))) +
                            (stan::model::rvalue(d, "d",
                               stan::model::index_uni(1)) *
                            stan::math::log(
                              stan::model::rvalue(x, "x",
                                stan::model::index_uni(i)))))))))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(mn)))) -
                        (stan::model::rvalue(m, "m",
                           stan::model::index_uni(i)) *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i))))
                        *
                        stan::model::rvalue(trt_ind, "trt_ind",
                          stan::model::index_uni(i),
                          stan::model::index_uni(mn))));
                    }
                  }
                }
              }
            }
          } else {
            current_statement__ = 171;
            if ((stan::math::primitive_value(
                   (stan::math::primitive_value(
                      (stan::math::primitive_value(
                         stan::math::logical_gt(nlevels_d, 1)) &&
                      stan::math::primitive_value(
                        stan::math::logical_gt(nlevels_BMD, 1)))) &&
                   stan::math::primitive_value(
                     stan::math::logical_gt(nlevels_a, 1))))
                &&
                stan::math::primitive_value(
                  stan::math::logical_gt(nlevels_sigma, 1)))) {
              current_statement__ = 169;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(data_type, 1))
                  ||
                  stan::math::primitive_value(
                    stan::math::logical_eq(data_type, 3)))) {
                current_statement__ = 167;
                for (int i = 1; i <= N; ++i) {
                  current_statement__ = 165;
                  for (int mn = 1; mn <= nlevels; ++mn) {
                    current_statement__ = 160;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(x, "x",
                            stan::model::index_uni(i)), 0)) {
                      current_statement__ = 158;
                      lp_accum__.add(((((((-0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        * stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::log(
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(mn))))) - (((0.5 *
                        (stan::model::rvalue(n, "n",
                           stan::model::index_uni(i)) - 1)) *
                        stan::model::rvalue(s2, "s2",
                          stan::model::index_uni(i))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(mn)))) - (((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::square(
                          (stan::model::rvalue(m, "m",
                             stan::model::index_uni(i)) -
                          stan::model::rvalue(a, "a",
                            stan::model::index_uni(mn))))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(mn)))) *
                        stan::model::rvalue(trt_ind, "trt_ind",
                          stan::model::index_uni(i),
                          stan::model::index_uni(mn))));
                    }
                    current_statement__ = 163;
                    if (stan::math::logical_gt(
                          stan::model::rvalue(x, "x",
                            stan::model::index_uni(i)), 0)) {
                      current_statement__ = 161;
                      lp_accum__.add(((((((-0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        * stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::log(
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(mn))))) - (((0.5 *
                        (stan::model::rvalue(n, "n",
                           stan::model::index_uni(i)) - 1)) *
                        stan::model::rvalue(s2, "s2",
                          stan::model::index_uni(i))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(mn)))) - (((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::square(
                          ((stan::model::rvalue(m, "m",
                              stan::model::index_uni(i)) -
                          stan::model::rvalue(a, "a",
                            stan::model::index_uni(mn))) -
                          ((stan::model::rvalue(a, "a",
                              stan::model::index_uni(mn)) *
                          (stan::model::rvalue(c, "c",
                             stan::model::index_uni(mn)) - 1)) *
                          stan::math::Phi(
                            (stan::math::log(
                               stan::model::rvalue(b, "b",
                                 stan::model::index_uni(mn))) +
                            (stan::model::rvalue(d, "d",
                               stan::model::index_uni(mn)) *
                            stan::math::log(
                              stan::model::rvalue(x, "x",
                                stan::model::index_uni(i)))))))))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(mn)))) *
                        stan::model::rvalue(trt_ind, "trt_ind",
                          stan::model::index_uni(i),
                          stan::model::index_uni(mn))));
                    }
                  }
                }
              } else {
                current_statement__ = 157;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(data_type, 2))
                    ||
                    stan::math::primitive_value(
                      stan::math::logical_eq(data_type, 4)))) {
                  current_statement__ = 155;
                  for (int i = 1; i <= N; ++i) {
                    current_statement__ = 153;
                    for (int mn = 1; mn <= nlevels; ++mn) {
                      current_statement__ = 148;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(x, "x",
                              stan::model::index_uni(i)), 0)) {
                        current_statement__ = 146;
                        lp_accum__.add((((((((-0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::log(
                            stan::model::rvalue(invsigma2, "invsigma2",
                              stan::model::index_uni(mn))))) - (((0.5 *
                          (stan::model::rvalue(n, "n",
                             stan::model::index_uni(i)) - 1)) *
                          stan::model::rvalue(s2, "s2",
                            stan::model::index_uni(i))) *
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(mn)))) - (((0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::square(
                            (stan::model::rvalue(m, "m",
                               stan::model::index_uni(i)) -
                            stan::model::rvalue(a, "a",
                              stan::model::index_uni(mn))))) *
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(mn)))) -
                          (stan::model::rvalue(m, "m",
                             stan::model::index_uni(i)) *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i)))) *
                          stan::model::rvalue(trt_ind, "trt_ind",
                            stan::model::index_uni(i),
                            stan::model::index_uni(mn))));
                      }
                      current_statement__ = 151;
                      if (stan::math::logical_gt(
                            stan::model::rvalue(x, "x",
                              stan::model::index_uni(i)), 0)) {
                        current_statement__ = 149;
                        lp_accum__.add((((((((-0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::log(
                            stan::model::rvalue(invsigma2, "invsigma2",
                              stan::model::index_uni(mn))))) - (((0.5 *
                          (stan::model::rvalue(n, "n",
                             stan::model::index_uni(i)) - 1)) *
                          stan::model::rvalue(s2, "s2",
                            stan::model::index_uni(i))) *
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(mn)))) - (((0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::square(
                            ((stan::model::rvalue(m, "m",
                                stan::model::index_uni(i)) -
                            stan::model::rvalue(a, "a",
                              stan::model::index_uni(mn))) -
                            ((stan::model::rvalue(a, "a",
                                stan::model::index_uni(mn)) *
                            (stan::model::rvalue(c, "c",
                               stan::model::index_uni(mn)) - 1)) *
                            stan::math::Phi(
                              (stan::math::log(
                                 stan::model::rvalue(b, "b",
                                   stan::model::index_uni(mn))) +
                              (stan::model::rvalue(d, "d",
                                 stan::model::index_uni(mn)) *
                              stan::math::log(
                                stan::model::rvalue(x, "x",
                                  stan::model::index_uni(i)))))))))) *
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(mn)))) -
                          (stan::model::rvalue(m, "m",
                             stan::model::index_uni(i)) *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i)))) *
                          stan::model::rvalue(trt_ind, "trt_ind",
                            stan::model::index_uni(i),
                            stan::model::index_uni(mn))));
                      }
                    }
                  }
                }
              }
            } else {
              current_statement__ = 144;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(data_type, 1))
                  ||
                  stan::math::primitive_value(
                    stan::math::logical_eq(data_type, 3)))) {
                current_statement__ = 142;
                for (int i = 1; i <= N; ++i) {
                  current_statement__ = 140;
                  for (int mn = 1; mn <= nlevels; ++mn) {
                    current_statement__ = 135;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(x, "x",
                            stan::model::index_uni(i)), 0)) {
                      current_statement__ = 133;
                      lp_accum__.add(((((((-0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        * stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::log(
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(1))))) - (((0.5 *
                        (stan::model::rvalue(n, "n",
                           stan::model::index_uni(i)) - 1)) *
                        stan::model::rvalue(s2, "s2",
                          stan::model::index_uni(i))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(1)))) - (((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::square(
                          (stan::model::rvalue(m, "m",
                             stan::model::index_uni(i)) -
                          stan::model::rvalue(a, "a",
                            stan::model::index_uni(1))))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(1)))) *
                        stan::model::rvalue(trt_ind, "trt_ind",
                          stan::model::index_uni(i),
                          stan::model::index_uni(mn))));
                    }
                    current_statement__ = 138;
                    if (stan::math::logical_gt(
                          stan::model::rvalue(x, "x",
                            stan::model::index_uni(i)), 0)) {
                      current_statement__ = 136;
                      lp_accum__.add(((((((-0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        * stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::log(
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(1))))) - (((0.5 *
                        (stan::model::rvalue(n, "n",
                           stan::model::index_uni(i)) - 1)) *
                        stan::model::rvalue(s2, "s2",
                          stan::model::index_uni(i))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(1)))) - (((0.5 *
                        stan::model::rvalue(n, "n", stan::model::index_uni(i)))
                        *
                        stan::math::square(
                          ((stan::model::rvalue(m, "m",
                              stan::model::index_uni(i)) -
                          stan::model::rvalue(a, "a",
                            stan::model::index_uni(1))) -
                          ((stan::model::rvalue(a, "a",
                              stan::model::index_uni(1)) *
                          (stan::model::rvalue(c, "c",
                             stan::model::index_uni(1)) - 1)) *
                          stan::math::Phi(
                            (stan::math::log(
                               stan::model::rvalue(b, "b",
                                 stan::model::index_uni(1))) +
                            (stan::model::rvalue(d, "d",
                               stan::model::index_uni(1)) *
                            stan::math::log(
                              stan::model::rvalue(x, "x",
                                stan::model::index_uni(i)))))))))) *
                        stan::model::rvalue(invsigma2, "invsigma2",
                          stan::model::index_uni(1)))) *
                        stan::model::rvalue(trt_ind, "trt_ind",
                          stan::model::index_uni(i),
                          stan::model::index_uni(mn))));
                    }
                  }
                }
              } else {
                current_statement__ = 132;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(data_type, 2))
                    ||
                    stan::math::primitive_value(
                      stan::math::logical_eq(data_type, 4)))) {
                  current_statement__ = 130;
                  for (int i = 1; i <= N; ++i) {
                    current_statement__ = 128;
                    for (int mn = 1; mn <= nlevels; ++mn) {
                      current_statement__ = 123;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(x, "x",
                              stan::model::index_uni(i)), 0)) {
                        current_statement__ = 121;
                        lp_accum__.add((((((((-0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::log(
                            stan::model::rvalue(invsigma2, "invsigma2",
                              stan::model::index_uni(1))))) - (((0.5 *
                          (stan::model::rvalue(n, "n",
                             stan::model::index_uni(i)) - 1)) *
                          stan::model::rvalue(s2, "s2",
                            stan::model::index_uni(i))) *
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(1)))) - (((0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::square(
                            (stan::model::rvalue(m, "m",
                               stan::model::index_uni(i)) -
                            stan::model::rvalue(a, "a",
                              stan::model::index_uni(1))))) *
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(1)))) -
                          (stan::model::rvalue(m, "m",
                             stan::model::index_uni(i)) *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i)))) *
                          stan::model::rvalue(trt_ind, "trt_ind",
                            stan::model::index_uni(i),
                            stan::model::index_uni(mn))));
                      }
                      current_statement__ = 126;
                      if (stan::math::logical_gt(
                            stan::model::rvalue(x, "x",
                              stan::model::index_uni(i)), 0)) {
                        current_statement__ = 124;
                        lp_accum__.add((((((((-0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::log((2 * stan::math::pi()))) + ((0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::log(
                            stan::model::rvalue(invsigma2, "invsigma2",
                              stan::model::index_uni(1))))) - (((0.5 *
                          (stan::model::rvalue(n, "n",
                             stan::model::index_uni(i)) - 1)) *
                          stan::model::rvalue(s2, "s2",
                            stan::model::index_uni(i))) *
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(1)))) - (((0.5 *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i))) *
                          stan::math::square(
                            ((stan::model::rvalue(m, "m",
                                stan::model::index_uni(i)) -
                            stan::model::rvalue(a, "a",
                              stan::model::index_uni(1))) -
                            ((stan::model::rvalue(a, "a",
                                stan::model::index_uni(1)) *
                            (stan::model::rvalue(c, "c",
                               stan::model::index_uni(1)) - 1)) *
                            stan::math::Phi(
                              (stan::math::log(
                                 stan::model::rvalue(b, "b",
                                   stan::model::index_uni(1))) +
                              (stan::model::rvalue(d, "d",
                                 stan::model::index_uni(1)) *
                              stan::math::log(
                                stan::model::rvalue(x, "x",
                                  stan::model::index_uni(i)))))))))) *
                          stan::model::rvalue(invsigma2, "invsigma2",
                            stan::model::index_uni(1)))) -
                          (stan::model::rvalue(m, "m",
                             stan::model::index_uni(i)) *
                          stan::model::rvalue(n, "n",
                            stan::model::index_uni(i)))) *
                          stan::model::rvalue(trt_ind, "trt_ind",
                            stan::model::index_uni(i),
                            stan::model::index_uni(mn))));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mLN4COV_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> par1 =
        std::vector<double>(nlevels_a,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      par1 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, nlevels_a);
      std::vector<double> par2 =
        std::vector<double>(nlevels_BMD,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      par2 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, nlevels_BMD);
      std::vector<double> pars3i =
        std::vector<double>(is_increasing,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      pars3i = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, is_increasing);
      std::vector<double> pars3d =
        std::vector<double>(is_decreasing,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      pars3d = in__.template read_constrain_lub<
                 std::vector<local_scalar_t__>, jacobian__>(0, 1, lp__,
                 is_decreasing);
      std::vector<double> par4 =
        std::vector<double>(nlevels_d,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      par4 = in__.template read<std::vector<local_scalar_t__>>(nlevels_d);
      std::vector<double> par5 =
        std::vector<double>(nlevels_sigma,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      par5 = in__.template read<std::vector<local_scalar_t__>>(nlevels_sigma);
      std::vector<double> b =
        std::vector<double>(nlevels_b,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> a =
        std::vector<double>(nlevels_a,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> c =
        std::vector<double>(nlevels_a,
          std::numeric_limits<double>::quiet_NaN());
      double par3 = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> d =
        std::vector<double>(nlevels_d,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> k =
        std::vector<double>(nlevels_BMD,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> mu_inf =
        std::vector<double>(nlevels_a,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> invsigma2 =
        std::vector<double>(nlevels_sigma,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> mu_0 =
        std::vector<double>(nlevels_a,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(par1);
      out__.write(par2);
      out__.write(pars3i);
      out__.write(pars3d);
      out__.write(par4);
      out__.write(par5);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 18;
      for (int mn = 1; mn <= nlevels_d; ++mn) {
        current_statement__ = 16;
        stan::model::assign(d,
          stan::math::exp(
            stan::model::rvalue(par4, "par4", stan::model::index_uni(mn))),
          "assigning variable d", stan::model::index_uni(mn));
      }
      current_statement__ = 24;
      if (is_increasing) {
        current_statement__ = 22;
        par3 = (L +
          stan::model::rvalue(pars3i, "pars3i", stan::model::index_uni(1)));
      } else {
        current_statement__ = 21;
        if (is_decreasing) {
          current_statement__ = 19;
          par3 = (L + ((U - L) *
            stan::model::rvalue(pars3d, "pars3d", stan::model::index_uni(1))));
        }
      }
      current_statement__ = 34;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 25;
        stan::model::assign(mu_0,
          stan::model::rvalue(par1, "par1", stan::model::index_uni(mn)),
          "assigning variable mu_0", stan::model::index_uni(mn));
        current_statement__ = 31;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 3)))) {
          current_statement__ = 29;
          stan::model::assign(a,
            stan::model::rvalue(par1, "par1", stan::model::index_uni(mn)),
            "assigning variable a", stan::model::index_uni(mn));
        } else {
          current_statement__ = 28;
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(data_type, 2))
              ||
              stan::math::primitive_value(
                stan::math::logical_eq(data_type, 4)))) {
            current_statement__ = 26;
            stan::model::assign(a,
              (stan::math::log(
                 stan::model::rvalue(par1, "par1", stan::model::index_uni(mn)))
              - shift), "assigning variable a", stan::model::index_uni(mn));
          }
        }
        current_statement__ = 32;
        stan::model::assign(mu_inf,
          (stan::model::rvalue(par1, "par1", stan::model::index_uni(mn)) *
          par3), "assigning variable mu_inf", stan::model::index_uni(mn));
      }
      current_statement__ = 36;
      for (int mn = 1; mn <= nlevels_sigma; ++mn) {
        current_statement__ = 35;
        stan::model::assign(invsigma2,
          stan::math::exp(
            stan::model::rvalue(par5, "par5", stan::model::index_uni(mn))),
          "assigning variable invsigma2", stan::model::index_uni(mn));
      }
      current_statement__ = 38;
      for (int mn = 1; mn <= nlevels_BMD; ++mn) {
        current_statement__ = 37;
        stan::model::assign(k,
          stan::math::log(
            stan::model::rvalue(par2, "par2", stan::model::index_uni(mn))),
          "assigning variable k", stan::model::index_uni(mn));
      }
      current_statement__ = 46;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 44;
        if ((stan::math::primitive_value(stan::math::logical_eq(data_type, 1))
            ||
            stan::math::primitive_value(stan::math::logical_eq(data_type, 3)))) {
          current_statement__ = 42;
          stan::model::assign(c,
            (stan::model::rvalue(mu_inf, "mu_inf", stan::model::index_uni(mn))
            / stan::model::rvalue(mu_0, "mu_0", stan::model::index_uni(mn))),
            "assigning variable c", stan::model::index_uni(mn));
        } else {
          current_statement__ = 41;
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(data_type, 2))
              ||
              stan::math::primitive_value(
                stan::math::logical_eq(data_type, 4)))) {
            current_statement__ = 39;
            stan::model::assign(c,
              ((stan::math::log(
                  stan::model::rvalue(mu_inf, "mu_inf",
                    stan::model::index_uni(mn))) - shift) /
              (stan::math::log(
                 stan::model::rvalue(mu_0, "mu_0", stan::model::index_uni(mn)))
              - shift)), "assigning variable c", stan::model::index_uni(mn));
          }
        }
      }
      current_statement__ = 110;
      if ((stan::math::primitive_value(
             (stan::math::primitive_value(
                stan::math::logical_eq(nlevels_a, 1)) &&
             stan::math::primitive_value(stan::math::logical_eq(nlevels_d, 1))))
          &&
          stan::math::primitive_value(stan::math::logical_eq(nlevels_BMD, 1)))) {
        current_statement__ = 108;
        for (int mn = 1; mn <= nlevels_b; ++mn) {
          current_statement__ = 106;
          if (stan::math::logical_eq(data_type, 1)) {
            current_statement__ = 104;
            stan::model::assign(b,
              stan::math::exp(
                (stan::math::inv_Phi((q /
                   (stan::model::rvalue(c, "c", stan::model::index_uni(1)) -
                   1))) -
                (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
              "assigning variable b", stan::model::index_uni(1));
          } else {
            current_statement__ = 103;
            if (stan::math::logical_eq(data_type, 2)) {
              current_statement__ = 101;
              stan::model::assign(b,
                stan::math::exp(
                  (stan::math::inv_Phi((stan::math::log((1 + q)) /
                     (stan::model::rvalue(a, "a", stan::model::index_uni(1))
                     *
                     (stan::model::rvalue(c, "c", stan::model::index_uni(1))
                     - 1)))) -
                  (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                  stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                "assigning variable b", stan::model::index_uni(1));
            } else {
              current_statement__ = 100;
              if (stan::math::logical_eq(data_type, 3)) {
                current_statement__ = 98;
                stan::model::assign(b,
                  stan::math::exp(
                    (stan::math::inv_Phi((-q /
                       (stan::model::rvalue(c, "c", stan::model::index_uni(1))
                       - 1))) -
                    (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                    stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                  "assigning variable b", stan::model::index_uni(1));
              } else {
                current_statement__ = 97;
                if (stan::math::logical_eq(data_type, 4)) {
                  current_statement__ = 95;
                  stan::model::assign(b,
                    stan::math::exp(
                      (stan::math::inv_Phi((stan::math::log((1 - q)) /
                         (stan::model::rvalue(a, "a",
                            stan::model::index_uni(1)) *
                         (stan::model::rvalue(c, "c",
                            stan::model::index_uni(1)) - 1)))) -
                      (stan::model::rvalue(k, "k", stan::model::index_uni(1))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                    "assigning variable b", stan::model::index_uni(1));
                }
              }
            }
          }
        }
      } else {
        current_statement__ = 94;
        if ((stan::math::primitive_value(
               (stan::math::primitive_value(
                  stan::math::logical_gt(nlevels_a, 1)) &&
               stan::math::primitive_value(
                 stan::math::logical_eq(nlevels_d, 1))))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(nlevels_BMD, 1)))) {
          current_statement__ = 92;
          for (int mn = 1; mn <= nlevels_b; ++mn) {
            current_statement__ = 90;
            if (stan::math::logical_eq(data_type, 1)) {
              current_statement__ = 88;
              stan::model::assign(b,
                stan::math::exp(
                  (stan::math::inv_Phi((q /
                     (stan::model::rvalue(c, "c", stan::model::index_uni(mn))
                     - 1))) -
                  (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                  stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                "assigning variable b", stan::model::index_uni(mn));
            } else {
              current_statement__ = 87;
              if (stan::math::logical_eq(data_type, 2)) {
                current_statement__ = 85;
                stan::model::assign(b,
                  stan::math::exp(
                    (stan::math::inv_Phi((stan::math::log((1 + q)) /
                       (stan::model::rvalue(a, "a",
                          stan::model::index_uni(mn)) *
                       (stan::model::rvalue(c, "c",
                          stan::model::index_uni(mn)) - 1)))) -
                    (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                    stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                  "assigning variable b", stan::model::index_uni(mn));
              } else {
                current_statement__ = 84;
                if (stan::math::logical_eq(data_type, 3)) {
                  current_statement__ = 82;
                  stan::model::assign(b,
                    stan::math::exp(
                      (stan::math::inv_Phi((-q /
                         (stan::model::rvalue(c, "c",
                            stan::model::index_uni(mn)) - 1))) -
                      (stan::model::rvalue(k, "k", stan::model::index_uni(1))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                    "assigning variable b", stan::model::index_uni(mn));
                } else {
                  current_statement__ = 81;
                  if (stan::math::logical_eq(data_type, 4)) {
                    current_statement__ = 79;
                    stan::model::assign(b,
                      stan::math::exp(
                        (stan::math::inv_Phi((stan::math::log((1 - q)) /
                           (stan::model::rvalue(a, "a",
                              stan::model::index_uni(mn)) *
                           (stan::model::rvalue(c, "c",
                              stan::model::index_uni(mn)) - 1)))) -
                        (stan::model::rvalue(k, "k",
                           stan::model::index_uni(1)) *
                        stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                      "assigning variable b", stan::model::index_uni(mn));
                  }
                }
              }
            }
          }
        } else {
          current_statement__ = 78;
          if ((stan::math::primitive_value(
                 (stan::math::primitive_value(
                    stan::math::logical_eq(nlevels_a, 1)) &&
                 stan::math::primitive_value(
                   stan::math::logical_gt(nlevels_d, 1))))
              &&
              stan::math::primitive_value(
                stan::math::logical_gt(nlevels_BMD, 1)))) {
            current_statement__ = 76;
            for (int mn = 1; mn <= nlevels_b; ++mn) {
              current_statement__ = 74;
              if (stan::math::logical_eq(data_type, 1)) {
                current_statement__ = 72;
                stan::model::assign(b,
                  stan::math::exp(
                    (stan::math::inv_Phi((q /
                       (stan::model::rvalue(c, "c", stan::model::index_uni(1))
                       - 1))) -
                    (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                    *
                    stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                  "assigning variable b", stan::model::index_uni(mn));
              } else {
                current_statement__ = 71;
                if (stan::math::logical_eq(data_type, 2)) {
                  current_statement__ = 69;
                  stan::model::assign(b,
                    stan::math::exp(
                      (stan::math::inv_Phi((stan::math::log((1 + q)) /
                         (stan::model::rvalue(a, "a",
                            stan::model::index_uni(1)) *
                         (stan::model::rvalue(c, "c",
                            stan::model::index_uni(1)) - 1)))) -
                      (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                    "assigning variable b", stan::model::index_uni(mn));
                } else {
                  current_statement__ = 68;
                  if (stan::math::logical_eq(data_type, 3)) {
                    current_statement__ = 66;
                    stan::model::assign(b,
                      stan::math::exp(
                        (stan::math::inv_Phi((-q /
                           (stan::model::rvalue(c, "c",
                              stan::model::index_uni(1)) - 1))) -
                        (stan::model::rvalue(k, "k",
                           stan::model::index_uni(mn)) *
                        stan::model::rvalue(d, "d",
                          stan::model::index_uni(mn))))),
                      "assigning variable b", stan::model::index_uni(mn));
                  } else {
                    current_statement__ = 65;
                    if (stan::math::logical_eq(data_type, 4)) {
                      current_statement__ = 63;
                      stan::model::assign(b,
                        stan::math::exp(
                          (stan::math::inv_Phi((stan::math::log((1 - q)) /
                             (stan::model::rvalue(a, "a",
                                stan::model::index_uni(1)) *
                             (stan::model::rvalue(c, "c",
                                stan::model::index_uni(1)) - 1)))) -
                          (stan::model::rvalue(k, "k",
                             stan::model::index_uni(mn)) *
                          stan::model::rvalue(d, "d",
                            stan::model::index_uni(mn))))),
                        "assigning variable b", stan::model::index_uni(mn));
                    }
                  }
                }
              }
            }
          } else {
            current_statement__ = 62;
            if ((stan::math::primitive_value(
                   (stan::math::primitive_value(
                      stan::math::logical_gt(nlevels_a, 1)) &&
                   stan::math::primitive_value(
                     stan::math::logical_gt(nlevels_d, 1))))
                &&
                stan::math::primitive_value(
                  stan::math::logical_gt(nlevels_BMD, 1)))) {
              current_statement__ = 60;
              for (int mn = 1; mn <= nlevels_b; ++mn) {
                current_statement__ = 58;
                if (stan::math::logical_eq(data_type, 1)) {
                  current_statement__ = 56;
                  stan::model::assign(b,
                    stan::math::exp(
                      (stan::math::inv_Phi((q /
                         (stan::model::rvalue(c, "c",
                            stan::model::index_uni(mn)) - 1))) -
                      (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                    "assigning variable b", stan::model::index_uni(mn));
                } else {
                  current_statement__ = 55;
                  if (stan::math::logical_eq(data_type, 2)) {
                    current_statement__ = 53;
                    stan::model::assign(b,
                      stan::math::exp(
                        (stan::math::inv_Phi((stan::math::log((1 + q)) /
                           (stan::model::rvalue(a, "a",
                              stan::model::index_uni(mn)) *
                           (stan::model::rvalue(c, "c",
                              stan::model::index_uni(mn)) - 1)))) -
                        (stan::model::rvalue(k, "k",
                           stan::model::index_uni(mn)) *
                        stan::model::rvalue(d, "d",
                          stan::model::index_uni(mn))))),
                      "assigning variable b", stan::model::index_uni(mn));
                  } else {
                    current_statement__ = 52;
                    if (stan::math::logical_eq(data_type, 3)) {
                      current_statement__ = 50;
                      stan::model::assign(b,
                        stan::math::exp(
                          (stan::math::inv_Phi((-q /
                             (stan::model::rvalue(c, "c",
                                stan::model::index_uni(mn)) - 1))) -
                          (stan::model::rvalue(k, "k",
                             stan::model::index_uni(mn)) *
                          stan::model::rvalue(d, "d",
                            stan::model::index_uni(mn))))),
                        "assigning variable b", stan::model::index_uni(mn));
                    } else {
                      current_statement__ = 49;
                      if (stan::math::logical_eq(data_type, 4)) {
                        current_statement__ = 47;
                        stan::model::assign(b,
                          stan::math::exp(
                            (stan::math::inv_Phi((stan::math::log((1 - q)) /
                               (stan::model::rvalue(a, "a",
                                  stan::model::index_uni(mn)) *
                               (stan::model::rvalue(c, "c",
                                  stan::model::index_uni(mn)) - 1)))) -
                            (stan::model::rvalue(k, "k",
                               stan::model::index_uni(mn)) *
                            stan::model::rvalue(d, "d",
                              stan::model::index_uni(mn))))),
                          "assigning variable b", stan::model::index_uni(mn));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(b);
        out__.write(a);
        out__.write(c);
        out__.write(par3);
        out__.write(d);
        out__.write(k);
        out__.write(mu_inf);
        out__.write(invsigma2);
        out__.write(mu_0);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> par1 =
        std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(par1,
        in__.read<std::vector<local_scalar_t__>>(nlevels_a),
        "assigning variable par1");
      out__.write_free_lb(0, par1);
      std::vector<local_scalar_t__> par2 =
        std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(par2,
        in__.read<std::vector<local_scalar_t__>>(nlevels_BMD),
        "assigning variable par2");
      out__.write_free_lb(0, par2);
      std::vector<local_scalar_t__> pars3i =
        std::vector<local_scalar_t__>(is_increasing, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(pars3i,
        in__.read<std::vector<local_scalar_t__>>(is_increasing),
        "assigning variable pars3i");
      out__.write_free_lb(0, pars3i);
      std::vector<local_scalar_t__> pars3d =
        std::vector<local_scalar_t__>(is_decreasing, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(pars3d,
        in__.read<std::vector<local_scalar_t__>>(is_decreasing),
        "assigning variable pars3d");
      out__.write_free_lub(0, 1, pars3d);
      std::vector<local_scalar_t__> par4 =
        std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(par4,
        in__.read<std::vector<local_scalar_t__>>(nlevels_d),
        "assigning variable par4");
      out__.write(par4);
      std::vector<local_scalar_t__> par5 =
        std::vector<local_scalar_t__>(nlevels_sigma, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(par5,
        in__.read<std::vector<local_scalar_t__>>(nlevels_sigma),
        "assigning variable par5");
      out__.write(par5);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "par1", "double",
        std::vector<size_t>{static_cast<size_t>(nlevels_a)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "par2", "double",
        std::vector<size_t>{static_cast<size_t>(nlevels_BMD)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "pars3i", "double",
        std::vector<size_t>{static_cast<size_t>(is_increasing)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "pars3d", "double",
        std::vector<size_t>{static_cast<size_t>(is_decreasing)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "par4", "double",
        std::vector<size_t>{static_cast<size_t>(nlevels_d)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "par5", "double",
        std::vector<size_t>{static_cast<size_t>(nlevels_sigma)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> par1 =
        std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      current_statement__ = 1;
      par1 = context__.vals_r("par1");
      out__.write_free_lb(0, par1);
      std::vector<local_scalar_t__> par2 =
        std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      current_statement__ = 2;
      par2 = context__.vals_r("par2");
      out__.write_free_lb(0, par2);
      std::vector<local_scalar_t__> pars3i =
        std::vector<local_scalar_t__>(is_increasing, DUMMY_VAR__);
      current_statement__ = 3;
      pars3i = context__.vals_r("pars3i");
      out__.write_free_lb(0, pars3i);
      std::vector<local_scalar_t__> pars3d =
        std::vector<local_scalar_t__>(is_decreasing, DUMMY_VAR__);
      current_statement__ = 4;
      pars3d = context__.vals_r("pars3d");
      out__.write_free_lub(0, 1, pars3d);
      std::vector<local_scalar_t__> par4 =
        std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      current_statement__ = 5;
      par4 = context__.vals_r("par4");
      out__.write(par4);
      std::vector<local_scalar_t__> par5 =
        std::vector<local_scalar_t__>(nlevels_sigma, DUMMY_VAR__);
      current_statement__ = 6;
      par5 = context__.vals_r("par5");
      out__.write(par5);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"par1", "par2", "pars3i", "pars3d",
                "par4", "par5"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"b", "a", "c", "par3", "d", "k", "mu_inf", "invsigma2", "mu_0"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    nlevels_a)},
                std::vector<size_t>{static_cast<size_t>(nlevels_BMD)},
                std::vector<size_t>{static_cast<size_t>(is_increasing)},
                std::vector<size_t>{static_cast<size_t>(is_decreasing)},
                std::vector<size_t>{static_cast<size_t>(nlevels_d)},
                std::vector<size_t>{static_cast<size_t>(nlevels_sigma)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(nlevels_b)},
             std::vector<size_t>{static_cast<size_t>(nlevels_a)},
             std::vector<size_t>{static_cast<size_t>(nlevels_a)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(nlevels_d)},
             std::vector<size_t>{static_cast<size_t>(nlevels_BMD)},
             std::vector<size_t>{static_cast<size_t>(nlevels_a)},
             std::vector<size_t>{static_cast<size_t>(nlevels_sigma)},
             std::vector<size_t>{static_cast<size_t>(nlevels_a)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
      param_names__.emplace_back(std::string() + "par1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
      param_names__.emplace_back(std::string() + "par2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3i" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3d" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
      param_names__.emplace_back(std::string() + "par4" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
      param_names__.emplace_back(std::string() + "par5" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nlevels_b; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        param_names__.emplace_back(std::string() + "a" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        param_names__.emplace_back(std::string() + "c" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "par3");
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        param_names__.emplace_back(std::string() + "d" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        param_names__.emplace_back(std::string() + "k" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_inf" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
        param_names__.emplace_back(std::string() + "invsigma2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_0" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
      param_names__.emplace_back(std::string() + "par1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
      param_names__.emplace_back(std::string() + "par2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3i" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
      param_names__.emplace_back(std::string() + "pars3d" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
      param_names__.emplace_back(std::string() + "par4" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
      param_names__.emplace_back(std::string() + "par5" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nlevels_b; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        param_names__.emplace_back(std::string() + "a" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        param_names__.emplace_back(std::string() + "c" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "par3");
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        param_names__.emplace_back(std::string() + "d" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        param_names__.emplace_back(std::string() + "k" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_inf" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
        param_names__.emplace_back(std::string() + "invsigma2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_0" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"par1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_BMD) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_increasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_decreasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_d) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_sigma) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_b) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_d) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_BMD) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_inf\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_sigma) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"par1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_BMD) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_increasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_decreasing) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_d) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_sigma) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_b) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_d) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_BMD) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_inf\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_sigma) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((nlevels_a + nlevels_BMD) +
      is_increasing) + is_decreasing) + nlevels_d) + nlevels_sigma);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((nlevels_b + nlevels_a) + nlevels_a) + 1) + nlevels_d) +
      nlevels_BMD) + nlevels_a) + nlevels_sigma) + nlevels_a));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((nlevels_a + nlevels_BMD) +
      is_increasing) + is_decreasing) + nlevels_d) + nlevels_sigma);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((nlevels_b + nlevels_a) + nlevels_a) + 1) + nlevels_d) +
      nlevels_BMD) + nlevels_a) + nlevels_sigma) + nlevels_a));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mLN4COV_namespace::model_mLN4COV;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mLN4COV_namespace::profiles__;
}
#endif
#endif
