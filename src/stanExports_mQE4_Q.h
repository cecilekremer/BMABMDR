// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_mQE4_Q_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 37, column 2 to column 30)",
                                                      " (in 'string', line 38, column 2 to column 21)",
                                                      " (in 'string', line 39, column 2 to column 12)",
                                                      " (in 'string', line 40, column 2 to column 23)",
                                                      " (in 'string', line 43, column 2 to column 9)",
                                                      " (in 'string', line 44, column 2 to column 9)",
                                                      " (in 'string', line 45, column 2 to column 9)",
                                                      " (in 'string', line 46, column 2 to column 9)",
                                                      " (in 'string', line 47, column 2 to column 12)",
                                                      " (in 'string', line 48, column 2 to column 15)",
                                                      " (in 'string', line 49, column 2 to column 15)",
                                                      " (in 'string', line 50, column 2 to column 20)",
                                                      " (in 'string', line 51, column 2 to column 13)",
                                                      " (in 'string', line 52, column 2 to column 11)",
                                                      " (in 'string', line 53, column 2 to column 16)",
                                                      " (in 'string', line 54, column 2 to column 16)",
                                                      " (in 'string', line 55, column 2 to column 60)",
                                                      " (in 'string', line 61, column 6 to column 81)",
                                                      " (in 'string', line 60, column 25 to line 62, column 6)",
                                                      " (in 'string', line 60, column 12 to line 62, column 6)",
                                                      " (in 'string', line 59, column 6 to column 15)",
                                                      " (in 'string', line 58, column 17 to line 60, column 6)",
                                                      " (in 'string', line 58, column 4 to line 62, column 6)",
                                                      " (in 'string', line 57, column 15 to line 63, column 3)",
                                                      " (in 'string', line 57, column 2 to line 63, column 3)",
                                                      " (in 'string', line 73, column 6 to column 20)",
                                                      " (in 'string', line 74, column 6 to column 20)",
                                                      " (in 'string', line 72, column 17 to line 75, column 5)",
                                                      " (in 'string', line 72, column 4 to line 75, column 5)",
                                                      " (in 'string', line 71, column 9 to line 76, column 3)",
                                                      " (in 'string', line 68, column 6 to column 45)",
                                                      " (in 'string', line 69, column 6 to column 53)",
                                                      " (in 'string', line 67, column 17 to line 70, column 5)",
                                                      " (in 'string', line 67, column 4 to line 70, column 5)",
                                                      " (in 'string', line 66, column 18 to line 71, column 3)",
                                                      " (in 'string', line 66, column 2 to line 76, column 3)",
                                                      " (in 'string', line 81, column 4 to column 72)",
                                                      " (in 'string', line 82, column 4 to column 72)",
                                                      " (in 'string', line 83, column 52 to column 59)",
                                                      " (in 'string', line 83, column 4 to column 61)",
                                                      " (in 'string', line 95, column 6 to column 62)",
                                                      " (in 'string', line 97, column 8 to line 99, column 46)",
                                                      " (in 'string', line 96, column 19 to line 101, column 7)",
                                                      " (in 'string', line 96, column 6 to line 101, column 7)",
                                                      " (in 'string', line 94, column 11 to line 102, column 5)",
                                                      " (in 'string', line 90, column 8 to column 93)",
                                                      " (in 'string', line 89, column 19 to line 92, column 7)",
                                                      " (in 'string', line 89, column 6 to line 92, column 7)",
                                                      " (in 'string', line 87, column 17 to line 94, column 5)",
                                                      " (in 'string', line 87, column 3 to line 102, column 5)",
                                                      " (in 'string', line 21, column 2 to column 8)",
                                                      " (in 'string', line 22, column 9 to column 10)",
                                                      " (in 'string', line 22, column 2 to column 14)",
                                                      " (in 'string', line 23, column 9 to column 10)",
                                                      " (in 'string', line 23, column 2 to column 14)",
                                                      " (in 'string', line 24, column 9 to column 10)",
                                                      " (in 'string', line 24, column 2 to column 14)",
                                                      " (in 'string', line 25, column 2 to column 9)",
                                                      " (in 'string', line 26, column 2 to column 21)",
                                                      " (in 'string', line 27, column 2 to column 18)",
                                                      " (in 'string', line 28, column 2 to column 18)",
                                                      " (in 'string', line 29, column 2 to column 20)",
                                                      " (in 'string', line 30, column 2 to column 11)",
                                                      " (in 'string', line 31, column 2 to column 28)",
                                                      " (in 'string', line 32, column 2 to column 15)",
                                                      " (in 'string', line 33, column 2 to column 31)",
                                                      " (in 'string', line 34, column 2 to column 35)",
                                                      " (in 'string', line 40, column 11 to column 21)",
                                                      " (in 'string', line 47, column 9 to column 10)",
                                                      " (in 'string', line 48, column 12 to column 13)",
                                                      " (in 'string', line 49, column 12 to column 13)",
                                                      " (in 'string', line 3, column 4 to column 12)",
                                                      " (in 'string', line 4, column 4 to column 12)",
                                                      " (in 'string', line 5, column 4 to column 12)",
                                                      " (in 'string', line 6, column 4 to column 12)",
                                                      " (in 'string', line 7, column 4 to column 15)",
                                                      " (in 'string', line 8, column 4 to column 14)",
                                                      " (in 'string', line 10, column 4 to column 43)",
                                                      " (in 'string', line 11, column 4 to column 42)",
                                                      " (in 'string', line 13, column 4 to column 39)",
                                                      " (in 'string', line 14, column 4 to column 38)",
                                                      " (in 'string', line 15, column 4 to column 41)",
                                                      " (in 'string', line 16, column 4 to column 28)",
                                                      " (in 'string', line 17, column 4 to column 31)",
                                                      " (in 'string', line 2, column 71 to line 18, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
pert_dist_lpdf(const T0__& theta, const T1__& lb, const T2__& md,
               const T3__& ub, const T4__& gama, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x1;
    x1 = DUMMY_VAR__;
    
    local_scalar_t__ x2;
    x2 = DUMMY_VAR__;
    
    local_scalar_t__ x3;
    x3 = DUMMY_VAR__;
    
    local_scalar_t__ x4;
    x4 = DUMMY_VAR__;
    
    local_scalar_t__ alpha;
    alpha = DUMMY_VAR__;
    
    local_scalar_t__ beta;
    beta = DUMMY_VAR__;
    
    current_statement__ = 78;
    alpha = (1 + ((gama * (md - lb)) / (ub - lb)));
    current_statement__ = 79;
    beta = (1 + ((gama * (ub - md)) / (ub - lb)));
    current_statement__ = 80;
    x1 = ((alpha - 1) * stan::math::log((theta - lb)));
    current_statement__ = 81;
    x2 = ((beta - 1) * stan::math::log((ub - theta)));
    current_statement__ = 82;
    x3 = (((alpha + beta) - 1) * stan::math::log((ub - lb)));
    current_statement__ = 83;
    x4 = lbeta(alpha, beta);
    current_statement__ = 84;
    return (((x1 + x2) - x3) - x4);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct pert_dist_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
operator()(const T0__& theta, const T1__& lb, const T2__& md, const T3__& ub,
           const T4__& gama, std::ostream* pstream__)  const 
{
return pert_dist_lpdf<propto__>(theta, lb, md, ub, gama, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_mQE4_Q final : public model_base_crtp<model_mQE4_Q> {
private:
  int N;
  Eigen::Matrix<double, -1, 1> n;
  Eigen::Matrix<double, -1, 1> x;
  Eigen::Matrix<double, -1, 1> y;
  double q;
  Eigen::Matrix<double, -1, 1> priormuQ;
  std::vector<double> priorlb;
  std::vector<double> priorub;
  std::vector<double> priorgama;
  double eps;
  Eigen::Matrix<double, -1, -1> priorSigmaQ;
  double truncdQ;
  int is_bin;
  int is_betabin;
 
public:
  ~model_mQE4_Q() { }
  
  inline std::string model_name() const final { return "model_mQE4_Q"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_mQE4_Q(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_mQE4_Q_namespace::model_mQE4_Q";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 51;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 51;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 52;
      validate_non_negative_index("n", "N", N);
      current_statement__ = 53;
      context__.validate_dims("data initialization","n","double",
          context__.to_vec(N));
      n = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(n, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> n_flat__;
        current_statement__ = 53;
        assign(n_flat__, nil_index_list(), context__.vals_r("n"),
          "assigning variable n_flat__");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 53;
          assign(n, cons_list(index_uni(sym1__), nil_index_list()),
            n_flat__[(pos__ - 1)], "assigning variable n");
          current_statement__ = 53;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 54;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 55;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N));
      x = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 55;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 55;
          assign(x, cons_list(index_uni(sym1__), nil_index_list()),
            x_flat__[(pos__ - 1)], "assigning variable x");
          current_statement__ = 55;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 56;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 57;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N));
      y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 57;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 57;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 57;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 58;
      context__.validate_dims("data initialization","q","double",
          context__.to_vec());
      q = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 58;
      q = context__.vals_r("q")[(1 - 1)];
      current_statement__ = 59;
      context__.validate_dims("data initialization","priormuQ","double",
          context__.to_vec(4));
      priormuQ = Eigen::Matrix<double, -1, 1>(4);
      stan::math::fill(priormuQ, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priormuQ_flat__;
        current_statement__ = 59;
        assign(priormuQ_flat__, nil_index_list(),
          context__.vals_r("priormuQ"), "assigning variable priormuQ_flat__");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 59;
          assign(priormuQ, cons_list(index_uni(sym1__), nil_index_list()),
            priormuQ_flat__[(pos__ - 1)], "assigning variable priormuQ");
          current_statement__ = 59;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 60;
      context__.validate_dims("data initialization","priorlb","double",
          context__.to_vec(2));
      priorlb = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 60;
      assign(priorlb, nil_index_list(), context__.vals_r("priorlb"),
        "assigning variable priorlb");
      current_statement__ = 61;
      context__.validate_dims("data initialization","priorub","double",
          context__.to_vec(2));
      priorub = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 61;
      assign(priorub, nil_index_list(), context__.vals_r("priorub"),
        "assigning variable priorub");
      current_statement__ = 62;
      context__.validate_dims("data initialization","priorgama","double",
          context__.to_vec(2));
      priorgama = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 62;
      assign(priorgama, nil_index_list(), context__.vals_r("priorgama"),
        "assigning variable priorgama");
      current_statement__ = 63;
      context__.validate_dims("data initialization","eps","double",
          context__.to_vec());
      eps = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 63;
      eps = context__.vals_r("eps")[(1 - 1)];
      current_statement__ = 64;
      context__.validate_dims("data initialization","priorSigmaQ","double",
          context__.to_vec(3, 3));
      priorSigmaQ = Eigen::Matrix<double, -1, -1>(3, 3);
      stan::math::fill(priorSigmaQ, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorSigmaQ_flat__;
        current_statement__ = 64;
        assign(priorSigmaQ_flat__, nil_index_list(),
          context__.vals_r("priorSigmaQ"),
          "assigning variable priorSigmaQ_flat__");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 64;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 64;
            assign(priorSigmaQ,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priorSigmaQ_flat__[(pos__ - 1)],
              "assigning variable priorSigmaQ");
            current_statement__ = 64;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 64;
      current_statement__ = 64;
      check_cov_matrix(function__, "priorSigmaQ", priorSigmaQ);
      current_statement__ = 65;
      context__.validate_dims("data initialization","truncdQ","double",
          context__.to_vec());
      truncdQ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 65;
      truncdQ = context__.vals_r("truncdQ")[(1 - 1)];
      current_statement__ = 66;
      context__.validate_dims("data initialization","is_bin","int",
          context__.to_vec());
      is_bin = std::numeric_limits<int>::min();
      
      current_statement__ = 66;
      is_bin = context__.vals_i("is_bin")[(1 - 1)];
      current_statement__ = 66;
      current_statement__ = 66;
      check_greater_or_equal(function__, "is_bin", is_bin, 0);
      current_statement__ = 66;
      current_statement__ = 66;
      check_less_or_equal(function__, "is_bin", is_bin, 1);
      current_statement__ = 67;
      context__.validate_dims("data initialization","is_betabin","int",
          context__.to_vec());
      is_betabin = std::numeric_limits<int>::min();
      
      current_statement__ = 67;
      is_betabin = context__.vals_i("is_betabin")[(1 - 1)];
      current_statement__ = 67;
      current_statement__ = 67;
      check_greater_or_equal(function__, "is_betabin", is_betabin, 0);
      current_statement__ = 67;
      current_statement__ = 67;
      check_less_or_equal(function__, "is_betabin", is_betabin, 1);
      current_statement__ = 68;
      validate_non_negative_index("rho", "is_betabin", is_betabin);
      current_statement__ = 69;
      validate_non_negative_index("m", "N", N);
      current_statement__ = 70;
      validate_non_negative_index("abet", "N", N);
      current_statement__ = 71;
      validate_non_negative_index("bbet", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += is_betabin;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_mQE4_Q_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ par1;
      par1 = DUMMY_VAR__;
      
      current_statement__ = 1;
      par1 = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        par1 = stan::math::lub_constrain(par1, 0, 1, lp__);
      } else {
        current_statement__ = 1;
        par1 = stan::math::lub_constrain(par1, 0, 1);
      }
      local_scalar_t__ par2;
      par2 = DUMMY_VAR__;
      
      current_statement__ = 2;
      par2 = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        par2 = stan::math::lb_constrain(par2, 0, lp__);
      } else {
        current_statement__ = 2;
        par2 = stan::math::lb_constrain(par2, 0);
      }
      local_scalar_t__ par3;
      par3 = DUMMY_VAR__;
      
      current_statement__ = 3;
      par3 = in__.scalar();
      std::vector<local_scalar_t__> rho;
      rho = std::vector<local_scalar_t__>(is_betabin, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_betabin; ++sym1__) {
        current_statement__ = 4;
        assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable rho");}
      local_scalar_t__ a;
      a = DUMMY_VAR__;
      
      local_scalar_t__ b;
      b = DUMMY_VAR__;
      
      local_scalar_t__ d;
      d = DUMMY_VAR__;
      
      local_scalar_t__ k;
      k = DUMMY_VAR__;
      
      std::vector<local_scalar_t__> m;
      m = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> abet;
      abet = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> bbet;
      bbet = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      local_scalar_t__ BMD;
      BMD = DUMMY_VAR__;
      
      current_statement__ = 13;
      BMD = par2;
      current_statement__ = 14;
      a = par1;
      current_statement__ = 15;
      d = stan::math::exp(par3);
      current_statement__ = 16;
      k = stan::math::log(par2);
      current_statement__ = 17;
      b = (-stan::math::log((1 - q)) /
            (stan::math::exp(k) +
              ((stan::math::exp(k) * (stan::math::exp(k) - 1)) /
                stan::math::exp(d))));
      current_statement__ = 25;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 23;
        if (logical_eq(x[(i - 1)], 0)) {
          current_statement__ = 21;
          assign(m, cons_list(index_uni(i), nil_index_list()), a,
            "assigning variable m");
        } else {
          current_statement__ = 20;
          if (logical_gt(x[(i - 1)], 0)) {
            current_statement__ = 18;
            assign(m, cons_list(index_uni(i), nil_index_list()),
              (a +
                ((1 - a) *
                  (1 -
                    stan::math::exp(
                      ((-b * x[(i - 1)]) -
                        (((b / stan::math::exp(d)) * x[(i - 1)]) *
                          (x[(i - 1)] - 1))))))), "assigning variable m");
          } 
        }}
      current_statement__ = 36;
      if (logical_eq(is_bin, 0)) {
        current_statement__ = 34;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 31;
          assign(abet, cons_list(index_uni(i), nil_index_list()),
            (m[(i - 1)] * ((1 / rho[(is_betabin - 1)]) - 1)),
            "assigning variable abet");
          current_statement__ = 32;
          assign(bbet, cons_list(index_uni(i), nil_index_list()),
            ((1.0 - m[(i - 1)]) * ((1 / rho[(is_betabin - 1)]) - 1)),
            "assigning variable bbet");}
      } else {
        current_statement__ = 29;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 26;
          assign(abet, cons_list(index_uni(i), nil_index_list()), 0.0,
            "assigning variable abet");
          current_statement__ = 27;
          assign(bbet, cons_list(index_uni(i), nil_index_list()), 0.0,
            "assigning variable bbet");}
      }
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "BMD", BMD, 0);
      {
        current_statement__ = 37;
        lp_accum__.add(
          pert_dist_lpdf<propto__>(par1, priorlb[(1 - 1)], priormuQ[(1 - 1)],
            priorub[(1 - 1)], priorgama[(1 - 1)], pstream__));
        current_statement__ = 38;
        lp_accum__.add(
          pert_dist_lpdf<propto__>(par2, priorlb[(2 - 1)], priormuQ[(2 - 1)],
            priorub[(2 - 1)], priorgama[(2 - 1)], pstream__));
        current_statement__ = 39;
        if (logical_gt(par3, truncdQ)) {
          current_statement__ = 39;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 39;
          lp_accum__.add(
            -normal_cdf_log(truncdQ, priormuQ[(3 - 1)],
               rvalue(priorSigmaQ,
                 cons_list(index_uni(3),
                   cons_list(index_uni(3), nil_index_list())), "priorSigmaQ")));
        }
        current_statement__ = 40;
        lp_accum__.add(
          normal_lpdf<propto__>(par3, priormuQ[(3 - 1)],
            rvalue(priorSigmaQ,
              cons_list(index_uni(3),
                cons_list(index_uni(3), nil_index_list())), "priorSigmaQ")));
        current_statement__ = 50;
        if (logical_eq(is_bin, 1)) {
          current_statement__ = 48;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 46;
            lp_accum__.add(
              ((binomial_coefficient_log(n[(i - 1)], y[(i - 1)]) +
                 (y[(i - 1)] * stan::math::log((m[(i - 1)] + eps)))) +
                ((n[(i - 1)] - y[(i - 1)]) *
                  stan::math::log(((1 - m[(i - 1)]) + eps)))));}
        } else {
          current_statement__ = 41;
          lp_accum__.add(
            pert_dist_lpdf<propto__>(rho[(is_betabin - 1)], 0.0,
              priormuQ[(4 - 1)], 1.0, 4.0, pstream__));
          current_statement__ = 44;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 42;
            lp_accum__.add(
              ((((((binomial_coefficient_log(n[(i - 1)], y[(i - 1)]) +
                     stan::math::lgamma(((abet[(i - 1)] + y[(i - 1)]) + eps)))
                    +
                    stan::math::lgamma(
                      (((bbet[(i - 1)] + n[(i - 1)]) - y[(i - 1)]) + eps))) -
                   stan::math::lgamma(
                     (((abet[(i - 1)] + bbet[(i - 1)]) + n[(i - 1)]) + eps)))
                  - stan::math::lgamma((abet[(i - 1)] + eps))) -
                 stan::math::lgamma((bbet[(i - 1)] + eps))) +
                stan::math::lgamma(((abet[(i - 1)] + bbet[(i - 1)]) + eps))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_mQE4_Q_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double par1;
      par1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      par1 = in__.scalar();
      current_statement__ = 1;
      par1 = stan::math::lub_constrain(par1, 0, 1);
      double par2;
      par2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      par2 = in__.scalar();
      current_statement__ = 2;
      par2 = stan::math::lb_constrain(par2, 0);
      double par3;
      par3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      par3 = in__.scalar();
      std::vector<double> rho;
      rho = std::vector<double>(is_betabin, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_betabin; ++sym1__) {
        current_statement__ = 4;
        assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable rho");}
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      double b;
      b = std::numeric_limits<double>::quiet_NaN();
      
      double d;
      d = std::numeric_limits<double>::quiet_NaN();
      
      double k;
      k = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<double> m;
      m = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> abet;
      abet = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> bbet;
      bbet = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      double BMD;
      BMD = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(par1);
      vars__.emplace_back(par2);
      vars__.emplace_back(par3);
      for (int sym1__ = 1; sym1__ <= is_betabin; ++sym1__) {
        vars__.emplace_back(rho[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 13;
      BMD = par2;
      current_statement__ = 14;
      a = par1;
      current_statement__ = 15;
      d = stan::math::exp(par3);
      current_statement__ = 16;
      k = stan::math::log(par2);
      current_statement__ = 17;
      b = (-stan::math::log((1 - q)) /
            (stan::math::exp(k) +
              ((stan::math::exp(k) * (stan::math::exp(k) - 1)) /
                stan::math::exp(d))));
      current_statement__ = 25;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 23;
        if (logical_eq(x[(i - 1)], 0)) {
          current_statement__ = 21;
          assign(m, cons_list(index_uni(i), nil_index_list()), a,
            "assigning variable m");
        } else {
          current_statement__ = 20;
          if (logical_gt(x[(i - 1)], 0)) {
            current_statement__ = 18;
            assign(m, cons_list(index_uni(i), nil_index_list()),
              (a +
                ((1 - a) *
                  (1 -
                    stan::math::exp(
                      ((-b * x[(i - 1)]) -
                        (((b / stan::math::exp(d)) * x[(i - 1)]) *
                          (x[(i - 1)] - 1))))))), "assigning variable m");
          } 
        }}
      current_statement__ = 36;
      if (logical_eq(is_bin, 0)) {
        current_statement__ = 34;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 31;
          assign(abet, cons_list(index_uni(i), nil_index_list()),
            (m[(i - 1)] * ((1 / rho[(is_betabin - 1)]) - 1)),
            "assigning variable abet");
          current_statement__ = 32;
          assign(bbet, cons_list(index_uni(i), nil_index_list()),
            ((1.0 - m[(i - 1)]) * ((1 / rho[(is_betabin - 1)]) - 1)),
            "assigning variable bbet");}
      } else {
        current_statement__ = 29;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 26;
          assign(abet, cons_list(index_uni(i), nil_index_list()), 0.0,
            "assigning variable abet");
          current_statement__ = 27;
          assign(bbet, cons_list(index_uni(i), nil_index_list()), 0.0,
            "assigning variable bbet");}
      }
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "BMD", BMD, 0);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(a);
        vars__.emplace_back(b);
        vars__.emplace_back(d);
        vars__.emplace_back(k);
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(m[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(abet[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(bbet[(sym1__ - 1)]);}
        vars__.emplace_back(BMD);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double par1;
      par1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      par1 = context__.vals_r("par1")[(1 - 1)];
      double par1_free__;
      par1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      par1_free__ = stan::math::lub_free(par1, 0, 1);
      double par2;
      par2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      par2 = context__.vals_r("par2")[(1 - 1)];
      double par2_free__;
      par2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      par2_free__ = stan::math::lb_free(par2, 0);
      double par3;
      par3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      par3 = context__.vals_r("par3")[(1 - 1)];
      std::vector<double> rho;
      rho = std::vector<double>(is_betabin, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(rho, nil_index_list(), context__.vals_r("rho"),
        "assigning variable rho");
      vars__.emplace_back(par1_free__);
      vars__.emplace_back(par2_free__);
      vars__.emplace_back(par3);
      for (int sym1__ = 1; sym1__ <= is_betabin; ++sym1__) {
        vars__.emplace_back(rho[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("par1");
    names__.emplace_back("par2");
    names__.emplace_back("par3");
    names__.emplace_back("rho");
    names__.emplace_back("a");
    names__.emplace_back("b");
    names__.emplace_back("d");
    names__.emplace_back("k");
    names__.emplace_back("m");
    names__.emplace_back("abet");
    names__.emplace_back("bbet");
    names__.emplace_back("BMD");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(is_betabin)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "par1");
    param_names__.emplace_back(std::string() + "par2");
    param_names__.emplace_back(std::string() + "par3");
    for (int sym1__ = 1; sym1__ <= is_betabin; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "k");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "abet" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bbet" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "BMD");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "par1");
    param_names__.emplace_back(std::string() + "par2");
    param_names__.emplace_back(std::string() + "par3");
    for (int sym1__ = 1; sym1__ <= is_betabin; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "k");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "abet" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bbet" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "BMD");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"par1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" << is_betabin << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"abet\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"bbet\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"BMD\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"par1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" << is_betabin << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"abet\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"bbet\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"BMD\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_mQE4_Q_namespace::model_mQE4_Q;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mQE4_Q_namespace::profiles__;
}
#endif
#endif
