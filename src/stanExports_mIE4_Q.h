// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_mIE4_Q_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mIE4_Q");
    reader.add_event(103, 101, "end", "model_mIE4_Q");
    return reader;
}
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
pert_dist_lpdf(const T0__& theta,
                   const T1__& lb,
                   const T2__& md,
                   const T3__& ub,
                   const T4__& gama, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        local_scalar_t__ x1(DUMMY_VAR__);
        (void) x1;  // dummy to suppress unused var warning
        stan::math::initialize(x1, DUMMY_VAR__);
        stan::math::fill(x1, DUMMY_VAR__);
        current_statement_begin__ = 4;
        local_scalar_t__ x2(DUMMY_VAR__);
        (void) x2;  // dummy to suppress unused var warning
        stan::math::initialize(x2, DUMMY_VAR__);
        stan::math::fill(x2, DUMMY_VAR__);
        current_statement_begin__ = 5;
        local_scalar_t__ x3(DUMMY_VAR__);
        (void) x3;  // dummy to suppress unused var warning
        stan::math::initialize(x3, DUMMY_VAR__);
        stan::math::fill(x3, DUMMY_VAR__);
        current_statement_begin__ = 6;
        local_scalar_t__ x4(DUMMY_VAR__);
        (void) x4;  // dummy to suppress unused var warning
        stan::math::initialize(x4, DUMMY_VAR__);
        stan::math::fill(x4, DUMMY_VAR__);
        current_statement_begin__ = 7;
        local_scalar_t__ alpha(DUMMY_VAR__);
        (void) alpha;  // dummy to suppress unused var warning
        stan::math::initialize(alpha, DUMMY_VAR__);
        stan::math::fill(alpha, DUMMY_VAR__);
        current_statement_begin__ = 8;
        local_scalar_t__ beta(DUMMY_VAR__);
        (void) beta;  // dummy to suppress unused var warning
        stan::math::initialize(beta, DUMMY_VAR__);
        stan::math::fill(beta, DUMMY_VAR__);
        current_statement_begin__ = 10;
        stan::math::assign(alpha, (1 + ((gama * (md - lb)) / (ub - lb))));
        current_statement_begin__ = 11;
        stan::math::assign(beta, (1 + ((gama * (ub - md)) / (ub - lb))));
        current_statement_begin__ = 13;
        stan::math::assign(x1, ((alpha - 1) * stan::math::log((theta - lb))));
        current_statement_begin__ = 14;
        stan::math::assign(x2, ((beta - 1) * stan::math::log((ub - theta))));
        current_statement_begin__ = 15;
        stan::math::assign(x3, (((alpha + beta) - 1) * stan::math::log((ub - lb))));
        current_statement_begin__ = 16;
        stan::math::assign(x4, lbeta(alpha, beta));
        current_statement_begin__ = 17;
        return stan::math::promote_scalar<fun_return_scalar_t__>((((x1 + x2) - x3) - x4));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
pert_dist_lpdf(const T0__& theta,
                   const T1__& lb,
                   const T2__& md,
                   const T3__& ub,
                   const T4__& gama, std::ostream* pstream__) {
    return pert_dist_lpdf<false>(theta,lb,md,ub,gama, pstream__);
}
struct pert_dist_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& theta,
                   const T1__& lb,
                   const T2__& md,
                   const T3__& ub,
                   const T4__& gama, std::ostream* pstream__) const {
        return pert_dist_lpdf(theta, lb, md, ub, gama, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_mIE4_Q
  : public stan::model::model_base_crtp<model_mIE4_Q> {
private:
        int N;
        vector_d n;
        vector_d x;
        vector_d y;
        double q;
        vector_d priormu;
        std::vector<double> priorlb;
        std::vector<double> priorub;
        std::vector<double> priorgama;
        double eps;
        matrix_d priorSigma;
        double truncd;
        int is_bin;
        int is_betabin;
public:
    model_mIE4_Q(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_mIE4_Q(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_mIE4_Q_namespace::model_mIE4_Q";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 22;
            validate_non_negative_index("n", "N", N);
            context__.validate_dims("data initialization", "n", "vector_d", context__.to_vec(N));
            n = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("n");
            pos__ = 0;
            size_t n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < n_j_1_max__; ++j_1__) {
                n(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N));
            x = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                x(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 24;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "q", "double", context__.to_vec());
            q = double(0);
            vals_r__ = context__.vals_r("q");
            pos__ = 0;
            q = vals_r__[pos__++];
            current_statement_begin__ = 26;
            validate_non_negative_index("priormu", "4", 4);
            context__.validate_dims("data initialization", "priormu", "vector_d", context__.to_vec(4));
            priormu = Eigen::Matrix<double, Eigen::Dynamic, 1>(4);
            vals_r__ = context__.vals_r("priormu");
            pos__ = 0;
            size_t priormu_j_1_max__ = 4;
            for (size_t j_1__ = 0; j_1__ < priormu_j_1_max__; ++j_1__) {
                priormu(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("priorlb", "2", 2);
            context__.validate_dims("data initialization", "priorlb", "double", context__.to_vec(2));
            priorlb = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("priorlb");
            pos__ = 0;
            size_t priorlb_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < priorlb_k_0_max__; ++k_0__) {
                priorlb[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("priorub", "2", 2);
            context__.validate_dims("data initialization", "priorub", "double", context__.to_vec(2));
            priorub = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("priorub");
            pos__ = 0;
            size_t priorub_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < priorub_k_0_max__; ++k_0__) {
                priorub[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("priorgama", "2", 2);
            context__.validate_dims("data initialization", "priorgama", "double", context__.to_vec(2));
            priorgama = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("priorgama");
            pos__ = 0;
            size_t priorgama_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < priorgama_k_0_max__; ++k_0__) {
                priorgama[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "eps", "double", context__.to_vec());
            eps = double(0);
            vals_r__ = context__.vals_r("eps");
            pos__ = 0;
            eps = vals_r__[pos__++];
            current_statement_begin__ = 31;
            validate_non_negative_index("priorSigma", "3", 3);
            validate_non_negative_index("priorSigma", "3", 3);
            context__.validate_dims("data initialization", "priorSigma", "matrix_d", context__.to_vec(3,3));
            priorSigma = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(3, 3);
            vals_r__ = context__.vals_r("priorSigma");
            pos__ = 0;
            size_t priorSigma_j_2_max__ = 3;
            size_t priorSigma_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < priorSigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < priorSigma_j_1_max__; ++j_1__) {
                    priorSigma(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            stan::math::check_cov_matrix(function__, "priorSigma", priorSigma);
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "truncd", "double", context__.to_vec());
            truncd = double(0);
            vals_r__ = context__.vals_r("truncd");
            pos__ = 0;
            truncd = vals_r__[pos__++];
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "is_bin", "int", context__.to_vec());
            is_bin = int(0);
            vals_i__ = context__.vals_i("is_bin");
            pos__ = 0;
            is_bin = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_bin", is_bin, 0);
            check_less_or_equal(function__, "is_bin", is_bin, 1);
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "is_betabin", "int", context__.to_vec());
            is_betabin = int(0);
            vals_i__ = context__.vals_i("is_betabin");
            pos__ = 0;
            is_betabin = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_betabin", is_betabin, 0);
            check_less_or_equal(function__, "is_betabin", is_betabin, 1);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 38;
            num_params_r__ += 1;
            current_statement_begin__ = 39;
            num_params_r__ += 1;
            current_statement_begin__ = 40;
            num_params_r__ += 1;
            current_statement_begin__ = 41;
            validate_non_negative_index("rho", "is_betabin", is_betabin);
            num_params_r__ += (1 * is_betabin);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_mIE4_Q() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 38;
        if (!(context__.contains_r("par1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "par1", "double", context__.to_vec());
        double par1(0);
        par1 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, par1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("par2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "par2", "double", context__.to_vec());
        double par2(0);
        par2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, par2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("par3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "par3", "double", context__.to_vec());
        double par3(0);
        par3 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(par3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        validate_non_negative_index("rho", "is_betabin", is_betabin);
        context__.validate_dims("parameter initialization", "rho", "double", context__.to_vec(is_betabin));
        std::vector<double> rho(is_betabin, double(0));
        size_t rho_k_0_max__ = is_betabin;
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            rho[k_0__] = vals_r__[pos__++];
        }
        size_t rho_i_0_max__ = is_betabin;
        for (size_t i_0__ = 0; i_0__ < rho_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(rho[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 38;
            local_scalar_t__ par1;
            (void) par1;  // dummy to suppress unused var warning
            if (jacobian__)
                par1 = in__.scalar_lub_constrain(0, 1, lp__);
            else
                par1 = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 39;
            local_scalar_t__ par2;
            (void) par2;  // dummy to suppress unused var warning
            if (jacobian__)
                par2 = in__.scalar_lb_constrain(0, lp__);
            else
                par2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 40;
            local_scalar_t__ par3;
            (void) par3;  // dummy to suppress unused var warning
            if (jacobian__)
                par3 = in__.scalar_constrain(lp__);
            else
                par3 = in__.scalar_constrain();
            current_statement_begin__ = 41;
            std::vector<local_scalar_t__> rho;
            size_t rho_d_0_max__ = is_betabin;
            rho.reserve(rho_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < rho_d_0_max__; ++d_0__) {
                if (jacobian__)
                    rho.push_back(in__.scalar_constrain(lp__));
                else
                    rho.push_back(in__.scalar_constrain());
            }
            // transformed parameters
            current_statement_begin__ = 44;
            local_scalar_t__ a;
            (void) a;  // dummy to suppress unused var warning
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 45;
            local_scalar_t__ b;
            (void) b;  // dummy to suppress unused var warning
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 46;
            local_scalar_t__ d;
            (void) d;  // dummy to suppress unused var warning
            stan::math::initialize(d, DUMMY_VAR__);
            stan::math::fill(d, DUMMY_VAR__);
            current_statement_begin__ = 47;
            local_scalar_t__ k;
            (void) k;  // dummy to suppress unused var warning
            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k, DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("m", "N", N);
            std::vector<local_scalar_t__> m(N, local_scalar_t__(0));
            stan::math::initialize(m, DUMMY_VAR__);
            stan::math::fill(m, DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("abet", "N", N);
            std::vector<local_scalar_t__> abet(N, local_scalar_t__(0));
            stan::math::initialize(abet, DUMMY_VAR__);
            stan::math::fill(abet, DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("bbet", "N", N);
            std::vector<local_scalar_t__> bbet(N, local_scalar_t__(0));
            stan::math::initialize(bbet, DUMMY_VAR__);
            stan::math::fill(bbet, DUMMY_VAR__);
            current_statement_begin__ = 51;
            local_scalar_t__ BMD;
            (void) BMD;  // dummy to suppress unused var warning
            stan::math::initialize(BMD, DUMMY_VAR__);
            stan::math::fill(BMD, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 52;
            stan::math::assign(BMD, par2);
            current_statement_begin__ = 53;
            stan::math::assign(a, par1);
            current_statement_begin__ = 54;
            stan::math::assign(k, stan::math::log(par2));
            current_statement_begin__ = 55;
            stan::math::assign(d, stan::math::exp(par3));
            current_statement_begin__ = 56;
            stan::math::assign(b, (-(stan::math::exp((k * d))) * stan::math::log(q)));
            current_statement_begin__ = 58;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 59;
                if (as_bool(logical_eq(get_base1(x, i, "x", 1), 0))) {
                    current_statement_begin__ = 60;
                    stan::model::assign(m, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                a, 
                                "assigning variable m");
                } else if (as_bool(logical_gt(get_base1(x, i, "x", 1), 0))) {
                    current_statement_begin__ = 62;
                    stan::model::assign(m, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (a + ((1 - a) * stan::math::exp((-(b) * pow(get_base1(x, i, "x", 1), -(d)))))), 
                                "assigning variable m");
                }
            }
            current_statement_begin__ = 67;
            if (as_bool(logical_eq(is_bin, 0))) {
                current_statement_begin__ = 69;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 70;
                    stan::model::assign(abet, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(m, i, "m", 1) * ((1.0 / get_base1(rho, is_betabin, "rho", 1)) - 1.0)), 
                                "assigning variable abet");
                    current_statement_begin__ = 71;
                    stan::model::assign(bbet, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((1.0 - get_base1(m, i, "m", 1)) * ((1 / get_base1(rho, is_betabin, "rho", 1)) - 1)), 
                                "assigning variable bbet");
                }
            } else {
                current_statement_begin__ = 74;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 75;
                    stan::model::assign(abet, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0.0, 
                                "assigning variable abet");
                    current_statement_begin__ = 76;
                    stan::model::assign(bbet, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0.0, 
                                "assigning variable bbet");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 44;
            if (stan::math::is_uninitialized(a)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: a";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable a: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 45;
            if (stan::math::is_uninitialized(b)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 46;
            if (stan::math::is_uninitialized(d)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: d";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable d: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 47;
            if (stan::math::is_uninitialized(k)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: k";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable k: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 48;
            size_t m_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < m_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(m[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: m" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable m: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 49;
            size_t abet_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < abet_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(abet[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: abet" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable abet: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 50;
            size_t bbet_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < bbet_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(bbet[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: bbet" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable bbet: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 51;
            if (stan::math::is_uninitialized(BMD)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: BMD";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable BMD: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "BMD", BMD, 0);
            // model body
            current_statement_begin__ = 81;
            lp_accum__.add(pert_dist_lpdf<propto__>(par1, get_base1(priorlb, 1, "priorlb", 1), get_base1(priormu, 1, "priormu", 1), get_base1(priorub, 1, "priorub", 1), get_base1(priorgama, 1, "priorgama", 1), pstream__));
            current_statement_begin__ = 82;
            lp_accum__.add(pert_dist_lpdf<propto__>(par2, get_base1(priorlb, 2, "priorlb", 1), get_base1(priormu, 2, "priormu", 1), get_base1(priorub, 2, "priorub", 1), get_base1(priorgama, 2, "priorgama", 1), pstream__));
            current_statement_begin__ = 83;
            lp_accum__.add(normal_log<propto__>(par3, get_base1(priormu, 3, "priormu", 1), get_base1(priorSigma, 3, 3, "priorSigma", 1)));
            if (par3 > truncd) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_cdf_log(truncd, get_base1(priormu, 3, "priormu", 1), get_base1(priorSigma, 3, 3, "priorSigma", 1)));
            current_statement_begin__ = 85;
            if (as_bool(logical_eq(is_bin, 1))) {
                current_statement_begin__ = 87;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 88;
                    lp_accum__.add(((binomial_coefficient_log(get_base1(n, i, "n", 1), get_base1(y, i, "y", 1)) + (get_base1(y, i, "y", 1) * stan::math::log((get_base1(m, i, "m", 1) + eps)))) + ((get_base1(n, i, "n", 1) - get_base1(y, i, "y", 1)) * stan::math::log(((1 - get_base1(m, i, "m", 1)) + eps)))));
                }
            } else {
                current_statement_begin__ = 94;
                lp_accum__.add(pert_dist_lpdf<propto__>(get_base1(rho, is_betabin, "rho", 1), 0.0, get_base1(priormu, 4, "priormu", 1), 1.0, 4.0, pstream__));
                current_statement_begin__ = 95;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 96;
                    lp_accum__.add(((((((binomial_coefficient_log(get_base1(n, i, "n", 1), get_base1(y, i, "y", 1)) + stan::math::lgamma(((get_base1(abet, i, "abet", 1) + get_base1(y, i, "y", 1)) + eps))) + stan::math::lgamma((((get_base1(bbet, i, "bbet", 1) + get_base1(n, i, "n", 1)) - get_base1(y, i, "y", 1)) + eps))) - stan::math::lgamma((((get_base1(abet, i, "abet", 1) + get_base1(bbet, i, "bbet", 1)) + get_base1(n, i, "n", 1)) + eps))) - stan::math::lgamma((get_base1(abet, i, "abet", 1) + eps))) - stan::math::lgamma((get_base1(bbet, i, "bbet", 1) + eps))) + stan::math::lgamma(((get_base1(abet, i, "abet", 1) + get_base1(bbet, i, "bbet", 1)) + eps))));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("par1");
        names__.push_back("par2");
        names__.push_back("par3");
        names__.push_back("rho");
        names__.push_back("a");
        names__.push_back("b");
        names__.push_back("d");
        names__.push_back("k");
        names__.push_back("m");
        names__.push_back("abet");
        names__.push_back("bbet");
        names__.push_back("BMD");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_betabin);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mIE4_Q_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double par1 = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(par1);
        double par2 = in__.scalar_lb_constrain(0);
        vars__.push_back(par2);
        double par3 = in__.scalar_constrain();
        vars__.push_back(par3);
        std::vector<double> rho;
        size_t rho_d_0_max__ = is_betabin;
        rho.reserve(rho_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < rho_d_0_max__; ++d_0__) {
            rho.push_back(in__.scalar_constrain());
        }
        size_t rho_k_0_max__ = is_betabin;
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            vars__.push_back(rho[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 44;
            double a;
            (void) a;  // dummy to suppress unused var warning
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 45;
            double b;
            (void) b;  // dummy to suppress unused var warning
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 46;
            double d;
            (void) d;  // dummy to suppress unused var warning
            stan::math::initialize(d, DUMMY_VAR__);
            stan::math::fill(d, DUMMY_VAR__);
            current_statement_begin__ = 47;
            double k;
            (void) k;  // dummy to suppress unused var warning
            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k, DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("m", "N", N);
            std::vector<double> m(N, double(0));
            stan::math::initialize(m, DUMMY_VAR__);
            stan::math::fill(m, DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("abet", "N", N);
            std::vector<double> abet(N, double(0));
            stan::math::initialize(abet, DUMMY_VAR__);
            stan::math::fill(abet, DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("bbet", "N", N);
            std::vector<double> bbet(N, double(0));
            stan::math::initialize(bbet, DUMMY_VAR__);
            stan::math::fill(bbet, DUMMY_VAR__);
            current_statement_begin__ = 51;
            double BMD;
            (void) BMD;  // dummy to suppress unused var warning
            stan::math::initialize(BMD, DUMMY_VAR__);
            stan::math::fill(BMD, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 52;
            stan::math::assign(BMD, par2);
            current_statement_begin__ = 53;
            stan::math::assign(a, par1);
            current_statement_begin__ = 54;
            stan::math::assign(k, stan::math::log(par2));
            current_statement_begin__ = 55;
            stan::math::assign(d, stan::math::exp(par3));
            current_statement_begin__ = 56;
            stan::math::assign(b, (-(stan::math::exp((k * d))) * stan::math::log(q)));
            current_statement_begin__ = 58;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 59;
                if (as_bool(logical_eq(get_base1(x, i, "x", 1), 0))) {
                    current_statement_begin__ = 60;
                    stan::model::assign(m, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                a, 
                                "assigning variable m");
                } else if (as_bool(logical_gt(get_base1(x, i, "x", 1), 0))) {
                    current_statement_begin__ = 62;
                    stan::model::assign(m, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (a + ((1 - a) * stan::math::exp((-(b) * pow(get_base1(x, i, "x", 1), -(d)))))), 
                                "assigning variable m");
                }
            }
            current_statement_begin__ = 67;
            if (as_bool(logical_eq(is_bin, 0))) {
                current_statement_begin__ = 69;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 70;
                    stan::model::assign(abet, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(m, i, "m", 1) * ((1.0 / get_base1(rho, is_betabin, "rho", 1)) - 1.0)), 
                                "assigning variable abet");
                    current_statement_begin__ = 71;
                    stan::model::assign(bbet, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((1.0 - get_base1(m, i, "m", 1)) * ((1 / get_base1(rho, is_betabin, "rho", 1)) - 1)), 
                                "assigning variable bbet");
                }
            } else {
                current_statement_begin__ = 74;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 75;
                    stan::model::assign(abet, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0.0, 
                                "assigning variable abet");
                    current_statement_begin__ = 76;
                    stan::model::assign(bbet, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0.0, 
                                "assigning variable bbet");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 51;
            check_greater_or_equal(function__, "BMD", BMD, 0);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(a);
                vars__.push_back(b);
                vars__.push_back(d);
                vars__.push_back(k);
                size_t m_k_0_max__ = N;
                for (size_t k_0__ = 0; k_0__ < m_k_0_max__; ++k_0__) {
                    vars__.push_back(m[k_0__]);
                }
                size_t abet_k_0_max__ = N;
                for (size_t k_0__ = 0; k_0__ < abet_k_0_max__; ++k_0__) {
                    vars__.push_back(abet[k_0__]);
                }
                size_t bbet_k_0_max__ = N;
                for (size_t k_0__ = 0; k_0__ < bbet_k_0_max__; ++k_0__) {
                    vars__.push_back(bbet[k_0__]);
                }
                vars__.push_back(BMD);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_mIE4_Q";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "par1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "par2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "par3";
        param_names__.push_back(param_name_stream__.str());
        size_t rho_k_0_max__ = is_betabin;
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "b";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "d";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "k";
            param_names__.push_back(param_name_stream__.str());
            size_t m_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < m_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "m" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t abet_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < abet_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "abet" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t bbet_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < bbet_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "bbet" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "BMD";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "par1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "par2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "par3";
        param_names__.push_back(param_name_stream__.str());
        size_t rho_k_0_max__ = is_betabin;
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "b";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "d";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "k";
            param_names__.push_back(param_name_stream__.str());
            size_t m_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < m_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "m" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t abet_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < abet_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "abet" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t bbet_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < bbet_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "bbet" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "BMD";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_mIE4_Q_namespace::model_mIE4_Q stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
