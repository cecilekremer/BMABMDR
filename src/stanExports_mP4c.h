// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_mP4c_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mP4c");
    reader.add_event(239, 237, "end", "model_mP4c");
    return reader;
}
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
pert_dist_lpdf(const T0__& theta,
                   const T1__& alpha,
                   const T2__& beta,
                   const T3__& lb,
                   const T4__& ub, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        local_scalar_t__ x1(DUMMY_VAR__);
        (void) x1;  // dummy to suppress unused var warning
        stan::math::initialize(x1, DUMMY_VAR__);
        stan::math::fill(x1, DUMMY_VAR__);
        current_statement_begin__ = 4;
        local_scalar_t__ x2(DUMMY_VAR__);
        (void) x2;  // dummy to suppress unused var warning
        stan::math::initialize(x2, DUMMY_VAR__);
        stan::math::fill(x2, DUMMY_VAR__);
        current_statement_begin__ = 5;
        local_scalar_t__ x3(DUMMY_VAR__);
        (void) x3;  // dummy to suppress unused var warning
        stan::math::initialize(x3, DUMMY_VAR__);
        stan::math::fill(x3, DUMMY_VAR__);
        current_statement_begin__ = 6;
        local_scalar_t__ x4(DUMMY_VAR__);
        (void) x4;  // dummy to suppress unused var warning
        stan::math::initialize(x4, DUMMY_VAR__);
        stan::math::fill(x4, DUMMY_VAR__);
        current_statement_begin__ = 8;
        stan::math::assign(x1, ((alpha - 1) * stan::math::log((theta - lb))));
        current_statement_begin__ = 9;
        stan::math::assign(x2, ((beta - 1) * stan::math::log((ub - theta))));
        current_statement_begin__ = 10;
        stan::math::assign(x3, (((alpha + beta) - 1) * stan::math::log((ub - lb))));
        current_statement_begin__ = 11;
        stan::math::assign(x4, lbeta(alpha, beta));
        current_statement_begin__ = 12;
        return stan::math::promote_scalar<fun_return_scalar_t__>((((x1 + x2) - x3) - x4));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
pert_dist_lpdf(const T0__& theta,
                   const T1__& alpha,
                   const T2__& beta,
                   const T3__& lb,
                   const T4__& ub, std::ostream* pstream__) {
    return pert_dist_lpdf<false>(theta,alpha,beta,lb,ub, pstream__);
}
struct pert_dist_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& theta,
                   const T1__& alpha,
                   const T2__& beta,
                   const T3__& lb,
                   const T4__& ub, std::ostream* pstream__) const {
        return pert_dist_lpdf(theta, alpha, beta, lb, ub, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_mP4c
  : public stan::model::model_base_crtp<model_mP4c> {
private:
        int N;
        std::vector<int> n;
        int nc;
        int maxN;
        int maxNc;
        std::vector<std::vector<int> > nij;
        matrix_d y;
        vector_d x;
        double q;
        double shift;
        vector_d priormu;
        vector_d priorlb;
        vector_d priorub;
        vector_d shape1;
        vector_d shape2;
        matrix_d priorSigma;
        double truncd;
        int data_type;
        int is_increasing;
        double L;
        int is_decreasing;
        double U;
public:
    model_mP4c(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_mP4c(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_mP4c_namespace::model_mP4c";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 17;
            validate_non_negative_index("n", "N", N);
            context__.validate_dims("data initialization", "n", "int", context__.to_vec(N));
            n = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            size_t n_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < n_k_0_max__; ++k_0__) {
                n[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "nc", "int", context__.to_vec());
            nc = int(0);
            vals_i__ = context__.vals_i("nc");
            pos__ = 0;
            nc = vals_i__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "maxN", "int", context__.to_vec());
            maxN = int(0);
            vals_i__ = context__.vals_i("maxN");
            pos__ = 0;
            maxN = vals_i__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "maxNc", "int", context__.to_vec());
            maxNc = int(0);
            vals_i__ = context__.vals_i("maxNc");
            pos__ = 0;
            maxNc = vals_i__[pos__++];
            current_statement_begin__ = 21;
            validate_non_negative_index("nij", "N", N);
            validate_non_negative_index("nij", "maxNc", maxNc);
            context__.validate_dims("data initialization", "nij", "int", context__.to_vec(N,maxNc));
            nij = std::vector<std::vector<int> >(N, std::vector<int>(maxNc, int(0)));
            vals_i__ = context__.vals_i("nij");
            pos__ = 0;
            size_t nij_k_0_max__ = N;
            size_t nij_k_1_max__ = maxNc;
            for (size_t k_1__ = 0; k_1__ < nij_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < nij_k_0_max__; ++k_0__) {
                    nij[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("y", "nc", nc);
            validate_non_negative_index("y", "maxN", maxN);
            context__.validate_dims("data initialization", "y", "matrix_d", context__.to_vec(nc,maxN));
            y = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nc, maxN);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_2_max__ = maxN;
            size_t y_j_1_max__ = nc;
            for (size_t j_2__ = 0; j_2__ < y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                    y(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N));
            x = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                x(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "q", "double", context__.to_vec());
            q = double(0);
            vals_r__ = context__.vals_r("q");
            pos__ = 0;
            q = vals_r__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "shift", "double", context__.to_vec());
            shift = double(0);
            vals_r__ = context__.vals_r("shift");
            pos__ = 0;
            shift = vals_r__[pos__++];
            current_statement_begin__ = 26;
            validate_non_negative_index("priormu", "6", 6);
            context__.validate_dims("data initialization", "priormu", "vector_d", context__.to_vec(6));
            priormu = Eigen::Matrix<double, Eigen::Dynamic, 1>(6);
            vals_r__ = context__.vals_r("priormu");
            pos__ = 0;
            size_t priormu_j_1_max__ = 6;
            for (size_t j_1__ = 0; j_1__ < priormu_j_1_max__; ++j_1__) {
                priormu(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("priorlb", "6", 6);
            context__.validate_dims("data initialization", "priorlb", "vector_d", context__.to_vec(6));
            priorlb = Eigen::Matrix<double, Eigen::Dynamic, 1>(6);
            vals_r__ = context__.vals_r("priorlb");
            pos__ = 0;
            size_t priorlb_j_1_max__ = 6;
            for (size_t j_1__ = 0; j_1__ < priorlb_j_1_max__; ++j_1__) {
                priorlb(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("priorub", "6", 6);
            context__.validate_dims("data initialization", "priorub", "vector_d", context__.to_vec(6));
            priorub = Eigen::Matrix<double, Eigen::Dynamic, 1>(6);
            vals_r__ = context__.vals_r("priorub");
            pos__ = 0;
            size_t priorub_j_1_max__ = 6;
            for (size_t j_1__ = 0; j_1__ < priorub_j_1_max__; ++j_1__) {
                priorub(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("shape1", "6", 6);
            context__.validate_dims("data initialization", "shape1", "vector_d", context__.to_vec(6));
            shape1 = Eigen::Matrix<double, Eigen::Dynamic, 1>(6);
            vals_r__ = context__.vals_r("shape1");
            pos__ = 0;
            size_t shape1_j_1_max__ = 6;
            for (size_t j_1__ = 0; j_1__ < shape1_j_1_max__; ++j_1__) {
                shape1(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("shape2", "6", 6);
            context__.validate_dims("data initialization", "shape2", "vector_d", context__.to_vec(6));
            shape2 = Eigen::Matrix<double, Eigen::Dynamic, 1>(6);
            vals_r__ = context__.vals_r("shape2");
            pos__ = 0;
            size_t shape2_j_1_max__ = 6;
            for (size_t j_1__ = 0; j_1__ < shape2_j_1_max__; ++j_1__) {
                shape2(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("priorSigma", "5", 5);
            validate_non_negative_index("priorSigma", "5", 5);
            context__.validate_dims("data initialization", "priorSigma", "matrix_d", context__.to_vec(5,5));
            priorSigma = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(5, 5);
            vals_r__ = context__.vals_r("priorSigma");
            pos__ = 0;
            size_t priorSigma_j_2_max__ = 5;
            size_t priorSigma_j_1_max__ = 5;
            for (size_t j_2__ = 0; j_2__ < priorSigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < priorSigma_j_1_max__; ++j_1__) {
                    priorSigma(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            stan::math::check_cov_matrix(function__, "priorSigma", priorSigma);
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "truncd", "double", context__.to_vec());
            truncd = double(0);
            vals_r__ = context__.vals_r("truncd");
            pos__ = 0;
            truncd = vals_r__[pos__++];
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "data_type", "int", context__.to_vec());
            data_type = int(0);
            vals_i__ = context__.vals_i("data_type");
            pos__ = 0;
            data_type = vals_i__[pos__++];
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "is_increasing", "int", context__.to_vec());
            is_increasing = int(0);
            vals_i__ = context__.vals_i("is_increasing");
            pos__ = 0;
            is_increasing = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_increasing", is_increasing, 0);
            check_less_or_equal(function__, "is_increasing", is_increasing, 1);
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "L", "double", context__.to_vec());
            L = double(0);
            vals_r__ = context__.vals_r("L");
            pos__ = 0;
            L = vals_r__[pos__++];
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "is_decreasing", "int", context__.to_vec());
            is_decreasing = int(0);
            vals_i__ = context__.vals_i("is_decreasing");
            pos__ = 0;
            is_decreasing = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_decreasing", is_decreasing, 0);
            check_less_or_equal(function__, "is_decreasing", is_decreasing, 1);
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "U", "double", context__.to_vec());
            U = double(0);
            vals_r__ = context__.vals_r("U");
            pos__ = 0;
            U = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 40;
            num_params_r__ += 1;
            current_statement_begin__ = 41;
            num_params_r__ += 1;
            current_statement_begin__ = 42;
            validate_non_negative_index("pars3i", "is_increasing", is_increasing);
            num_params_r__ += (1 * is_increasing);
            current_statement_begin__ = 43;
            validate_non_negative_index("pars3d", "is_decreasing", is_decreasing);
            num_params_r__ += (1 * is_decreasing);
            current_statement_begin__ = 44;
            num_params_r__ += 1;
            current_statement_begin__ = 45;
            num_params_r__ += 1;
            current_statement_begin__ = 46;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_mP4c() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 40;
        if (!(context__.contains_r("par1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "par1", "double", context__.to_vec());
        double par1(0);
        par1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, par1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("par2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "par2", "double", context__.to_vec());
        double par2(0);
        par2 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, par2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("pars3i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pars3i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pars3i");
        pos__ = 0U;
        validate_non_negative_index("pars3i", "is_increasing", is_increasing);
        context__.validate_dims("parameter initialization", "pars3i", "double", context__.to_vec(is_increasing));
        std::vector<double> pars3i(is_increasing, double(0));
        size_t pars3i_k_0_max__ = is_increasing;
        for (size_t k_0__ = 0; k_0__ < pars3i_k_0_max__; ++k_0__) {
            pars3i[k_0__] = vals_r__[pos__++];
        }
        size_t pars3i_i_0_max__ = is_increasing;
        for (size_t i_0__ = 0; i_0__ < pars3i_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, pars3i[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pars3i: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("pars3d")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pars3d missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pars3d");
        pos__ = 0U;
        validate_non_negative_index("pars3d", "is_decreasing", is_decreasing);
        context__.validate_dims("parameter initialization", "pars3d", "double", context__.to_vec(is_decreasing));
        std::vector<double> pars3d(is_decreasing, double(0));
        size_t pars3d_k_0_max__ = is_decreasing;
        for (size_t k_0__ = 0; k_0__ < pars3d_k_0_max__; ++k_0__) {
            pars3d[k_0__] = vals_r__[pos__++];
        }
        size_t pars3d_i_0_max__ = is_decreasing;
        for (size_t i_0__ = 0; i_0__ < pars3d_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, pars3d[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pars3d: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("par4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par4");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "par4", "double", context__.to_vec());
        double par4(0);
        par4 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(par4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par4: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("par5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par5");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "par5", "double", context__.to_vec());
        double par5(0);
        par5 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(par5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par5: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("par6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable par6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("par6");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "par6", "double", context__.to_vec());
        double par6(0);
        par6 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(par6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable par6: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 40;
            local_scalar_t__ par1;
            (void) par1;  // dummy to suppress unused var warning
            if (jacobian__)
                par1 = in__.scalar_lb_constrain(0, lp__);
            else
                par1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 41;
            local_scalar_t__ par2;
            (void) par2;  // dummy to suppress unused var warning
            if (jacobian__)
                par2 = in__.scalar_lub_constrain(0, 1, lp__);
            else
                par2 = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 42;
            std::vector<local_scalar_t__> pars3i;
            size_t pars3i_d_0_max__ = is_increasing;
            pars3i.reserve(pars3i_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < pars3i_d_0_max__; ++d_0__) {
                if (jacobian__)
                    pars3i.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    pars3i.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 43;
            std::vector<local_scalar_t__> pars3d;
            size_t pars3d_d_0_max__ = is_decreasing;
            pars3d.reserve(pars3d_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < pars3d_d_0_max__; ++d_0__) {
                if (jacobian__)
                    pars3d.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    pars3d.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 44;
            local_scalar_t__ par4;
            (void) par4;  // dummy to suppress unused var warning
            if (jacobian__)
                par4 = in__.scalar_constrain(lp__);
            else
                par4 = in__.scalar_constrain();
            current_statement_begin__ = 45;
            local_scalar_t__ par5;
            (void) par5;  // dummy to suppress unused var warning
            if (jacobian__)
                par5 = in__.scalar_constrain(lp__);
            else
                par5 = in__.scalar_constrain();
            current_statement_begin__ = 46;
            local_scalar_t__ par6;
            (void) par6;  // dummy to suppress unused var warning
            if (jacobian__)
                par6 = in__.scalar_constrain(lp__);
            else
                par6 = in__.scalar_constrain();
            // transformed parameters
            current_statement_begin__ = 50;
            local_scalar_t__ b;
            (void) b;  // dummy to suppress unused var warning
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 51;
            local_scalar_t__ a;
            (void) a;  // dummy to suppress unused var warning
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 52;
            local_scalar_t__ c;
            (void) c;  // dummy to suppress unused var warning
            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c, DUMMY_VAR__);
            current_statement_begin__ = 53;
            local_scalar_t__ par3;
            (void) par3;  // dummy to suppress unused var warning
            stan::math::initialize(par3, DUMMY_VAR__);
            stan::math::fill(par3, DUMMY_VAR__);
            current_statement_begin__ = 54;
            local_scalar_t__ d;
            (void) d;  // dummy to suppress unused var warning
            stan::math::initialize(d, DUMMY_VAR__);
            stan::math::fill(d, DUMMY_VAR__);
            current_statement_begin__ = 55;
            local_scalar_t__ k;
            (void) k;  // dummy to suppress unused var warning
            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k, DUMMY_VAR__);
            current_statement_begin__ = 56;
            local_scalar_t__ mu_inf;
            (void) mu_inf;  // dummy to suppress unused var warning
            stan::math::initialize(mu_inf, DUMMY_VAR__);
            stan::math::fill(mu_inf, DUMMY_VAR__);
            current_statement_begin__ = 57;
            local_scalar_t__ invsigma2;
            (void) invsigma2;  // dummy to suppress unused var warning
            stan::math::initialize(invsigma2, DUMMY_VAR__);
            stan::math::fill(invsigma2, DUMMY_VAR__);
            current_statement_begin__ = 58;
            local_scalar_t__ mu_0;
            (void) mu_0;  // dummy to suppress unused var warning
            stan::math::initialize(mu_0, DUMMY_VAR__);
            stan::math::fill(mu_0, DUMMY_VAR__);
            current_statement_begin__ = 59;
            local_scalar_t__ rho_cluster;
            (void) rho_cluster;  // dummy to suppress unused var warning
            stan::math::initialize(rho_cluster, DUMMY_VAR__);
            stan::math::fill(rho_cluster, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 61;
            stan::math::assign(rho_cluster, par6);
            current_statement_begin__ = 63;
            stan::math::assign(mu_0, par1);
            current_statement_begin__ = 65;
            if (as_bool(logical_eq(is_increasing, 1))) {
                current_statement_begin__ = 66;
                stan::math::assign(par3, (L + get_base1(pars3i, 1, "pars3i", 1)));
            } else if (as_bool(logical_eq(is_decreasing, 1))) {
                current_statement_begin__ = 68;
                stan::math::assign(par3, (L + ((U - L) * get_base1(pars3d, 1, "pars3d", 1))));
            }
            current_statement_begin__ = 71;
            stan::math::assign(mu_inf, (par1 * par3));
            current_statement_begin__ = 73;
            if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 2))))) {
                current_statement_begin__ = 74;
                if (as_bool(logical_eq(data_type, 1))) {
                    current_statement_begin__ = 75;
                    stan::math::assign(a, mu_inf);
                } else if (as_bool(logical_eq(data_type, 2))) {
                    current_statement_begin__ = 77;
                    stan::math::assign(a, (stan::math::log(mu_inf) - shift));
                }
            } else if (as_bool((primitive_value(logical_eq(data_type, 3)) || primitive_value(logical_eq(data_type, 4))))) {
                current_statement_begin__ = 80;
                if (as_bool(logical_eq(data_type, 3))) {
                    current_statement_begin__ = 81;
                    stan::math::assign(a, mu_0);
                } else if (as_bool(logical_eq(data_type, 4))) {
                    current_statement_begin__ = 83;
                    stan::math::assign(a, (stan::math::log(mu_0) - shift));
                }
            }
            current_statement_begin__ = 87;
            if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 2))))) {
                current_statement_begin__ = 88;
                if (as_bool(logical_eq(data_type, 1))) {
                    current_statement_begin__ = 89;
                    stan::math::assign(c, inv_Phi((mu_0 / mu_inf)));
                } else if (as_bool(logical_eq(data_type, 2))) {
                    current_statement_begin__ = 91;
                    stan::math::assign(c, inv_Phi(((stan::math::log(mu_0) - shift) / (stan::math::log(mu_inf) - shift))));
                }
            } else if (as_bool((primitive_value(logical_eq(data_type, 3)) || primitive_value(logical_eq(data_type, 4))))) {
                current_statement_begin__ = 94;
                if (as_bool(logical_eq(data_type, 3))) {
                    current_statement_begin__ = 95;
                    stan::math::assign(c, inv_Phi((mu_inf / mu_0)));
                } else if (as_bool(logical_eq(data_type, 4))) {
                    current_statement_begin__ = 97;
                    stan::math::assign(c, inv_Phi(((stan::math::log(mu_inf) - shift) / (stan::math::log(mu_0) - shift))));
                }
            }
            current_statement_begin__ = 101;
            stan::math::assign(d, stan::math::exp(par4));
            current_statement_begin__ = 102;
            stan::math::assign(k, stan::math::log(par2));
            current_statement_begin__ = 104;
            if (as_bool(logical_eq(data_type, 1))) {
                current_statement_begin__ = 105;
                stan::math::assign(b, (stan::math::exp((-(k) * d)) * (inv_Phi((Phi(c) * (1 + q))) - c)));
            } else if (as_bool(logical_eq(data_type, 2))) {
                current_statement_begin__ = 107;
                stan::math::assign(b, (stan::math::exp((-(k) * d)) * (inv_Phi((Phi(c) + (stan::math::log((1 + q)) / a))) - c)));
            } else if (as_bool(logical_eq(data_type, 3))) {
                current_statement_begin__ = 109;
                stan::math::assign(b, (stan::math::exp((-(k) * d)) * (inv_Phi((Phi(c) + q)) - c)));
            } else if (as_bool(logical_eq(data_type, 4))) {
                current_statement_begin__ = 111;
                stan::math::assign(b, (stan::math::exp((-(k) * d)) * (inv_Phi((Phi(c) - (stan::math::log((1 - q)) / a))) - c)));
            }
            current_statement_begin__ = 114;
            stan::math::assign(invsigma2, stan::math::exp(par5));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 50;
            if (stan::math::is_uninitialized(b)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 51;
            if (stan::math::is_uninitialized(a)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: a";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable a: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 52;
            if (stan::math::is_uninitialized(c)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: c";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable c: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 53;
            if (stan::math::is_uninitialized(par3)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: par3";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable par3: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 54;
            if (stan::math::is_uninitialized(d)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: d";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable d: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 55;
            if (stan::math::is_uninitialized(k)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: k";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable k: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 56;
            if (stan::math::is_uninitialized(mu_inf)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu_inf";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 57;
            if (stan::math::is_uninitialized(invsigma2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: invsigma2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable invsigma2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 58;
            if (stan::math::is_uninitialized(mu_0)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu_0";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_0: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 59;
            if (stan::math::is_uninitialized(rho_cluster)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: rho_cluster";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable rho_cluster: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            current_statement_begin__ = 118;
            lp_accum__.add(pert_dist_lpdf<propto__>(par1, get_base1(shape1, 1, "shape1", 1), get_base1(shape2, 1, "shape2", 1), get_base1(priorlb, 1, "priorlb", 1), get_base1(priorub, 1, "priorub", 1), pstream__));
            current_statement_begin__ = 119;
            lp_accum__.add(pert_dist_lpdf<propto__>(par2, get_base1(shape1, 2, "shape1", 1), get_base1(shape2, 2, "shape2", 1), get_base1(priorlb, 2, "priorlb", 1), get_base1(priorub, 2, "priorub", 1), pstream__));
            current_statement_begin__ = 120;
            lp_accum__.add(pert_dist_lpdf<propto__>(par3, get_base1(shape1, 3, "shape1", 1), get_base1(shape2, 3, "shape2", 1), get_base1(priorlb, 3, "priorlb", 1), get_base1(priorub, 3, "priorub", 1), pstream__));
            current_statement_begin__ = 121;
            lp_accum__.add(normal_log<propto__>(par4, get_base1(priormu, 4, "priormu", 1), get_base1(priorSigma, 4, 4, "priorSigma", 1)));
            if (par4 > truncd) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_cdf_log(truncd, get_base1(priormu, 4, "priormu", 1), get_base1(priorSigma, 4, 4, "priorSigma", 1)));
            current_statement_begin__ = 122;
            lp_accum__.add(normal_log<propto__>(par5, get_base1(priormu, 5, "priormu", 1), get_base1(priorSigma, 5, 5, "priorSigma", 1)));
            current_statement_begin__ = 123;
            lp_accum__.add(pert_dist_lpdf<propto__>(par6, get_base1(shape1, 6, "shape1", 1), get_base1(shape2, 6, "shape2", 1), get_base1(priorlb, 6, "priorlb", 1), get_base1(priorub, 6, "priorub", 1), pstream__));
            current_statement_begin__ = 126;
            if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 3))))) {
                {
                current_statement_begin__ = 128;
                int cnt(0);
                (void) cnt;  // dummy to suppress unused var warning
                stan::math::fill(cnt, std::numeric_limits<int>::min());
                current_statement_begin__ = 130;
                stan::math::assign(cnt, 1);
                current_statement_begin__ = 133;
                for (int i = 1; i <= N; ++i) {
                    {
                    current_statement_begin__ = 135;
                    int nl(0);
                    (void) nl;  // dummy to suppress unused var warning
                    stan::math::fill(nl, std::numeric_limits<int>::min());
                    current_statement_begin__ = 136;
                    local_scalar_t__ mx(DUMMY_VAR__);
                    (void) mx;  // dummy to suppress unused var warning
                    stan::math::initialize(mx, DUMMY_VAR__);
                    stan::math::fill(mx, DUMMY_VAR__);
                    current_statement_begin__ = 138;
                    if (as_bool(logical_eq(data_type, 1))) {
                        current_statement_begin__ = 139;
                        stan::math::assign(mx, (a * Phi((c + (b * pow(get_base1(x, i, "x", 1), d))))));
                    } else if (as_bool(logical_eq(data_type, 3))) {
                        current_statement_begin__ = 141;
                        stan::math::assign(mx, ((a * (1 + Phi(c))) - (a * Phi((c + (b * pow(get_base1(x, i, "x", 1), d)))))));
                    }
                    current_statement_begin__ = 144;
                    stan::math::assign(nl, get_base1(n, i, "n", 1));
                    current_statement_begin__ = 146;
                    for (int j = 1; j <= nl; ++j) {
                        {
                        current_statement_begin__ = 148;
                        int lt(0);
                        (void) lt;  // dummy to suppress unused var warning
                        stan::math::fill(lt, std::numeric_limits<int>::min());
                        stan::math::assign(lt,get_base1(get_base1(nij, i, "nij", 1), j, "nij", 2));
                        current_statement_begin__ = 150;
                        validate_non_negative_index("resp", "lt", lt);
                        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> resp(lt);
                        stan::math::initialize(resp, DUMMY_VAR__);
                        stan::math::fill(resp, DUMMY_VAR__);
                        current_statement_begin__ = 151;
                        validate_non_negative_index("m", "lt", lt);
                        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> m(lt);
                        stan::math::initialize(m, DUMMY_VAR__);
                        stan::math::fill(m, DUMMY_VAR__);
                        current_statement_begin__ = 152;
                        validate_non_negative_index("P", "lt", lt);
                        validate_non_negative_index("P", "lt", lt);
                        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> P(lt, lt);
                        stan::math::initialize(P, DUMMY_VAR__);
                        stan::math::fill(P, DUMMY_VAR__);
                        current_statement_begin__ = 153;
                        validate_non_negative_index("Sigma", "lt", lt);
                        validate_non_negative_index("Sigma", "lt", lt);
                        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Sigma(lt, lt);
                        stan::math::initialize(Sigma, DUMMY_VAR__);
                        stan::math::fill(Sigma, DUMMY_VAR__);
                        current_statement_begin__ = 155;
                        stan::math::assign(resp, stan::model::rvalue(y, stan::model::cons_list(stan::model::index_uni(cnt), stan::model::cons_list(stan::model::index_min_max(1, lt), stan::model::nil_index_list())), "y"));
                        current_statement_begin__ = 157;
                        stan::math::assign(m, rep_row_vector(mx, lt));
                        current_statement_begin__ = 159;
                        for (int id1 = 1; id1 <= lt; ++id1) {
                            current_statement_begin__ = 160;
                            for (int id2 = 1; id2 <= lt; ++id2) {
                                current_statement_begin__ = 161;
                                if (as_bool(logical_eq(id1, id2))) {
                                    current_statement_begin__ = 162;
                                    stan::model::assign(P, 
                                                stan::model::cons_list(stan::model::index_uni(id1), stan::model::cons_list(stan::model::index_uni(id2), stan::model::nil_index_list())), 
                                                1, 
                                                "assigning variable P");
                                } else {
                                    current_statement_begin__ = 164;
                                    stan::model::assign(P, 
                                                stan::model::cons_list(stan::model::index_uni(id1), stan::model::cons_list(stan::model::index_uni(id2), stan::model::nil_index_list())), 
                                                rho_cluster, 
                                                "assigning variable P");
                                }
                            }
                        }
                        current_statement_begin__ = 169;
                        stan::math::assign(Sigma, multiply((1 / invsigma2), P));
                        current_statement_begin__ = 171;
                        lp_accum__.add(multi_normal_log(resp, m, Sigma));
                        current_statement_begin__ = 174;
                        stan::math::assign(cnt, (cnt + 1));
                        }
                    }
                    }
                }
                }
            } else if (as_bool((primitive_value(logical_eq(data_type, 2)) || primitive_value(logical_eq(data_type, 4))))) {
                {
                current_statement_begin__ = 183;
                int cnt(0);
                (void) cnt;  // dummy to suppress unused var warning
                stan::math::fill(cnt, std::numeric_limits<int>::min());
                current_statement_begin__ = 185;
                stan::math::assign(cnt, 1);
                current_statement_begin__ = 188;
                for (int i = 1; i <= N; ++i) {
                    {
                    current_statement_begin__ = 190;
                    int nl(0);
                    (void) nl;  // dummy to suppress unused var warning
                    stan::math::fill(nl, std::numeric_limits<int>::min());
                    current_statement_begin__ = 191;
                    local_scalar_t__ mx(DUMMY_VAR__);
                    (void) mx;  // dummy to suppress unused var warning
                    stan::math::initialize(mx, DUMMY_VAR__);
                    stan::math::fill(mx, DUMMY_VAR__);
                    current_statement_begin__ = 193;
                    if (as_bool(logical_eq(data_type, 2))) {
                        current_statement_begin__ = 194;
                        stan::math::assign(mx, (a * Phi((c + (b * pow(get_base1(x, i, "x", 1), d))))));
                    } else if (as_bool(logical_eq(data_type, 4))) {
                        current_statement_begin__ = 196;
                        stan::math::assign(mx, ((a * (1 + Phi(c))) - (a * Phi((c + (b * pow(get_base1(x, i, "x", 1), d)))))));
                    }
                    current_statement_begin__ = 199;
                    stan::math::assign(nl, get_base1(n, i, "n", 1));
                    current_statement_begin__ = 201;
                    for (int j = 1; j <= nl; ++j) {
                        {
                        current_statement_begin__ = 203;
                        int lt(0);
                        (void) lt;  // dummy to suppress unused var warning
                        stan::math::fill(lt, std::numeric_limits<int>::min());
                        stan::math::assign(lt,get_base1(get_base1(nij, i, "nij", 1), j, "nij", 2));
                        current_statement_begin__ = 205;
                        validate_non_negative_index("resp", "lt", lt);
                        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> resp(lt);
                        stan::math::initialize(resp, DUMMY_VAR__);
                        stan::math::fill(resp, DUMMY_VAR__);
                        current_statement_begin__ = 206;
                        validate_non_negative_index("m", "lt", lt);
                        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> m(lt);
                        stan::math::initialize(m, DUMMY_VAR__);
                        stan::math::fill(m, DUMMY_VAR__);
                        current_statement_begin__ = 207;
                        validate_non_negative_index("P", "lt", lt);
                        validate_non_negative_index("P", "lt", lt);
                        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> P(lt, lt);
                        stan::math::initialize(P, DUMMY_VAR__);
                        stan::math::fill(P, DUMMY_VAR__);
                        current_statement_begin__ = 208;
                        validate_non_negative_index("Sigma", "lt", lt);
                        validate_non_negative_index("Sigma", "lt", lt);
                        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Sigma(lt, lt);
                        stan::math::initialize(Sigma, DUMMY_VAR__);
                        stan::math::fill(Sigma, DUMMY_VAR__);
                        current_statement_begin__ = 210;
                        stan::math::assign(resp, stan::model::rvalue(y, stan::model::cons_list(stan::model::index_uni(cnt), stan::model::cons_list(stan::model::index_min_max(1, lt), stan::model::nil_index_list())), "y"));
                        current_statement_begin__ = 212;
                        stan::math::assign(m, rep_row_vector(mx, lt));
                        current_statement_begin__ = 214;
                        for (int id1 = 1; id1 <= lt; ++id1) {
                            current_statement_begin__ = 215;
                            for (int id2 = 1; id2 <= lt; ++id2) {
                                current_statement_begin__ = 216;
                                if (as_bool(logical_eq(id1, id2))) {
                                    current_statement_begin__ = 217;
                                    stan::model::assign(P, 
                                                stan::model::cons_list(stan::model::index_uni(id1), stan::model::cons_list(stan::model::index_uni(id2), stan::model::nil_index_list())), 
                                                1, 
                                                "assigning variable P");
                                } else {
                                    current_statement_begin__ = 219;
                                    stan::model::assign(P, 
                                                stan::model::cons_list(stan::model::index_uni(id1), stan::model::cons_list(stan::model::index_uni(id2), stan::model::nil_index_list())), 
                                                rho_cluster, 
                                                "assigning variable P");
                                }
                            }
                        }
                        current_statement_begin__ = 224;
                        stan::math::assign(Sigma, multiply((1 / invsigma2), P));
                        current_statement_begin__ = 226;
                        lp_accum__.add(multi_normal_log(resp, m, Sigma));
                        current_statement_begin__ = 228;
                        lp_accum__.add(-(sum(resp)));
                        current_statement_begin__ = 230;
                        stan::math::assign(cnt, (cnt + 1));
                        }
                    }
                    }
                }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("par1");
        names__.push_back("par2");
        names__.push_back("pars3i");
        names__.push_back("pars3d");
        names__.push_back("par4");
        names__.push_back("par5");
        names__.push_back("par6");
        names__.push_back("b");
        names__.push_back("a");
        names__.push_back("c");
        names__.push_back("par3");
        names__.push_back("d");
        names__.push_back("k");
        names__.push_back("mu_inf");
        names__.push_back("invsigma2");
        names__.push_back("mu_0");
        names__.push_back("rho_cluster");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_increasing);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_decreasing);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mP4c_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double par1 = in__.scalar_lb_constrain(0);
        vars__.push_back(par1);
        double par2 = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(par2);
        std::vector<double> pars3i;
        size_t pars3i_d_0_max__ = is_increasing;
        pars3i.reserve(pars3i_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < pars3i_d_0_max__; ++d_0__) {
            pars3i.push_back(in__.scalar_lb_constrain(0));
        }
        size_t pars3i_k_0_max__ = is_increasing;
        for (size_t k_0__ = 0; k_0__ < pars3i_k_0_max__; ++k_0__) {
            vars__.push_back(pars3i[k_0__]);
        }
        std::vector<double> pars3d;
        size_t pars3d_d_0_max__ = is_decreasing;
        pars3d.reserve(pars3d_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < pars3d_d_0_max__; ++d_0__) {
            pars3d.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t pars3d_k_0_max__ = is_decreasing;
        for (size_t k_0__ = 0; k_0__ < pars3d_k_0_max__; ++k_0__) {
            vars__.push_back(pars3d[k_0__]);
        }
        double par4 = in__.scalar_constrain();
        vars__.push_back(par4);
        double par5 = in__.scalar_constrain();
        vars__.push_back(par5);
        double par6 = in__.scalar_constrain();
        vars__.push_back(par6);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 50;
            double b;
            (void) b;  // dummy to suppress unused var warning
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 51;
            double a;
            (void) a;  // dummy to suppress unused var warning
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 52;
            double c;
            (void) c;  // dummy to suppress unused var warning
            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c, DUMMY_VAR__);
            current_statement_begin__ = 53;
            double par3;
            (void) par3;  // dummy to suppress unused var warning
            stan::math::initialize(par3, DUMMY_VAR__);
            stan::math::fill(par3, DUMMY_VAR__);
            current_statement_begin__ = 54;
            double d;
            (void) d;  // dummy to suppress unused var warning
            stan::math::initialize(d, DUMMY_VAR__);
            stan::math::fill(d, DUMMY_VAR__);
            current_statement_begin__ = 55;
            double k;
            (void) k;  // dummy to suppress unused var warning
            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k, DUMMY_VAR__);
            current_statement_begin__ = 56;
            double mu_inf;
            (void) mu_inf;  // dummy to suppress unused var warning
            stan::math::initialize(mu_inf, DUMMY_VAR__);
            stan::math::fill(mu_inf, DUMMY_VAR__);
            current_statement_begin__ = 57;
            double invsigma2;
            (void) invsigma2;  // dummy to suppress unused var warning
            stan::math::initialize(invsigma2, DUMMY_VAR__);
            stan::math::fill(invsigma2, DUMMY_VAR__);
            current_statement_begin__ = 58;
            double mu_0;
            (void) mu_0;  // dummy to suppress unused var warning
            stan::math::initialize(mu_0, DUMMY_VAR__);
            stan::math::fill(mu_0, DUMMY_VAR__);
            current_statement_begin__ = 59;
            double rho_cluster;
            (void) rho_cluster;  // dummy to suppress unused var warning
            stan::math::initialize(rho_cluster, DUMMY_VAR__);
            stan::math::fill(rho_cluster, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 61;
            stan::math::assign(rho_cluster, par6);
            current_statement_begin__ = 63;
            stan::math::assign(mu_0, par1);
            current_statement_begin__ = 65;
            if (as_bool(logical_eq(is_increasing, 1))) {
                current_statement_begin__ = 66;
                stan::math::assign(par3, (L + get_base1(pars3i, 1, "pars3i", 1)));
            } else if (as_bool(logical_eq(is_decreasing, 1))) {
                current_statement_begin__ = 68;
                stan::math::assign(par3, (L + ((U - L) * get_base1(pars3d, 1, "pars3d", 1))));
            }
            current_statement_begin__ = 71;
            stan::math::assign(mu_inf, (par1 * par3));
            current_statement_begin__ = 73;
            if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 2))))) {
                current_statement_begin__ = 74;
                if (as_bool(logical_eq(data_type, 1))) {
                    current_statement_begin__ = 75;
                    stan::math::assign(a, mu_inf);
                } else if (as_bool(logical_eq(data_type, 2))) {
                    current_statement_begin__ = 77;
                    stan::math::assign(a, (stan::math::log(mu_inf) - shift));
                }
            } else if (as_bool((primitive_value(logical_eq(data_type, 3)) || primitive_value(logical_eq(data_type, 4))))) {
                current_statement_begin__ = 80;
                if (as_bool(logical_eq(data_type, 3))) {
                    current_statement_begin__ = 81;
                    stan::math::assign(a, mu_0);
                } else if (as_bool(logical_eq(data_type, 4))) {
                    current_statement_begin__ = 83;
                    stan::math::assign(a, (stan::math::log(mu_0) - shift));
                }
            }
            current_statement_begin__ = 87;
            if (as_bool((primitive_value(logical_eq(data_type, 1)) || primitive_value(logical_eq(data_type, 2))))) {
                current_statement_begin__ = 88;
                if (as_bool(logical_eq(data_type, 1))) {
                    current_statement_begin__ = 89;
                    stan::math::assign(c, inv_Phi((mu_0 / mu_inf)));
                } else if (as_bool(logical_eq(data_type, 2))) {
                    current_statement_begin__ = 91;
                    stan::math::assign(c, inv_Phi(((stan::math::log(mu_0) - shift) / (stan::math::log(mu_inf) - shift))));
                }
            } else if (as_bool((primitive_value(logical_eq(data_type, 3)) || primitive_value(logical_eq(data_type, 4))))) {
                current_statement_begin__ = 94;
                if (as_bool(logical_eq(data_type, 3))) {
                    current_statement_begin__ = 95;
                    stan::math::assign(c, inv_Phi((mu_inf / mu_0)));
                } else if (as_bool(logical_eq(data_type, 4))) {
                    current_statement_begin__ = 97;
                    stan::math::assign(c, inv_Phi(((stan::math::log(mu_inf) - shift) / (stan::math::log(mu_0) - shift))));
                }
            }
            current_statement_begin__ = 101;
            stan::math::assign(d, stan::math::exp(par4));
            current_statement_begin__ = 102;
            stan::math::assign(k, stan::math::log(par2));
            current_statement_begin__ = 104;
            if (as_bool(logical_eq(data_type, 1))) {
                current_statement_begin__ = 105;
                stan::math::assign(b, (stan::math::exp((-(k) * d)) * (inv_Phi((Phi(c) * (1 + q))) - c)));
            } else if (as_bool(logical_eq(data_type, 2))) {
                current_statement_begin__ = 107;
                stan::math::assign(b, (stan::math::exp((-(k) * d)) * (inv_Phi((Phi(c) + (stan::math::log((1 + q)) / a))) - c)));
            } else if (as_bool(logical_eq(data_type, 3))) {
                current_statement_begin__ = 109;
                stan::math::assign(b, (stan::math::exp((-(k) * d)) * (inv_Phi((Phi(c) + q)) - c)));
            } else if (as_bool(logical_eq(data_type, 4))) {
                current_statement_begin__ = 111;
                stan::math::assign(b, (stan::math::exp((-(k) * d)) * (inv_Phi((Phi(c) - (stan::math::log((1 - q)) / a))) - c)));
            }
            current_statement_begin__ = 114;
            stan::math::assign(invsigma2, stan::math::exp(par5));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(b);
                vars__.push_back(a);
                vars__.push_back(c);
                vars__.push_back(par3);
                vars__.push_back(d);
                vars__.push_back(k);
                vars__.push_back(mu_inf);
                vars__.push_back(invsigma2);
                vars__.push_back(mu_0);
                vars__.push_back(rho_cluster);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_mP4c";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "par1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "par2";
        param_names__.push_back(param_name_stream__.str());
        size_t pars3i_k_0_max__ = is_increasing;
        for (size_t k_0__ = 0; k_0__ < pars3i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pars3i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pars3d_k_0_max__ = is_decreasing;
        for (size_t k_0__ = 0; k_0__ < pars3d_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pars3d" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "par4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "par5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "par6";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "a";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "c";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "par3";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "d";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "k";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_inf";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "invsigma2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_cluster";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "par1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "par2";
        param_names__.push_back(param_name_stream__.str());
        size_t pars3i_k_0_max__ = is_increasing;
        for (size_t k_0__ = 0; k_0__ < pars3i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pars3i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pars3d_k_0_max__ = is_decreasing;
        for (size_t k_0__ = 0; k_0__ < pars3d_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pars3d" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "par4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "par5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "par6";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "a";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "c";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "par3";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "d";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "k";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_inf";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "invsigma2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_cluster";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_mP4c_namespace::model_mP4c stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
