// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mL4_Q_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 86> locations_array__ =
  {" (found before start of program)",
  " (in 'mL4_Q', line 37, column 2 to column 30)",
  " (in 'mL4_Q', line 38, column 2 to column 21)",
  " (in 'mL4_Q', line 39, column 2 to column 12)",
  " (in 'mL4_Q', line 40, column 2 to column 23)",
  " (in 'mL4_Q', line 44, column 2 to column 9)",
  " (in 'mL4_Q', line 45, column 2 to column 9)",
  " (in 'mL4_Q', line 46, column 2 to column 9)",
  " (in 'mL4_Q', line 47, column 2 to column 9)",
  " (in 'mL4_Q', line 48, column 2 to column 12)",
  " (in 'mL4_Q', line 49, column 2 to column 15)",
  " (in 'mL4_Q', line 50, column 2 to column 15)",
  " (in 'mL4_Q', line 51, column 2 to column 20)",
  " (in 'mL4_Q', line 52, column 2 to column 13)",
  " (in 'mL4_Q', line 53, column 2 to column 11)",
  " (in 'mL4_Q', line 54, column 2 to column 16)",
  " (in 'mL4_Q', line 55, column 2 to column 16)",
  " (in 'mL4_Q', line 56, column 2 to column 82)",
  " (in 'mL4_Q', line 62, column 6 to column 86)",
  " (in 'mL4_Q', line 61, column 24 to line 63, column 5)",
  " (in 'mL4_Q', line 61, column 11 to line 63, column 5)",
  " (in 'mL4_Q', line 60, column 6 to column 15)",
  " (in 'mL4_Q', line 59, column 15 to line 61, column 5)",
  " (in 'mL4_Q', line 59, column 2 to line 63, column 5)",
  " (in 'mL4_Q', line 58, column 16 to line 64, column 3)",
  " (in 'mL4_Q', line 58, column 2 to line 64, column 3)",
  " (in 'mL4_Q', line 73, column 6 to column 20)",
  " (in 'mL4_Q', line 74, column 6 to column 20)",
  " (in 'mL4_Q', line 72, column 17 to line 75, column 5)",
  " (in 'mL4_Q', line 72, column 4 to line 75, column 5)",
  " (in 'mL4_Q', line 71, column 9 to line 76, column 3)",
  " (in 'mL4_Q', line 68, column 6 to column 45)",
  " (in 'mL4_Q', line 69, column 6 to column 53)",
  " (in 'mL4_Q', line 67, column 17 to line 70, column 5)",
  " (in 'mL4_Q', line 67, column 4 to line 70, column 5)",
  " (in 'mL4_Q', line 66, column 18 to line 71, column 3)",
  " (in 'mL4_Q', line 66, column 2 to line 76, column 3)",
  " (in 'mL4_Q', line 79, column 4 to column 71)",
  " (in 'mL4_Q', line 80, column 4 to column 71)",
  " (in 'mL4_Q', line 81, column 4 to column 57)",
  " (in 'mL4_Q', line 81, column 49 to column 55)",
  " (in 'mL4_Q', line 91, column 6 to column 61)",
  " (in 'mL4_Q', line 93, column 8 to line 95, column 46)",
  " (in 'mL4_Q', line 92, column 19 to line 96, column 7)",
  " (in 'mL4_Q', line 92, column 6 to line 96, column 7)",
  " (in 'mL4_Q', line 89, column 11 to line 97, column 5)",
  " (in 'mL4_Q', line 86, column 8 to column 93)",
  " (in 'mL4_Q', line 85, column 19 to line 87, column 7)",
  " (in 'mL4_Q', line 85, column 6 to line 87, column 7)",
  " (in 'mL4_Q', line 83, column 17 to line 89, column 5)",
  " (in 'mL4_Q', line 83, column 3 to line 97, column 5)",
  " (in 'mL4_Q', line 21, column 2 to column 8)",
  " (in 'mL4_Q', line 22, column 9 to column 10)",
  " (in 'mL4_Q', line 22, column 2 to column 14)",
  " (in 'mL4_Q', line 23, column 9 to column 10)",
  " (in 'mL4_Q', line 23, column 2 to column 14)",
  " (in 'mL4_Q', line 24, column 9 to column 10)",
  " (in 'mL4_Q', line 24, column 2 to column 14)",
  " (in 'mL4_Q', line 25, column 2 to column 9)",
  " (in 'mL4_Q', line 26, column 2 to column 20)",
  " (in 'mL4_Q', line 27, column 2 to column 18)",
  " (in 'mL4_Q', line 28, column 2 to column 18)",
  " (in 'mL4_Q', line 29, column 2 to column 20)",
  " (in 'mL4_Q', line 30, column 2 to column 11)",
  " (in 'mL4_Q', line 31, column 2 to column 27)",
  " (in 'mL4_Q', line 32, column 2 to column 14)",
  " (in 'mL4_Q', line 33, column 2 to column 31)",
  " (in 'mL4_Q', line 34, column 2 to column 35)",
  " (in 'mL4_Q', line 40, column 11 to column 21)",
  " (in 'mL4_Q', line 48, column 9 to column 10)",
  " (in 'mL4_Q', line 49, column 12 to column 13)",
  " (in 'mL4_Q', line 50, column 12 to column 13)",
  " (in 'mL4_Q', line 3, column 4 to column 12)",
  " (in 'mL4_Q', line 4, column 4 to column 12)",
  " (in 'mL4_Q', line 5, column 4 to column 12)",
  " (in 'mL4_Q', line 6, column 4 to column 12)",
  " (in 'mL4_Q', line 7, column 4 to column 15)",
  " (in 'mL4_Q', line 8, column 4 to column 14)",
  " (in 'mL4_Q', line 10, column 4 to column 43)",
  " (in 'mL4_Q', line 11, column 4 to column 42)",
  " (in 'mL4_Q', line 13, column 4 to column 39)",
  " (in 'mL4_Q', line 14, column 4 to column 38)",
  " (in 'mL4_Q', line 15, column 4 to column 41)",
  " (in 'mL4_Q', line 16, column 4 to column 28)",
  " (in 'mL4_Q', line 17, column 4 to column 31)",
  " (in 'mL4_Q', line 2, column 71 to line 18, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& lb, const T2__& md, const T3__&
               ub, const T4__& gama, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& lb, const T2__& md, const T3__&
               ub, const T4__& gama, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ x1 = DUMMY_VAR__;
    local_scalar_t__ x2 = DUMMY_VAR__;
    local_scalar_t__ x3 = DUMMY_VAR__;
    local_scalar_t__ x4 = DUMMY_VAR__;
    local_scalar_t__ alpha = DUMMY_VAR__;
    local_scalar_t__ beta = DUMMY_VAR__;
    current_statement__ = 78;
    alpha = (1 + ((gama * (md - lb)) / (ub - lb)));
    current_statement__ = 79;
    beta = (1 + ((gama * (ub - md)) / (ub - lb)));
    current_statement__ = 80;
    x1 = ((alpha - 1) * stan::math::log((theta - lb)));
    current_statement__ = 81;
    x2 = ((beta - 1) * stan::math::log((ub - theta)));
    current_statement__ = 82;
    x3 = (((alpha + beta) - 1) * stan::math::log((ub - lb)));
    current_statement__ = 83;
    x4 = stan::math::lbeta(alpha, beta);
    current_statement__ = 84;
    return (((x1 + x2) - x3) - x4);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_mL4_Q final : public model_base_crtp<model_mL4_Q> {
private:
  int N;
  Eigen::Matrix<double,-1,1> n_data__;
  Eigen::Matrix<double,-1,1> x_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  double q;
  Eigen::Matrix<double,-1,1> priormu_data__;
  std::vector<double> priorlb;
  std::vector<double> priorub;
  std::vector<double> priorgama;
  double eps;
  Eigen::Matrix<double,-1,-1> priorSigma_data__;
  double truncd;
  int is_bin;
  int is_betabin;
  Eigen::Map<Eigen::Matrix<double,-1,1>> n{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> priormu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priorSigma{nullptr, 0, 0};
public:
  ~model_mL4_Q() {}
  model_mL4_Q(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mL4_Q_namespace::model_mL4_Q";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 51;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 51;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 52;
      stan::math::validate_non_negative_index("n", "N", N);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "n", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      n_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&n) Eigen::Map<Eigen::Matrix<double,-1,1>>(n_data__.data(), N);
      {
        std::vector<local_scalar_t__> n_flat__;
        current_statement__ = 53;
        n_flat__ = context__.vals_r("n");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 53;
          stan::model::assign(n, n_flat__[(pos__ - 1)],
            "assigning variable n", stan::model::index_uni(sym1__));
          current_statement__ = 53;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 54;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      x_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,1>>(x_data__.data(), N);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 55;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 55;
          stan::model::assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", stan::model::index_uni(sym1__));
          current_statement__ = 55;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 56;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 57;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 57;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 57;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 58;
      context__.validate_dims("data initialization", "q", "double",
        std::vector<size_t>{});
      q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 58;
      q = context__.vals_r("q")[(1 - 1)];
      current_statement__ = 59;
      context__.validate_dims("data initialization", "priormu", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      priormu_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priormu)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(priormu_data__.data(), 4);
      {
        std::vector<local_scalar_t__> priormu_flat__;
        current_statement__ = 59;
        priormu_flat__ = context__.vals_r("priormu");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 59;
          stan::model::assign(priormu, priormu_flat__[(pos__ - 1)],
            "assigning variable priormu", stan::model::index_uni(sym1__));
          current_statement__ = 59;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 60;
      context__.validate_dims("data initialization", "priorlb", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      priorlb = std::vector<double>(2,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 60;
      priorlb = context__.vals_r("priorlb");
      current_statement__ = 61;
      context__.validate_dims("data initialization", "priorub", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      priorub = std::vector<double>(2,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 61;
      priorub = context__.vals_r("priorub");
      current_statement__ = 62;
      context__.validate_dims("data initialization", "priorgama", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      priorgama = std::vector<double>(2,
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 62;
      priorgama = context__.vals_r("priorgama");
      current_statement__ = 63;
      context__.validate_dims("data initialization", "eps", "double",
        std::vector<size_t>{});
      eps = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 63;
      eps = context__.vals_r("eps")[(1 - 1)];
      current_statement__ = 64;
      context__.validate_dims("data initialization", "priorSigma", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)});
      priorSigma_data__ = Eigen::Matrix<double,-1,-1>::Constant(3, 3,
                            std::numeric_limits<double>::quiet_NaN());
      new (&priorSigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priorSigma_data__.data(), 3,
        3);
      {
        std::vector<local_scalar_t__> priorSigma_flat__;
        current_statement__ = 64;
        priorSigma_flat__ = context__.vals_r("priorSigma");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 64;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 64;
            stan::model::assign(priorSigma, priorSigma_flat__[(pos__ - 1)],
              "assigning variable priorSigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 64;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 64;
      stan::math::check_cov_matrix(function__, "priorSigma", priorSigma);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "truncd", "double",
        std::vector<size_t>{});
      truncd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 65;
      truncd = context__.vals_r("truncd")[(1 - 1)];
      current_statement__ = 66;
      context__.validate_dims("data initialization", "is_bin", "int",
        std::vector<size_t>{});
      is_bin = std::numeric_limits<int>::min();
      current_statement__ = 66;
      is_bin = context__.vals_i("is_bin")[(1 - 1)];
      current_statement__ = 66;
      stan::math::check_greater_or_equal(function__, "is_bin", is_bin, 0);
      current_statement__ = 66;
      stan::math::check_less_or_equal(function__, "is_bin", is_bin, 1);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "is_betabin", "int",
        std::vector<size_t>{});
      is_betabin = std::numeric_limits<int>::min();
      current_statement__ = 67;
      is_betabin = context__.vals_i("is_betabin")[(1 - 1)];
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "is_betabin",
        is_betabin, 0);
      current_statement__ = 67;
      stan::math::check_less_or_equal(function__, "is_betabin", is_betabin, 1);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("rho", "is_betabin", is_betabin);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("m", "N", N);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("abet", "N", N);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("bbet", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + is_betabin;
  }
  inline std::string model_name() const final {
    return "model_mL4_Q";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mL4_Q_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ par1 = DUMMY_VAR__;
      current_statement__ = 1;
      par1 = in__.template read_constrain_lub<local_scalar_t__,
               jacobian__>(0, 1, lp__);
      local_scalar_t__ par2 = DUMMY_VAR__;
      current_statement__ = 2;
      par2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ par3 = DUMMY_VAR__;
      current_statement__ = 3;
      par3 = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(is_betabin, DUMMY_VAR__);
      current_statement__ = 4;
      rho = in__.template read<std::vector<local_scalar_t__>>(is_betabin);
      local_scalar_t__ a = DUMMY_VAR__;
      local_scalar_t__ b = DUMMY_VAR__;
      local_scalar_t__ d = DUMMY_VAR__;
      local_scalar_t__ k = DUMMY_VAR__;
      std::vector<local_scalar_t__> m =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> abet =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> bbet =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      local_scalar_t__ BMD = DUMMY_VAR__;
      current_statement__ = 13;
      BMD = par2;
      current_statement__ = 14;
      a = par1;
      current_statement__ = 15;
      d = stan::math::exp(par3);
      current_statement__ = 16;
      k = stan::math::log(par2);
      current_statement__ = 17;
      b = (stan::math::exp((-k * d)) * (((stan::math::pow(3, 0.5) /
        stan::math::pi()) * stan::math::logit(((q * (1 - a)) + a))) -
        ((stan::math::pow(3, 0.5) / stan::math::pi()) *
        stan::math::logit(a))));
      current_statement__ = 25;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 23;
        if (stan::math::logical_eq(
              stan::model::rvalue(x, "x", stan::model::index_uni(i)), 0)) {
          current_statement__ = 21;
          stan::model::assign(m, a, "assigning variable m",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 20;
          if (stan::math::logical_gt(
                stan::model::rvalue(x, "x", stan::model::index_uni(i)), 0)) {
            current_statement__ = 18;
            stan::model::assign(m,
              stan::math::inv_logit(((stan::math::pi() /
                stan::math::pow(3, 0.5)) * (((stan::math::pow(3, 0.5) /
                stan::math::pi()) * stan::math::logit(a)) + (b *
                stan::math::pow(
                  stan::model::rvalue(x, "x", stan::model::index_uni(i)), d))))),
              "assigning variable m", stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 36;
      if (stan::math::logical_eq(is_bin, 0)) {
        current_statement__ = 34;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 31;
          stan::model::assign(abet,
            (stan::model::rvalue(m, "m", stan::model::index_uni(i)) * ((1 /
            stan::model::rvalue(rho, "rho",
              stan::model::index_uni(is_betabin))) - 1)),
            "assigning variable abet", stan::model::index_uni(i));
          current_statement__ = 32;
          stan::model::assign(bbet, ((1.0 -
            stan::model::rvalue(m, "m", stan::model::index_uni(i))) * ((1 /
            stan::model::rvalue(rho, "rho",
              stan::model::index_uni(is_betabin))) - 1)),
            "assigning variable bbet", stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 29;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 26;
          stan::model::assign(abet, 0.0, "assigning variable abet",
            stan::model::index_uni(i));
          current_statement__ = 27;
          stan::model::assign(bbet, 0.0, "assigning variable bbet",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "BMD", BMD, 0);
      {
        current_statement__ = 37;
        lp_accum__.add(pert_dist_lpdf<propto__>(par1,
                         stan::model::rvalue(priorlb, "priorlb",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(priormu, "priormu",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(priorub, "priorub",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(priorgama, "priorgama",
                           stan::model::index_uni(1)), pstream__));
        current_statement__ = 38;
        lp_accum__.add(pert_dist_lpdf<propto__>(par2,
                         stan::model::rvalue(priorlb, "priorlb",
                           stan::model::index_uni(2)),
                         stan::model::rvalue(priormu, "priormu",
                           stan::model::index_uni(2)),
                         stan::model::rvalue(priorub, "priorub",
                           stan::model::index_uni(2)),
                         stan::model::rvalue(priorgama, "priorgama",
                           stan::model::index_uni(2)), pstream__));
        current_statement__ = 39;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(par3,
                         stan::model::rvalue(priormu, "priormu",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(priorSigma, "priorSigma",
                           stan::model::index_uni(3),
                           stan::model::index_uni(3))));
        current_statement__ = 40;
        if (stan::math::logical_gt(par3, truncd)) {
          current_statement__ = 40;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 40;
          lp_accum__.add(-stan::math::normal_lcdf(truncd,
                            stan::model::rvalue(priormu, "priormu",
                              stan::model::index_uni(3)),
                            stan::model::rvalue(priorSigma, "priorSigma",
                              stan::model::index_uni(3),
                              stan::model::index_uni(3))));
        }
        current_statement__ = 50;
        if (stan::math::logical_eq(is_bin, 1)) {
          current_statement__ = 48;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 46;
            lp_accum__.add(((stan::math::binomial_coefficient_log(
                               stan::model::rvalue(n, "n",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(y, "y",
                                 stan::model::index_uni(i))) +
              (stan::model::rvalue(y, "y", stan::model::index_uni(i)) *
              stan::math::log(
                (stan::model::rvalue(m, "m", stan::model::index_uni(i)) +
                eps)))) +
              ((stan::model::rvalue(n, "n", stan::model::index_uni(i)) -
              stan::model::rvalue(y, "y", stan::model::index_uni(i))) *
              stan::math::log(((1 -
                stan::model::rvalue(m, "m", stan::model::index_uni(i))) +
                eps)))));
          }
        } else {
          current_statement__ = 41;
          lp_accum__.add(pert_dist_lpdf<propto__>(
                           stan::model::rvalue(rho, "rho",
                             stan::model::index_uni(is_betabin)), 0.0,
                           stan::model::rvalue(priormu, "priormu",
                             stan::model::index_uni(4)), 1.0, 4.0, pstream__));
          current_statement__ = 44;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 42;
            lp_accum__.add(((((((stan::math::binomial_coefficient_log(
                                   stan::model::rvalue(n, "n",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(y, "y",
                                     stan::model::index_uni(i))) +
              stan::math::lgamma(
                ((stan::model::rvalue(abet, "abet", stan::model::index_uni(i))
                + stan::model::rvalue(y, "y", stan::model::index_uni(i))) +
                eps))) +
              stan::math::lgamma(
                (((stan::model::rvalue(bbet, "bbet",
                     stan::model::index_uni(i)) +
                stan::model::rvalue(n, "n", stan::model::index_uni(i))) -
                stan::model::rvalue(y, "y", stan::model::index_uni(i))) +
                eps))) -
              stan::math::lgamma(
                (((stan::model::rvalue(abet, "abet",
                     stan::model::index_uni(i)) +
                stan::model::rvalue(bbet, "bbet", stan::model::index_uni(i)))
                + stan::model::rvalue(n, "n", stan::model::index_uni(i))) +
                eps))) -
              stan::math::lgamma(
                (stan::model::rvalue(abet, "abet", stan::model::index_uni(i))
                + eps))) -
              stan::math::lgamma(
                (stan::model::rvalue(bbet, "bbet", stan::model::index_uni(i))
                + eps))) +
              stan::math::lgamma(
                ((stan::model::rvalue(abet, "abet", stan::model::index_uni(i))
                +
                stan::model::rvalue(bbet, "bbet", stan::model::index_uni(i)))
                + eps))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mL4_Q_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double par1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      par1 = in__.template read_constrain_lub<local_scalar_t__,
               jacobian__>(0, 1, lp__);
      double par2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      par2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double par3 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      par3 = in__.template read<local_scalar_t__>();
      std::vector<double> rho =
        std::vector<double>(is_betabin,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      rho = in__.template read<std::vector<local_scalar_t__>>(is_betabin);
      double a = std::numeric_limits<double>::quiet_NaN();
      double b = std::numeric_limits<double>::quiet_NaN();
      double d = std::numeric_limits<double>::quiet_NaN();
      double k = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> m =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> abet =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> bbet =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      double BMD = std::numeric_limits<double>::quiet_NaN();
      out__.write(par1);
      out__.write(par2);
      out__.write(par3);
      out__.write(rho);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 13;
      BMD = par2;
      current_statement__ = 14;
      a = par1;
      current_statement__ = 15;
      d = stan::math::exp(par3);
      current_statement__ = 16;
      k = stan::math::log(par2);
      current_statement__ = 17;
      b = (stan::math::exp((-k * d)) * (((stan::math::pow(3, 0.5) /
        stan::math::pi()) * stan::math::logit(((q * (1 - a)) + a))) -
        ((stan::math::pow(3, 0.5) / stan::math::pi()) *
        stan::math::logit(a))));
      current_statement__ = 25;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 23;
        if (stan::math::logical_eq(
              stan::model::rvalue(x, "x", stan::model::index_uni(i)), 0)) {
          current_statement__ = 21;
          stan::model::assign(m, a, "assigning variable m",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 20;
          if (stan::math::logical_gt(
                stan::model::rvalue(x, "x", stan::model::index_uni(i)), 0)) {
            current_statement__ = 18;
            stan::model::assign(m,
              stan::math::inv_logit(((stan::math::pi() /
                stan::math::pow(3, 0.5)) * (((stan::math::pow(3, 0.5) /
                stan::math::pi()) * stan::math::logit(a)) + (b *
                stan::math::pow(
                  stan::model::rvalue(x, "x", stan::model::index_uni(i)), d))))),
              "assigning variable m", stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 36;
      if (stan::math::logical_eq(is_bin, 0)) {
        current_statement__ = 34;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 31;
          stan::model::assign(abet,
            (stan::model::rvalue(m, "m", stan::model::index_uni(i)) * ((1 /
            stan::model::rvalue(rho, "rho",
              stan::model::index_uni(is_betabin))) - 1)),
            "assigning variable abet", stan::model::index_uni(i));
          current_statement__ = 32;
          stan::model::assign(bbet, ((1.0 -
            stan::model::rvalue(m, "m", stan::model::index_uni(i))) * ((1 /
            stan::model::rvalue(rho, "rho",
              stan::model::index_uni(is_betabin))) - 1)),
            "assigning variable bbet", stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 29;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 26;
          stan::model::assign(abet, 0.0, "assigning variable abet",
            stan::model::index_uni(i));
          current_statement__ = 27;
          stan::model::assign(bbet, 0.0, "assigning variable bbet",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "BMD", BMD, 0);
      if (emit_transformed_parameters__) {
        out__.write(a);
        out__.write(b);
        out__.write(d);
        out__.write(k);
        out__.write(m);
        out__.write(abet);
        out__.write(bbet);
        out__.write(BMD);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ par1 = DUMMY_VAR__;
      current_statement__ = 1;
      par1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, par1);
      local_scalar_t__ par2 = DUMMY_VAR__;
      current_statement__ = 2;
      par2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, par2);
      local_scalar_t__ par3 = DUMMY_VAR__;
      current_statement__ = 3;
      par3 = in__.read<local_scalar_t__>();
      out__.write(par3);
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(is_betabin, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(rho,
        in__.read<std::vector<local_scalar_t__>>(is_betabin),
        "assigning variable rho");
      out__.write(rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "par1", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "par2", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "par3", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "rho", "double",
        std::vector<size_t>{static_cast<size_t>(is_betabin)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ par1 = DUMMY_VAR__;
      current_statement__ = 1;
      par1 = context__.vals_r("par1")[(1 - 1)];
      out__.write_free_lub(0, 1, par1);
      local_scalar_t__ par2 = DUMMY_VAR__;
      current_statement__ = 2;
      par2 = context__.vals_r("par2")[(1 - 1)];
      out__.write_free_lb(0, par2);
      local_scalar_t__ par3 = DUMMY_VAR__;
      current_statement__ = 3;
      par3 = context__.vals_r("par3")[(1 - 1)];
      out__.write(par3);
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(is_betabin, DUMMY_VAR__);
      current_statement__ = 4;
      rho = context__.vals_r("rho");
      out__.write(rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"par1", "par2", "par3", "rho"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"a", "b", "d", "k", "m", "abet", "bbet", "BMD"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(is_betabin)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "par1");
    param_names__.emplace_back(std::string() + "par2");
    param_names__.emplace_back(std::string() + "par3");
    for (int sym1__ = 1; sym1__ <= is_betabin; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "k");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "m" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "abet" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "bbet" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "BMD");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "par1");
    param_names__.emplace_back(std::string() + "par2");
    param_names__.emplace_back(std::string() + "par3");
    for (int sym1__ = 1; sym1__ <= is_betabin; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "b");
      param_names__.emplace_back(std::string() + "d");
      param_names__.emplace_back(std::string() + "k");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "m" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "abet" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "bbet" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "BMD");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"par1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_betabin) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"abet\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"bbet\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"BMD\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"par1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_betabin) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"abet\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"bbet\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"BMD\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + 1) + is_betabin);
    const size_t num_transformed = emit_transformed_parameters * ((((((((1 +
      1) + 1) + 1) + N) + N) + N) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + 1) + is_betabin);
    const size_t num_transformed = emit_transformed_parameters * ((((((((1 +
      1) + 1) + 1) + N) + N) + N) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mL4_Q_namespace::model_mL4_Q;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mL4_Q_namespace::profiles__;
}
#endif
#endif
