// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mP4_Q_COV_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 167> locations_array__ =
  {" (found before start of program)",
  " (in 'mP4_Q_COV', line 41, column 2 to column 41)",
  " (in 'mP4_Q_COV', line 42, column 2 to column 34)",
  " (in 'mP4_Q_COV', line 43, column 2 to column 23)",
  " (in 'mP4_Q_COV', line 46, column 2 to column 20)",
  " (in 'mP4_Q_COV', line 47, column 2 to column 20)",
  " (in 'mP4_Q_COV', line 48, column 2 to column 20)",
  " (in 'mP4_Q_COV', line 49, column 2 to column 22)",
  " (in 'mP4_Q_COV', line 51, column 2 to column 33)",
  " (in 'mP4_Q_COV', line 52, column 2 to column 12)",
  " (in 'mP4_Q_COV', line 55, column 4 to column 23)",
  " (in 'mP4_Q_COV', line 56, column 4 to column 26)",
  " (in 'mP4_Q_COV', line 54, column 26 to line 57, column 3)",
  " (in 'mP4_Q_COV', line 54, column 2 to line 57, column 3)",
  " (in 'mP4_Q_COV', line 60, column 4 to column 21)",
  " (in 'mP4_Q_COV', line 59, column 24 to line 61, column 3)",
  " (in 'mP4_Q_COV', line 59, column 2 to line 61, column 3)",
  " (in 'mP4_Q_COV', line 64, column 4 to column 26)",
  " (in 'mP4_Q_COV', line 63, column 24 to line 65, column 3)",
  " (in 'mP4_Q_COV', line 63, column 2 to line 65, column 3)",
  " (in 'mP4_Q_COV', line 96, column 6 to column 31)",
  " (in 'mP4_Q_COV', line 100, column 8 to column 68)",
  " (in 'mP4_Q_COV', line 99, column 11 to line 101, column 7)",
  " (in 'mP4_Q_COV', line 98, column 8 to column 79)",
  " (in 'mP4_Q_COV', line 97, column 20 to line 99, column 7)",
  " (in 'mP4_Q_COV', line 97, column 6 to line 101, column 7)",
  " (in 'mP4_Q_COV', line 95, column 26 to line 102, column 5)",
  " (in 'mP4_Q_COV', line 95, column 4 to line 102, column 5)",
  " (in 'mP4_Q_COV', line 94, column 61 to line 103, column 3)",
  " (in 'mP4_Q_COV', line 94, column 8 to line 103, column 3)",
  " (in 'mP4_Q_COV', line 87, column 6 to column 29)",
  " (in 'mP4_Q_COV', line 91, column 8 to column 67)",
  " (in 'mP4_Q_COV', line 90, column 11 to line 92, column 7)",
  " (in 'mP4_Q_COV', line 89, column 8 to column 76)",
  " (in 'mP4_Q_COV', line 88, column 20 to line 90, column 7)",
  " (in 'mP4_Q_COV', line 88, column 6 to line 92, column 7)",
  " (in 'mP4_Q_COV', line 86, column 26 to line 93, column 5)",
  " (in 'mP4_Q_COV', line 86, column 4 to line 93, column 5)",
  " (in 'mP4_Q_COV', line 85, column 62 to line 94, column 3)",
  " (in 'mP4_Q_COV', line 85, column 8 to line 103, column 3)",
  " (in 'mP4_Q_COV', line 78, column 6 to column 31)",
  " (in 'mP4_Q_COV', line 82, column 8 to column 66)",
  " (in 'mP4_Q_COV', line 81, column 11 to line 83, column 7)",
  " (in 'mP4_Q_COV', line 80, column 8 to column 77)",
  " (in 'mP4_Q_COV', line 79, column 20 to line 81, column 7)",
  " (in 'mP4_Q_COV', line 79, column 6 to line 83, column 7)",
  " (in 'mP4_Q_COV', line 77, column 26 to line 84, column 5)",
  " (in 'mP4_Q_COV', line 77, column 4 to line 84, column 5)",
  " (in 'mP4_Q_COV', line 76, column 63 to line 85, column 3)",
  " (in 'mP4_Q_COV', line 76, column 8 to line 103, column 3)",
  " (in 'mP4_Q_COV', line 69, column 6 to column 29)",
  " (in 'mP4_Q_COV', line 73, column 8 to column 65)",
  " (in 'mP4_Q_COV', line 72, column 11 to line 74, column 7)",
  " (in 'mP4_Q_COV', line 71, column 8 to column 74)",
  " (in 'mP4_Q_COV', line 70, column 20 to line 72, column 7)",
  " (in 'mP4_Q_COV', line 70, column 6 to line 74, column 7)",
  " (in 'mP4_Q_COV', line 68, column 26 to line 75, column 5)",
  " (in 'mP4_Q_COV', line 68, column 4 to line 75, column 5)",
  " (in 'mP4_Q_COV', line 67, column 58 to line 76, column 3)",
  " (in 'mP4_Q_COV', line 67, column 2 to line 103, column 3)",
  " (in 'mP4_Q_COV', line 108, column 4 to column 85)",
  " (in 'mP4_Q_COV', line 107, column 23 to line 109, column 3)",
  " (in 'mP4_Q_COV', line 107, column 2 to line 109, column 3)",
  " (in 'mP4_Q_COV', line 113, column 4 to column 86)",
  " (in 'mP4_Q_COV', line 112, column 25 to line 114, column 3)",
  " (in 'mP4_Q_COV', line 112, column 2 to line 114, column 3)",
  " (in 'mP4_Q_COV', line 118, column 4 to column 64)",
  " (in 'mP4_Q_COV', line 118, column 56 to column 62)",
  " (in 'mP4_Q_COV', line 117, column 23 to line 119, column 3)",
  " (in 'mP4_Q_COV', line 117, column 2 to line 119, column 3)",
  " (in 'mP4_Q_COV', line 163, column 29 to line 165, column 131)",
  " (in 'mP4_Q_COV', line 163, column 27 to line 166, column 9)",
  " (in 'mP4_Q_COV', line 163, column 14 to line 166, column 9)",
  " (in 'mP4_Q_COV', line 160, column 24 to line 162, column 70)",
  " (in 'mP4_Q_COV', line 160, column 22 to line 163, column 9)",
  " (in 'mP4_Q_COV', line 160, column 8 to line 166, column 9)",
  " (in 'mP4_Q_COV', line 159, column 26 to line 167, column 7)",
  " (in 'mP4_Q_COV', line 159, column 6 to line 167, column 7)",
  " (in 'mP4_Q_COV', line 158, column 17 to line 168, column 5)",
  " (in 'mP4_Q_COV', line 158, column 4 to line 168, column 5)",
  " (in 'mP4_Q_COV', line 157, column 64 to line 169, column 3)",
  " (in 'mP4_Q_COV', line 157, column 8 to line 169, column 3)",
  " (in 'mP4_Q_COV', line 151, column 29 to line 153, column 134)",
  " (in 'mP4_Q_COV', line 151, column 27 to line 154, column 9)",
  " (in 'mP4_Q_COV', line 151, column 14 to line 154, column 9)",
  " (in 'mP4_Q_COV', line 148, column 24 to line 150, column 71)",
  " (in 'mP4_Q_COV', line 148, column 22 to line 151, column 9)",
  " (in 'mP4_Q_COV', line 148, column 8 to line 154, column 9)",
  " (in 'mP4_Q_COV', line 147, column 26 to line 155, column 7)",
  " (in 'mP4_Q_COV', line 147, column 6 to line 155, column 7)",
  " (in 'mP4_Q_COV', line 146, column 17 to line 156, column 5)",
  " (in 'mP4_Q_COV', line 146, column 4 to line 156, column 5)",
  " (in 'mP4_Q_COV', line 145, column 61 to line 157, column 3)",
  " (in 'mP4_Q_COV', line 145, column 8 to line 169, column 3)",
  " (in 'mP4_Q_COV', line 139, column 29 to line 141, column 133)",
  " (in 'mP4_Q_COV', line 139, column 27 to line 142, column 9)",
  " (in 'mP4_Q_COV', line 139, column 14 to line 142, column 9)",
  " (in 'mP4_Q_COV', line 136, column 24 to line 138, column 71)",
  " (in 'mP4_Q_COV', line 136, column 22 to line 139, column 9)",
  " (in 'mP4_Q_COV', line 136, column 8 to line 142, column 9)",
  " (in 'mP4_Q_COV', line 135, column 26 to line 143, column 7)",
  " (in 'mP4_Q_COV', line 135, column 6 to line 143, column 7)",
  " (in 'mP4_Q_COV', line 134, column 17 to line 144, column 5)",
  " (in 'mP4_Q_COV', line 134, column 4 to line 144, column 5)",
  " (in 'mP4_Q_COV', line 133, column 63 to line 145, column 3)",
  " (in 'mP4_Q_COV', line 133, column 8 to line 169, column 3)",
  " (in 'mP4_Q_COV', line 127, column 29 to line 129, column 134)",
  " (in 'mP4_Q_COV', line 127, column 27 to line 130, column 9)",
  " (in 'mP4_Q_COV', line 127, column 14 to line 130, column 9)",
  " (in 'mP4_Q_COV', line 124, column 24 to line 126, column 70)",
  " (in 'mP4_Q_COV', line 124, column 22 to line 127, column 9)",
  " (in 'mP4_Q_COV', line 124, column 8 to line 130, column 9)",
  " (in 'mP4_Q_COV', line 123, column 26 to line 131, column 7)",
  " (in 'mP4_Q_COV', line 123, column 6 to line 131, column 7)",
  " (in 'mP4_Q_COV', line 122, column 17 to line 132, column 5)",
  " (in 'mP4_Q_COV', line 122, column 4 to line 132, column 5)",
  " (in 'mP4_Q_COV', line 121, column 56 to line 133, column 3)",
  " (in 'mP4_Q_COV', line 121, column 2 to line 169, column 3)",
  " (in 'mP4_Q_COV', line 21, column 2 to column 8)",
  " (in 'mP4_Q_COV', line 22, column 2 to column 14)",
  " (in 'mP4_Q_COV', line 23, column 2 to column 16)",
  " (in 'mP4_Q_COV', line 24, column 2 to column 18)",
  " (in 'mP4_Q_COV', line 25, column 2 to column 16)",
  " (in 'mP4_Q_COV', line 26, column 2 to column 16)",
  " (in 'mP4_Q_COV', line 27, column 9 to column 10)",
  " (in 'mP4_Q_COV', line 27, column 2 to column 14)",
  " (in 'mP4_Q_COV', line 28, column 9 to column 10)",
  " (in 'mP4_Q_COV', line 28, column 2 to column 14)",
  " (in 'mP4_Q_COV', line 29, column 9 to column 10)",
  " (in 'mP4_Q_COV', line 29, column 2 to column 14)",
  " (in 'mP4_Q_COV', line 30, column 9 to column 10)",
  " (in 'mP4_Q_COV', line 30, column 12 to column 19)",
  " (in 'mP4_Q_COV', line 30, column 2 to column 29)",
  " (in 'mP4_Q_COV', line 31, column 2 to column 9)",
  " (in 'mP4_Q_COV', line 32, column 12 to column 19)",
  " (in 'mP4_Q_COV', line 32, column 2 to column 29)",
  " (in 'mP4_Q_COV', line 33, column 12 to column 19)",
  " (in 'mP4_Q_COV', line 33, column 2 to column 29)",
  " (in 'mP4_Q_COV', line 34, column 12 to column 19)",
  " (in 'mP4_Q_COV', line 34, column 2 to column 29)",
  " (in 'mP4_Q_COV', line 35, column 12 to column 19)",
  " (in 'mP4_Q_COV', line 35, column 2 to column 31)",
  " (in 'mP4_Q_COV', line 36, column 2 to column 11)",
  " (in 'mP4_Q_COV', line 37, column 2 to column 27)",
  " (in 'mP4_Q_COV', line 38, column 2 to column 14)",
  " (in 'mP4_Q_COV', line 41, column 30 to column 39)",
  " (in 'mP4_Q_COV', line 42, column 21 to column 32)",
  " (in 'mP4_Q_COV', line 43, column 12 to column 21)",
  " (in 'mP4_Q_COV', line 46, column 9 to column 18)",
  " (in 'mP4_Q_COV', line 47, column 9 to column 18)",
  " (in 'mP4_Q_COV', line 48, column 9 to column 18)",
  " (in 'mP4_Q_COV', line 49, column 9 to column 20)",
  " (in 'mP4_Q_COV', line 51, column 20 to column 31)",
  " (in 'mP4_Q_COV', line 3, column 4 to column 12)",
  " (in 'mP4_Q_COV', line 4, column 4 to column 12)",
  " (in 'mP4_Q_COV', line 5, column 4 to column 12)",
  " (in 'mP4_Q_COV', line 6, column 4 to column 12)",
  " (in 'mP4_Q_COV', line 7, column 4 to column 15)",
  " (in 'mP4_Q_COV', line 8, column 4 to column 14)",
  " (in 'mP4_Q_COV', line 10, column 4 to column 43)",
  " (in 'mP4_Q_COV', line 11, column 4 to column 42)",
  " (in 'mP4_Q_COV', line 13, column 4 to column 39)",
  " (in 'mP4_Q_COV', line 14, column 4 to column 38)",
  " (in 'mP4_Q_COV', line 15, column 4 to column 41)",
  " (in 'mP4_Q_COV', line 16, column 4 to column 28)",
  " (in 'mP4_Q_COV', line 17, column 4 to column 31)",
  " (in 'mP4_Q_COV', line 2, column 71 to line 18, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& lb, const T2__& md, const T3__&
               ub, const T4__& gama, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
pert_dist_lpdf(const T0__& theta, const T1__& lb, const T2__& md, const T3__&
               ub, const T4__& gama, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ x1 = DUMMY_VAR__;
    local_scalar_t__ x2 = DUMMY_VAR__;
    local_scalar_t__ x3 = DUMMY_VAR__;
    local_scalar_t__ x4 = DUMMY_VAR__;
    local_scalar_t__ alpha = DUMMY_VAR__;
    local_scalar_t__ beta = DUMMY_VAR__;
    current_statement__ = 159;
    alpha = (1 + ((gama * (md - lb)) / (ub - lb)));
    current_statement__ = 160;
    beta = (1 + ((gama * (ub - md)) / (ub - lb)));
    current_statement__ = 161;
    x1 = ((alpha - 1) * stan::math::log((theta - lb)));
    current_statement__ = 162;
    x2 = ((beta - 1) * stan::math::log((ub - theta)));
    current_statement__ = 163;
    x3 = (((alpha + beta) - 1) * stan::math::log((ub - lb)));
    current_statement__ = 164;
    x4 = stan::math::lbeta(alpha, beta);
    current_statement__ = 165;
    return (((x1 + x2) - x3) - x4);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_mP4_Q_COV final : public model_base_crtp<model_mP4_Q_COV> {
private:
  int N;
  int nlevels;
  int nlevels_a;
  int nlevels_BMD;
  int nlevels_d;
  int nlevels_b;
  Eigen::Matrix<double,-1,1> n_data__;
  Eigen::Matrix<double,-1,1> x_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Matrix<double,-1,-1> trt_ind_data__;
  double q;
  Eigen::Matrix<double,-1,-1> priormu_data__;
  Eigen::Matrix<double,-1,-1> priorlb_data__;
  Eigen::Matrix<double,-1,-1> priorub_data__;
  Eigen::Matrix<double,-1,-1> priorgama_data__;
  double eps;
  Eigen::Matrix<double,-1,-1> priorSigma_data__;
  double truncd;
  Eigen::Map<Eigen::Matrix<double,-1,1>> n{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> trt_ind{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priormu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priorlb{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priorub{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priorgama{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> priorSigma{nullptr, 0, 0};
public:
  ~model_mP4_Q_COV() {}
  model_mP4_Q_COV(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mP4_Q_COV_namespace::model_mP4_Q_COV";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 118;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 118;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 119;
      context__.validate_dims("data initialization", "nlevels", "int",
        std::vector<size_t>{});
      nlevels = std::numeric_limits<int>::min();
      current_statement__ = 119;
      nlevels = context__.vals_i("nlevels")[(1 - 1)];
      current_statement__ = 120;
      context__.validate_dims("data initialization", "nlevels_a", "int",
        std::vector<size_t>{});
      nlevels_a = std::numeric_limits<int>::min();
      current_statement__ = 120;
      nlevels_a = context__.vals_i("nlevels_a")[(1 - 1)];
      current_statement__ = 121;
      context__.validate_dims("data initialization", "nlevels_BMD", "int",
        std::vector<size_t>{});
      nlevels_BMD = std::numeric_limits<int>::min();
      current_statement__ = 121;
      nlevels_BMD = context__.vals_i("nlevels_BMD")[(1 - 1)];
      current_statement__ = 122;
      context__.validate_dims("data initialization", "nlevels_d", "int",
        std::vector<size_t>{});
      nlevels_d = std::numeric_limits<int>::min();
      current_statement__ = 122;
      nlevels_d = context__.vals_i("nlevels_d")[(1 - 1)];
      current_statement__ = 123;
      context__.validate_dims("data initialization", "nlevels_b", "int",
        std::vector<size_t>{});
      nlevels_b = std::numeric_limits<int>::min();
      current_statement__ = 123;
      nlevels_b = context__.vals_i("nlevels_b")[(1 - 1)];
      current_statement__ = 124;
      stan::math::validate_non_negative_index("n", "N", N);
      current_statement__ = 125;
      context__.validate_dims("data initialization", "n", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      n_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&n) Eigen::Map<Eigen::Matrix<double,-1,1>>(n_data__.data(), N);
      {
        std::vector<local_scalar_t__> n_flat__;
        current_statement__ = 125;
        n_flat__ = context__.vals_r("n");
        current_statement__ = 125;
        pos__ = 1;
        current_statement__ = 125;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 125;
          stan::model::assign(n, n_flat__[(pos__ - 1)],
            "assigning variable n", stan::model::index_uni(sym1__));
          current_statement__ = 125;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 126;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 127;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      x_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,1>>(x_data__.data(), N);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 127;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 127;
        pos__ = 1;
        current_statement__ = 127;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 127;
          stan::model::assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", stan::model::index_uni(sym1__));
          current_statement__ = 127;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 128;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 129;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 129;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 129;
        pos__ = 1;
        current_statement__ = 129;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 129;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 129;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 130;
      stan::math::validate_non_negative_index("trt_ind", "N", N);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("trt_ind", "nlevels", nlevels);
      current_statement__ = 132;
      context__.validate_dims("data initialization", "trt_ind", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(nlevels)});
      trt_ind_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, nlevels,
                         std::numeric_limits<double>::quiet_NaN());
      new (&trt_ind)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(trt_ind_data__.data(), N,
        nlevels);
      {
        std::vector<local_scalar_t__> trt_ind_flat__;
        current_statement__ = 132;
        trt_ind_flat__ = context__.vals_r("trt_ind");
        current_statement__ = 132;
        pos__ = 1;
        current_statement__ = 132;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 132;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 132;
            stan::model::assign(trt_ind, trt_ind_flat__[(pos__ - 1)],
              "assigning variable trt_ind", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 132;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 133;
      context__.validate_dims("data initialization", "q", "double",
        std::vector<size_t>{});
      q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 133;
      q = context__.vals_r("q")[(1 - 1)];
      current_statement__ = 134;
      stan::math::validate_non_negative_index("priormu", "nlevels", nlevels);
      current_statement__ = 135;
      context__.validate_dims("data initialization", "priormu", "double",
        std::vector<size_t>{static_cast<size_t>(4),
          static_cast<size_t>(nlevels)});
      priormu_data__ = Eigen::Matrix<double,-1,-1>::Constant(4, nlevels,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priormu)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priormu_data__.data(), 4,
        nlevels);
      {
        std::vector<local_scalar_t__> priormu_flat__;
        current_statement__ = 135;
        priormu_flat__ = context__.vals_r("priormu");
        current_statement__ = 135;
        pos__ = 1;
        current_statement__ = 135;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 135;
          for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
            current_statement__ = 135;
            stan::model::assign(priormu, priormu_flat__[(pos__ - 1)],
              "assigning variable priormu", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 135;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 136;
      stan::math::validate_non_negative_index("priorlb", "nlevels", nlevels);
      current_statement__ = 137;
      context__.validate_dims("data initialization", "priorlb", "double",
        std::vector<size_t>{static_cast<size_t>(4),
          static_cast<size_t>(nlevels)});
      priorlb_data__ = Eigen::Matrix<double,-1,-1>::Constant(4, nlevels,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priorlb)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priorlb_data__.data(), 4,
        nlevels);
      {
        std::vector<local_scalar_t__> priorlb_flat__;
        current_statement__ = 137;
        priorlb_flat__ = context__.vals_r("priorlb");
        current_statement__ = 137;
        pos__ = 1;
        current_statement__ = 137;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 137;
          for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
            current_statement__ = 137;
            stan::model::assign(priorlb, priorlb_flat__[(pos__ - 1)],
              "assigning variable priorlb", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 137;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 138;
      stan::math::validate_non_negative_index("priorub", "nlevels", nlevels);
      current_statement__ = 139;
      context__.validate_dims("data initialization", "priorub", "double",
        std::vector<size_t>{static_cast<size_t>(4),
          static_cast<size_t>(nlevels)});
      priorub_data__ = Eigen::Matrix<double,-1,-1>::Constant(4, nlevels,
                         std::numeric_limits<double>::quiet_NaN());
      new (&priorub)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priorub_data__.data(), 4,
        nlevels);
      {
        std::vector<local_scalar_t__> priorub_flat__;
        current_statement__ = 139;
        priorub_flat__ = context__.vals_r("priorub");
        current_statement__ = 139;
        pos__ = 1;
        current_statement__ = 139;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 139;
          for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
            current_statement__ = 139;
            stan::model::assign(priorub, priorub_flat__[(pos__ - 1)],
              "assigning variable priorub", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 139;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 140;
      stan::math::validate_non_negative_index("priorgama", "nlevels", nlevels);
      current_statement__ = 141;
      context__.validate_dims("data initialization", "priorgama", "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(nlevels)});
      priorgama_data__ = Eigen::Matrix<double,-1,-1>::Constant(2, nlevels,
                           std::numeric_limits<double>::quiet_NaN());
      new (&priorgama)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priorgama_data__.data(), 2,
        nlevels);
      {
        std::vector<local_scalar_t__> priorgama_flat__;
        current_statement__ = 141;
        priorgama_flat__ = context__.vals_r("priorgama");
        current_statement__ = 141;
        pos__ = 1;
        current_statement__ = 141;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 141;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 141;
            stan::model::assign(priorgama, priorgama_flat__[(pos__ - 1)],
              "assigning variable priorgama", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 141;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 142;
      context__.validate_dims("data initialization", "eps", "double",
        std::vector<size_t>{});
      eps = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 142;
      eps = context__.vals_r("eps")[(1 - 1)];
      current_statement__ = 143;
      context__.validate_dims("data initialization", "priorSigma", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)});
      priorSigma_data__ = Eigen::Matrix<double,-1,-1>::Constant(3, 3,
                            std::numeric_limits<double>::quiet_NaN());
      new (&priorSigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(priorSigma_data__.data(), 3,
        3);
      {
        std::vector<local_scalar_t__> priorSigma_flat__;
        current_statement__ = 143;
        priorSigma_flat__ = context__.vals_r("priorSigma");
        current_statement__ = 143;
        pos__ = 1;
        current_statement__ = 143;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 143;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 143;
            stan::model::assign(priorSigma, priorSigma_flat__[(pos__ - 1)],
              "assigning variable priorSigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 143;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 143;
      stan::math::check_cov_matrix(function__, "priorSigma", priorSigma);
      current_statement__ = 144;
      context__.validate_dims("data initialization", "truncd", "double",
        std::vector<size_t>{});
      truncd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 144;
      truncd = context__.vals_r("truncd")[(1 - 1)];
      current_statement__ = 145;
      stan::math::validate_non_negative_index("par1", "nlevels_a", nlevels_a);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("par2", "nlevels_BMD",
        nlevels_BMD);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("par3", "nlevels_d", nlevels_d);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("a", "nlevels_a", nlevels_a);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("b", "nlevels_b", nlevels_b);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("d", "nlevels_d", nlevels_d);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("k", "nlevels_BMD", nlevels_BMD);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("BMD", "nlevels_BMD",
        nlevels_BMD);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = nlevels_a + nlevels_BMD + nlevels_d;
  }
  inline std::string model_name() const final {
    return "model_mP4_Q_COV";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mP4_Q_COV_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> par1 =
        std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      current_statement__ = 1;
      par1 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
               jacobian__>(0, 1, lp__, nlevels_a);
      std::vector<local_scalar_t__> par2 =
        std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      current_statement__ = 2;
      par2 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, nlevels_BMD);
      std::vector<local_scalar_t__> par3 =
        std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      current_statement__ = 3;
      par3 = in__.template read<std::vector<local_scalar_t__>>(nlevels_d);
      std::vector<local_scalar_t__> a =
        std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      std::vector<local_scalar_t__> b =
        std::vector<local_scalar_t__>(nlevels_b, DUMMY_VAR__);
      std::vector<local_scalar_t__> d =
        std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      std::vector<local_scalar_t__> k =
        std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      std::vector<local_scalar_t__> BMD =
        std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      local_scalar_t__ expr = DUMMY_VAR__;
      current_statement__ = 13;
      for (int mn = 1; mn <= nlevels_BMD; ++mn) {
        current_statement__ = 10;
        stan::model::assign(BMD,
          stan::model::rvalue(par2, "par2", stan::model::index_uni(mn)),
          "assigning variable BMD", stan::model::index_uni(mn));
        current_statement__ = 11;
        stan::model::assign(k,
          stan::math::log(
            stan::model::rvalue(par2, "par2", stan::model::index_uni(mn))),
          "assigning variable k", stan::model::index_uni(mn));
      }
      current_statement__ = 16;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 14;
        stan::model::assign(a,
          stan::model::rvalue(par1, "par1", stan::model::index_uni(mn)),
          "assigning variable a", stan::model::index_uni(mn));
      }
      current_statement__ = 19;
      for (int mn = 1; mn <= nlevels_d; ++mn) {
        current_statement__ = 17;
        stan::model::assign(d,
          stan::math::exp(
            stan::model::rvalue(par3, "par3", stan::model::index_uni(mn))),
          "assigning variable d", stan::model::index_uni(mn));
      }
      current_statement__ = 59;
      if ((stan::math::primitive_value(
             (stan::math::primitive_value(
                stan::math::logical_eq(nlevels_a, 1)) &&
             stan::math::primitive_value(stan::math::logical_eq(nlevels_d, 1))))
          &&
          stan::math::primitive_value(stan::math::logical_eq(nlevels_BMD, 1)))) {
        current_statement__ = 57;
        for (int mn = 1; mn <= nlevels_b; ++mn) {
          current_statement__ = 50;
          expr = ((q * (1 -
            stan::model::rvalue(a, "a", stan::model::index_uni(1)))) +
            stan::model::rvalue(a, "a", stan::model::index_uni(1)));
          current_statement__ = 55;
          if (stan::math::logical_lt(expr, 1.0)) {
            current_statement__ = 53;
            stan::model::assign(b,
              ((stan::math::inv_Phi(((q * (1 -
                  stan::model::rvalue(a, "a", stan::model::index_uni(1)))) +
                  stan::model::rvalue(a, "a", stan::model::index_uni(1)))) -
              stan::math::inv_Phi(
                stan::model::rvalue(a, "a", stan::model::index_uni(1)))) /
              stan::math::exp(
                (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
              "assigning variable b", stan::model::index_uni(mn));
          } else {
            current_statement__ = 51;
            stan::model::assign(b, ((stan::math::inv_Phi(0.9999) -
              stan::math::inv_Phi(
                stan::model::rvalue(a, "a", stan::model::index_uni(1)))) /
              stan::math::exp(
                (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
              "assigning variable b", stan::model::index_uni(mn));
          }
        }
      } else {
        current_statement__ = 49;
        if ((stan::math::primitive_value(
               (stan::math::primitive_value(
                  stan::math::logical_gt(nlevels_a, 1)) &&
               stan::math::primitive_value(
                 stan::math::logical_eq(nlevels_d, 1))))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(nlevels_BMD, 1)))) {
          current_statement__ = 47;
          for (int mn = 1; mn <= nlevels_b; ++mn) {
            current_statement__ = 40;
            expr = ((q * (1 -
              stan::model::rvalue(a, "a", stan::model::index_uni(mn)))) +
              stan::model::rvalue(a, "a", stan::model::index_uni(mn)));
            current_statement__ = 45;
            if (stan::math::logical_lt(expr, 1.0)) {
              current_statement__ = 43;
              stan::model::assign(b,
                ((stan::math::inv_Phi(((q * (1 -
                    stan::model::rvalue(a, "a", stan::model::index_uni(mn))))
                    +
                    stan::model::rvalue(a, "a", stan::model::index_uni(mn))))
                -
                stan::math::inv_Phi(
                  stan::model::rvalue(a, "a", stan::model::index_uni(mn)))) /
                stan::math::exp(
                  (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                  stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                "assigning variable b", stan::model::index_uni(mn));
            } else {
              current_statement__ = 41;
              stan::model::assign(b, ((stan::math::inv_Phi(0.9999) -
                stan::math::inv_Phi(
                  stan::model::rvalue(a, "a", stan::model::index_uni(mn)))) /
                stan::math::exp(
                  (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                  stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                "assigning variable b", stan::model::index_uni(mn));
            }
          }
        } else {
          current_statement__ = 39;
          if ((stan::math::primitive_value(
                 (stan::math::primitive_value(
                    stan::math::logical_eq(nlevels_a, 1)) &&
                 stan::math::primitive_value(
                   stan::math::logical_gt(nlevels_d, 1))))
              &&
              stan::math::primitive_value(
                stan::math::logical_gt(nlevels_BMD, 1)))) {
            current_statement__ = 37;
            for (int mn = 1; mn <= nlevels_b; ++mn) {
              current_statement__ = 30;
              expr = ((q * (1 -
                stan::model::rvalue(a, "a", stan::model::index_uni(1)))) +
                stan::model::rvalue(a, "a", stan::model::index_uni(1)));
              current_statement__ = 35;
              if (stan::math::logical_lt(expr, 1.0)) {
                current_statement__ = 33;
                stan::model::assign(b,
                  ((stan::math::inv_Phi(((q * (1 -
                      stan::model::rvalue(a, "a", stan::model::index_uni(1))))
                      +
                      stan::model::rvalue(a, "a", stan::model::index_uni(1))))
                  -
                  stan::math::inv_Phi(
                    stan::model::rvalue(a, "a", stan::model::index_uni(1))))
                  /
                  stan::math::exp(
                    (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                    *
                    stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                  "assigning variable b", stan::model::index_uni(mn));
              } else {
                current_statement__ = 31;
                stan::model::assign(b, ((stan::math::inv_Phi(0.9999) -
                  stan::math::inv_Phi(
                    stan::model::rvalue(a, "a", stan::model::index_uni(1))))
                  /
                  stan::math::exp(
                    (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                    *
                    stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                  "assigning variable b", stan::model::index_uni(mn));
              }
            }
          } else {
            current_statement__ = 29;
            if ((stan::math::primitive_value(
                   (stan::math::primitive_value(
                      stan::math::logical_gt(nlevels_a, 1)) &&
                   stan::math::primitive_value(
                     stan::math::logical_gt(nlevels_d, 1))))
                &&
                stan::math::primitive_value(
                  stan::math::logical_gt(nlevels_BMD, 1)))) {
              current_statement__ = 27;
              for (int mn = 1; mn <= nlevels_b; ++mn) {
                current_statement__ = 20;
                expr = ((q * (1 -
                  stan::model::rvalue(a, "a", stan::model::index_uni(mn)))) +
                  stan::model::rvalue(a, "a", stan::model::index_uni(mn)));
                current_statement__ = 25;
                if (stan::math::logical_lt(expr, 1.0)) {
                  current_statement__ = 23;
                  stan::model::assign(b,
                    ((stan::math::inv_Phi(((q * (1 -
                        stan::model::rvalue(a, "a",
                          stan::model::index_uni(mn)))) +
                        stan::model::rvalue(a, "a",
                          stan::model::index_uni(mn)))) -
                    stan::math::inv_Phi(
                      stan::model::rvalue(a, "a", stan::model::index_uni(mn))))
                    /
                    stan::math::exp(
                      (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                    "assigning variable b", stan::model::index_uni(mn));
                } else {
                  current_statement__ = 21;
                  stan::model::assign(b, ((stan::math::inv_Phi(0.9999) -
                    stan::math::inv_Phi(
                      stan::model::rvalue(a, "a", stan::model::index_uni(mn))))
                    /
                    stan::math::exp(
                      (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                    "assigning variable b", stan::model::index_uni(mn));
                }
              }
            }
          }
        }
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "BMD", BMD, 0);
      {
        current_statement__ = 62;
        for (int i = 1; i <= nlevels_a; ++i) {
          current_statement__ = 60;
          lp_accum__.add(pert_dist_lpdf<propto__>(
                           stan::model::rvalue(par1, "par1",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorlb, "priorlb",
                             stan::model::index_uni(1),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priormu, "priormu",
                             stan::model::index_uni(1),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorub, "priorub",
                             stan::model::index_uni(1),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorgama, "priorgama",
                             stan::model::index_uni(1),
                             stan::model::index_uni(i)), pstream__));
        }
        current_statement__ = 65;
        for (int i = 1; i <= nlevels_BMD; ++i) {
          current_statement__ = 63;
          lp_accum__.add(pert_dist_lpdf<propto__>(
                           stan::model::rvalue(par2, "par2",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorlb, "priorlb",
                             stan::model::index_uni(2),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priormu, "priormu",
                             stan::model::index_uni(2),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorub, "priorub",
                             stan::model::index_uni(2),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorgama, "priorgama",
                             stan::model::index_uni(2),
                             stan::model::index_uni(i)), pstream__));
        }
        current_statement__ = 69;
        for (int i = 1; i <= nlevels_d; ++i) {
          current_statement__ = 66;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(par3, "par3",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priormu, "priormu",
                             stan::model::index_uni(3),
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorSigma, "priorSigma",
                             stan::model::index_uni(3),
                             stan::model::index_uni(3))));
          current_statement__ = 67;
          if (stan::math::logical_gt(
                stan::model::rvalue(par3, "par3", stan::model::index_uni(i)),
                truncd)) {
            current_statement__ = 67;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 67;
            lp_accum__.add(-stan::math::normal_lcdf(truncd,
                              stan::model::rvalue(priormu, "priormu",
                                stan::model::index_uni(3),
                                stan::model::index_uni(i)),
                              stan::model::rvalue(priorSigma, "priorSigma",
                                stan::model::index_uni(3),
                                stan::model::index_uni(3))));
          }
        }
        current_statement__ = 117;
        if ((stan::math::primitive_value(
               (stan::math::primitive_value(
                  stan::math::logical_gt(nlevels_d, 1)) &&
               stan::math::primitive_value(
                 stan::math::logical_gt(nlevels_BMD, 1))))
            &&
            stan::math::primitive_value(stan::math::logical_eq(nlevels_a, 1)))) {
          current_statement__ = 115;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 113;
            for (int mn = 1; mn <= nlevels; ++mn) {
              current_statement__ = 111;
              if (stan::math::logical_eq(
                    stan::model::rvalue(x, "x", stan::model::index_uni(i)), 0)) {
                current_statement__ = 109;
                lp_accum__.add((((stan::math::binomial_coefficient_log(
                                    stan::model::rvalue(n, "n",
                                      stan::model::index_uni(i)),
                                    stan::model::rvalue(y, "y",
                                      stan::model::index_uni(i))) +
                  (stan::model::rvalue(y, "y", stan::model::index_uni(i)) *
                  stan::math::log(
                    (stan::model::rvalue(a, "a", stan::model::index_uni(1)) +
                    eps)))) +
                  ((stan::model::rvalue(n, "n", stan::model::index_uni(i)) -
                  stan::model::rvalue(y, "y", stan::model::index_uni(i))) *
                  stan::math::log(((1 -
                    stan::model::rvalue(a, "a", stan::model::index_uni(1))) +
                    eps)))) *
                  stan::model::rvalue(trt_ind, "trt_ind",
                    stan::model::index_uni(i), stan::model::index_uni(mn))));
              } else {
                current_statement__ = 108;
                if (stan::math::logical_gt(
                      stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                      0)) {
                  current_statement__ = 106;
                  lp_accum__.add((((stan::math::binomial_coefficient_log(
                                      stan::model::rvalue(n, "n",
                                        stan::model::index_uni(i)),
                                      stan::model::rvalue(y, "y",
                                        stan::model::index_uni(i))) +
                    (stan::model::rvalue(y, "y", stan::model::index_uni(i)) *
                    stan::math::log(
                      (stan::math::Phi(
                         (stan::math::inv_Phi(
                            stan::model::rvalue(a, "a",
                              stan::model::index_uni(1))) +
                         (stan::model::rvalue(b, "b",
                            stan::model::index_uni(mn)) *
                         stan::math::pow(
                           stan::model::rvalue(x, "x",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(d, "d",
                             stan::model::index_uni(mn)))))) + eps)))) +
                    ((stan::model::rvalue(n, "n", stan::model::index_uni(i))
                    - stan::model::rvalue(y, "y", stan::model::index_uni(i)))
                    *
                    stan::math::log(((1 -
                      stan::math::Phi(
                        (stan::math::inv_Phi(
                           stan::model::rvalue(a, "a",
                             stan::model::index_uni(1))) +
                        (stan::model::rvalue(b, "b",
                           stan::model::index_uni(mn)) *
                        stan::math::pow(
                          stan::model::rvalue(x, "x",
                            stan::model::index_uni(i)),
                          stan::model::rvalue(d, "d",
                            stan::model::index_uni(mn))))))) + eps)))) *
                    stan::model::rvalue(trt_ind, "trt_ind",
                      stan::model::index_uni(i), stan::model::index_uni(mn))));
                }
              }
            }
          }
        } else {
          current_statement__ = 105;
          if ((stan::math::primitive_value(
                 (stan::math::primitive_value(
                    stan::math::logical_gt(nlevels_a, 1)) &&
                 stan::math::primitive_value(
                   stan::math::logical_eq(nlevels_d, 1))))
              &&
              stan::math::primitive_value(
                stan::math::logical_eq(nlevels_BMD, 1)))) {
            current_statement__ = 103;
            for (int i = 1; i <= N; ++i) {
              current_statement__ = 101;
              for (int mn = 1; mn <= nlevels; ++mn) {
                current_statement__ = 99;
                if (stan::math::logical_eq(
                      stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                      0)) {
                  current_statement__ = 97;
                  lp_accum__.add((((stan::math::binomial_coefficient_log(
                                      stan::model::rvalue(n, "n",
                                        stan::model::index_uni(i)),
                                      stan::model::rvalue(y, "y",
                                        stan::model::index_uni(i))) +
                    (stan::model::rvalue(y, "y", stan::model::index_uni(i)) *
                    stan::math::log(
                      (stan::model::rvalue(a, "a", stan::model::index_uni(mn))
                      + eps)))) +
                    ((stan::model::rvalue(n, "n", stan::model::index_uni(i))
                    - stan::model::rvalue(y, "y", stan::model::index_uni(i)))
                    *
                    stan::math::log(((1 -
                      stan::model::rvalue(a, "a", stan::model::index_uni(mn)))
                      + eps)))) *
                    stan::model::rvalue(trt_ind, "trt_ind",
                      stan::model::index_uni(i), stan::model::index_uni(mn))));
                } else {
                  current_statement__ = 96;
                  if (stan::math::logical_gt(
                        stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                        0)) {
                    current_statement__ = 94;
                    lp_accum__.add((((stan::math::binomial_coefficient_log(
                                        stan::model::rvalue(n, "n",
                                          stan::model::index_uni(i)),
                                        stan::model::rvalue(y, "y",
                                          stan::model::index_uni(i))) +
                      (stan::model::rvalue(y, "y", stan::model::index_uni(i))
                      *
                      stan::math::log(
                        (stan::math::Phi(
                           (stan::math::inv_Phi(
                              stan::model::rvalue(a, "a",
                                stan::model::index_uni(mn))) +
                           (stan::model::rvalue(b, "b",
                              stan::model::index_uni(mn)) *
                           stan::math::pow(
                             stan::model::rvalue(x, "x",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(d, "d",
                               stan::model::index_uni(1)))))) + eps)))) +
                      ((stan::model::rvalue(n, "n", stan::model::index_uni(i))
                      -
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)))
                      *
                      stan::math::log(((1 -
                        stan::math::Phi(
                          (stan::math::inv_Phi(
                             stan::model::rvalue(a, "a",
                               stan::model::index_uni(mn))) +
                          (stan::model::rvalue(b, "b",
                             stan::model::index_uni(mn)) *
                          stan::math::pow(
                            stan::model::rvalue(x, "x",
                              stan::model::index_uni(i)),
                            stan::model::rvalue(d, "d",
                              stan::model::index_uni(1))))))) + eps)))) *
                      stan::model::rvalue(trt_ind, "trt_ind",
                        stan::model::index_uni(i), stan::model::index_uni(mn))));
                  }
                }
              }
            }
          } else {
            current_statement__ = 93;
            if ((stan::math::primitive_value(
                   (stan::math::primitive_value(
                      stan::math::logical_gt(nlevels_a, 1)) &&
                   stan::math::primitive_value(
                     stan::math::logical_gt(nlevels_d, 1))))
                &&
                stan::math::primitive_value(
                  stan::math::logical_gt(nlevels_BMD, 1)))) {
              current_statement__ = 91;
              for (int i = 1; i <= N; ++i) {
                current_statement__ = 89;
                for (int mn = 1; mn <= nlevels; ++mn) {
                  current_statement__ = 87;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(x, "x", stan::model::index_uni(i)),
                        0)) {
                    current_statement__ = 85;
                    lp_accum__.add((((stan::math::binomial_coefficient_log(
                                        stan::model::rvalue(n, "n",
                                          stan::model::index_uni(i)),
                                        stan::model::rvalue(y, "y",
                                          stan::model::index_uni(i))) +
                      (stan::model::rvalue(y, "y", stan::model::index_uni(i))
                      *
                      stan::math::log(
                        (stan::model::rvalue(a, "a",
                           stan::model::index_uni(mn)) + eps)))) +
                      ((stan::model::rvalue(n, "n", stan::model::index_uni(i))
                      -
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)))
                      *
                      stan::math::log(((1 -
                        stan::model::rvalue(a, "a",
                          stan::model::index_uni(mn))) + eps)))) *
                      stan::model::rvalue(trt_ind, "trt_ind",
                        stan::model::index_uni(i), stan::model::index_uni(mn))));
                  } else {
                    current_statement__ = 84;
                    if (stan::math::logical_gt(
                          stan::model::rvalue(x, "x",
                            stan::model::index_uni(i)), 0)) {
                      current_statement__ = 82;
                      lp_accum__.add((((stan::math::binomial_coefficient_log(
                                          stan::model::rvalue(n, "n",
                                            stan::model::index_uni(i)),
                                          stan::model::rvalue(y, "y",
                                            stan::model::index_uni(i))) +
                        (stan::model::rvalue(y, "y",
                           stan::model::index_uni(i)) *
                        stan::math::log(
                          (stan::math::Phi(
                             (stan::math::inv_Phi(
                                stan::model::rvalue(a, "a",
                                  stan::model::index_uni(mn))) +
                             (stan::model::rvalue(b, "b",
                                stan::model::index_uni(mn)) *
                             stan::math::pow(
                               stan::model::rvalue(x, "x",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(d, "d",
                                 stan::model::index_uni(mn)))))) + eps)))) +
                        ((stan::model::rvalue(n, "n",
                            stan::model::index_uni(i)) -
                        stan::model::rvalue(y, "y", stan::model::index_uni(i)))
                        *
                        stan::math::log(((1 -
                          stan::math::Phi(
                            (stan::math::inv_Phi(
                               stan::model::rvalue(a, "a",
                                 stan::model::index_uni(mn))) +
                            (stan::model::rvalue(b, "b",
                               stan::model::index_uni(mn)) *
                            stan::math::pow(
                              stan::model::rvalue(x, "x",
                                stan::model::index_uni(i)),
                              stan::model::rvalue(d, "d",
                                stan::model::index_uni(mn))))))) + eps)))) *
                        stan::model::rvalue(trt_ind, "trt_ind",
                          stan::model::index_uni(i),
                          stan::model::index_uni(mn))));
                    }
                  }
                }
              }
            } else {
              current_statement__ = 81;
              if ((stan::math::primitive_value(
                     (stan::math::primitive_value(
                        stan::math::logical_eq(nlevels_a, 1)) &&
                     stan::math::primitive_value(
                       stan::math::logical_eq(nlevels_d, 1))))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_eq(nlevels_BMD, 1)))) {
                current_statement__ = 79;
                for (int i = 1; i <= N; ++i) {
                  current_statement__ = 77;
                  for (int mn = 1; mn <= nlevels; ++mn) {
                    current_statement__ = 75;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(x, "x",
                            stan::model::index_uni(i)), 0)) {
                      current_statement__ = 73;
                      lp_accum__.add((((stan::math::binomial_coefficient_log(
                                          stan::model::rvalue(n, "n",
                                            stan::model::index_uni(i)),
                                          stan::model::rvalue(y, "y",
                                            stan::model::index_uni(i))) +
                        (stan::model::rvalue(y, "y",
                           stan::model::index_uni(i)) *
                        stan::math::log(
                          (stan::model::rvalue(a, "a",
                             stan::model::index_uni(1)) + eps)))) +
                        ((stan::model::rvalue(n, "n",
                            stan::model::index_uni(i)) -
                        stan::model::rvalue(y, "y", stan::model::index_uni(i)))
                        *
                        stan::math::log(((1 -
                          stan::model::rvalue(a, "a",
                            stan::model::index_uni(1))) + eps)))) *
                        stan::model::rvalue(trt_ind, "trt_ind",
                          stan::model::index_uni(i),
                          stan::model::index_uni(mn))));
                    } else {
                      current_statement__ = 72;
                      if (stan::math::logical_gt(
                            stan::model::rvalue(x, "x",
                              stan::model::index_uni(i)), 0)) {
                        current_statement__ = 70;
                        lp_accum__.add((((stan::math::binomial_coefficient_log(
                                            stan::model::rvalue(n, "n",
                                              stan::model::index_uni(i)),
                                            stan::model::rvalue(y, "y",
                                              stan::model::index_uni(i))) +
                          (stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)) *
                          stan::math::log(
                            (stan::math::Phi(
                               (stan::math::inv_Phi(
                                  stan::model::rvalue(a, "a",
                                    stan::model::index_uni(1))) +
                               (stan::model::rvalue(b, "b",
                                  stan::model::index_uni(1)) *
                               stan::math::pow(
                                 stan::model::rvalue(x, "x",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(d, "d",
                                   stan::model::index_uni(1)))))) + eps)))) +
                          ((stan::model::rvalue(n, "n",
                              stan::model::index_uni(i)) -
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i))) *
                          stan::math::log(((1 -
                            stan::math::Phi(
                              (stan::math::inv_Phi(
                                 stan::model::rvalue(a, "a",
                                   stan::model::index_uni(1))) +
                              (stan::model::rvalue(b, "b",
                                 stan::model::index_uni(1)) *
                              stan::math::pow(
                                stan::model::rvalue(x, "x",
                                  stan::model::index_uni(i)),
                                stan::model::rvalue(d, "d",
                                  stan::model::index_uni(1))))))) + eps)))) *
                          stan::model::rvalue(trt_ind, "trt_ind",
                            stan::model::index_uni(i),
                            stan::model::index_uni(mn))));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mP4_Q_COV_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> par1 =
        std::vector<double>(nlevels_a,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      par1 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
               jacobian__>(0, 1, lp__, nlevels_a);
      std::vector<double> par2 =
        std::vector<double>(nlevels_BMD,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      par2 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, nlevels_BMD);
      std::vector<double> par3 =
        std::vector<double>(nlevels_d,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      par3 = in__.template read<std::vector<local_scalar_t__>>(nlevels_d);
      std::vector<double> a =
        std::vector<double>(nlevels_a,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> b =
        std::vector<double>(nlevels_b,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> d =
        std::vector<double>(nlevels_d,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> k =
        std::vector<double>(nlevels_BMD,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> BMD =
        std::vector<double>(nlevels_BMD,
          std::numeric_limits<double>::quiet_NaN());
      double expr = std::numeric_limits<double>::quiet_NaN();
      out__.write(par1);
      out__.write(par2);
      out__.write(par3);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 13;
      for (int mn = 1; mn <= nlevels_BMD; ++mn) {
        current_statement__ = 10;
        stan::model::assign(BMD,
          stan::model::rvalue(par2, "par2", stan::model::index_uni(mn)),
          "assigning variable BMD", stan::model::index_uni(mn));
        current_statement__ = 11;
        stan::model::assign(k,
          stan::math::log(
            stan::model::rvalue(par2, "par2", stan::model::index_uni(mn))),
          "assigning variable k", stan::model::index_uni(mn));
      }
      current_statement__ = 16;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 14;
        stan::model::assign(a,
          stan::model::rvalue(par1, "par1", stan::model::index_uni(mn)),
          "assigning variable a", stan::model::index_uni(mn));
      }
      current_statement__ = 19;
      for (int mn = 1; mn <= nlevels_d; ++mn) {
        current_statement__ = 17;
        stan::model::assign(d,
          stan::math::exp(
            stan::model::rvalue(par3, "par3", stan::model::index_uni(mn))),
          "assigning variable d", stan::model::index_uni(mn));
      }
      current_statement__ = 59;
      if ((stan::math::primitive_value(
             (stan::math::primitive_value(
                stan::math::logical_eq(nlevels_a, 1)) &&
             stan::math::primitive_value(stan::math::logical_eq(nlevels_d, 1))))
          &&
          stan::math::primitive_value(stan::math::logical_eq(nlevels_BMD, 1)))) {
        current_statement__ = 57;
        for (int mn = 1; mn <= nlevels_b; ++mn) {
          current_statement__ = 50;
          expr = ((q * (1 -
            stan::model::rvalue(a, "a", stan::model::index_uni(1)))) +
            stan::model::rvalue(a, "a", stan::model::index_uni(1)));
          current_statement__ = 55;
          if (stan::math::logical_lt(expr, 1.0)) {
            current_statement__ = 53;
            stan::model::assign(b,
              ((stan::math::inv_Phi(((q * (1 -
                  stan::model::rvalue(a, "a", stan::model::index_uni(1)))) +
                  stan::model::rvalue(a, "a", stan::model::index_uni(1)))) -
              stan::math::inv_Phi(
                stan::model::rvalue(a, "a", stan::model::index_uni(1)))) /
              stan::math::exp(
                (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
              "assigning variable b", stan::model::index_uni(mn));
          } else {
            current_statement__ = 51;
            stan::model::assign(b, ((stan::math::inv_Phi(0.9999) -
              stan::math::inv_Phi(
                stan::model::rvalue(a, "a", stan::model::index_uni(1)))) /
              stan::math::exp(
                (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
              "assigning variable b", stan::model::index_uni(mn));
          }
        }
      } else {
        current_statement__ = 49;
        if ((stan::math::primitive_value(
               (stan::math::primitive_value(
                  stan::math::logical_gt(nlevels_a, 1)) &&
               stan::math::primitive_value(
                 stan::math::logical_eq(nlevels_d, 1))))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(nlevels_BMD, 1)))) {
          current_statement__ = 47;
          for (int mn = 1; mn <= nlevels_b; ++mn) {
            current_statement__ = 40;
            expr = ((q * (1 -
              stan::model::rvalue(a, "a", stan::model::index_uni(mn)))) +
              stan::model::rvalue(a, "a", stan::model::index_uni(mn)));
            current_statement__ = 45;
            if (stan::math::logical_lt(expr, 1.0)) {
              current_statement__ = 43;
              stan::model::assign(b,
                ((stan::math::inv_Phi(((q * (1 -
                    stan::model::rvalue(a, "a", stan::model::index_uni(mn))))
                    +
                    stan::model::rvalue(a, "a", stan::model::index_uni(mn))))
                -
                stan::math::inv_Phi(
                  stan::model::rvalue(a, "a", stan::model::index_uni(mn)))) /
                stan::math::exp(
                  (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                  stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                "assigning variable b", stan::model::index_uni(mn));
            } else {
              current_statement__ = 41;
              stan::model::assign(b, ((stan::math::inv_Phi(0.9999) -
                stan::math::inv_Phi(
                  stan::model::rvalue(a, "a", stan::model::index_uni(mn)))) /
                stan::math::exp(
                  (stan::model::rvalue(k, "k", stan::model::index_uni(1)) *
                  stan::model::rvalue(d, "d", stan::model::index_uni(1))))),
                "assigning variable b", stan::model::index_uni(mn));
            }
          }
        } else {
          current_statement__ = 39;
          if ((stan::math::primitive_value(
                 (stan::math::primitive_value(
                    stan::math::logical_eq(nlevels_a, 1)) &&
                 stan::math::primitive_value(
                   stan::math::logical_gt(nlevels_d, 1))))
              &&
              stan::math::primitive_value(
                stan::math::logical_gt(nlevels_BMD, 1)))) {
            current_statement__ = 37;
            for (int mn = 1; mn <= nlevels_b; ++mn) {
              current_statement__ = 30;
              expr = ((q * (1 -
                stan::model::rvalue(a, "a", stan::model::index_uni(1)))) +
                stan::model::rvalue(a, "a", stan::model::index_uni(1)));
              current_statement__ = 35;
              if (stan::math::logical_lt(expr, 1.0)) {
                current_statement__ = 33;
                stan::model::assign(b,
                  ((stan::math::inv_Phi(((q * (1 -
                      stan::model::rvalue(a, "a", stan::model::index_uni(1))))
                      +
                      stan::model::rvalue(a, "a", stan::model::index_uni(1))))
                  -
                  stan::math::inv_Phi(
                    stan::model::rvalue(a, "a", stan::model::index_uni(1))))
                  /
                  stan::math::exp(
                    (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                    *
                    stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                  "assigning variable b", stan::model::index_uni(mn));
              } else {
                current_statement__ = 31;
                stan::model::assign(b, ((stan::math::inv_Phi(0.9999) -
                  stan::math::inv_Phi(
                    stan::model::rvalue(a, "a", stan::model::index_uni(1))))
                  /
                  stan::math::exp(
                    (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                    *
                    stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                  "assigning variable b", stan::model::index_uni(mn));
              }
            }
          } else {
            current_statement__ = 29;
            if ((stan::math::primitive_value(
                   (stan::math::primitive_value(
                      stan::math::logical_gt(nlevels_a, 1)) &&
                   stan::math::primitive_value(
                     stan::math::logical_gt(nlevels_d, 1))))
                &&
                stan::math::primitive_value(
                  stan::math::logical_gt(nlevels_BMD, 1)))) {
              current_statement__ = 27;
              for (int mn = 1; mn <= nlevels_b; ++mn) {
                current_statement__ = 20;
                expr = ((q * (1 -
                  stan::model::rvalue(a, "a", stan::model::index_uni(mn)))) +
                  stan::model::rvalue(a, "a", stan::model::index_uni(mn)));
                current_statement__ = 25;
                if (stan::math::logical_lt(expr, 1.0)) {
                  current_statement__ = 23;
                  stan::model::assign(b,
                    ((stan::math::inv_Phi(((q * (1 -
                        stan::model::rvalue(a, "a",
                          stan::model::index_uni(mn)))) +
                        stan::model::rvalue(a, "a",
                          stan::model::index_uni(mn)))) -
                    stan::math::inv_Phi(
                      stan::model::rvalue(a, "a", stan::model::index_uni(mn))))
                    /
                    stan::math::exp(
                      (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                    "assigning variable b", stan::model::index_uni(mn));
                } else {
                  current_statement__ = 21;
                  stan::model::assign(b, ((stan::math::inv_Phi(0.9999) -
                    stan::math::inv_Phi(
                      stan::model::rvalue(a, "a", stan::model::index_uni(mn))))
                    /
                    stan::math::exp(
                      (stan::model::rvalue(k, "k", stan::model::index_uni(mn))
                      *
                      stan::model::rvalue(d, "d", stan::model::index_uni(mn))))),
                    "assigning variable b", stan::model::index_uni(mn));
                }
              }
            }
          }
        }
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "BMD", BMD, 0);
      if (emit_transformed_parameters__) {
        out__.write(a);
        out__.write(b);
        out__.write(d);
        out__.write(k);
        out__.write(BMD);
        out__.write(expr);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> par1 =
        std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(par1,
        in__.read<std::vector<local_scalar_t__>>(nlevels_a),
        "assigning variable par1");
      out__.write_free_lub(0, 1, par1);
      std::vector<local_scalar_t__> par2 =
        std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(par2,
        in__.read<std::vector<local_scalar_t__>>(nlevels_BMD),
        "assigning variable par2");
      out__.write_free_lb(0, par2);
      std::vector<local_scalar_t__> par3 =
        std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(par3,
        in__.read<std::vector<local_scalar_t__>>(nlevels_d),
        "assigning variable par3");
      out__.write(par3);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "par1", "double",
        std::vector<size_t>{static_cast<size_t>(nlevels_a)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "par2", "double",
        std::vector<size_t>{static_cast<size_t>(nlevels_BMD)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "par3", "double",
        std::vector<size_t>{static_cast<size_t>(nlevels_d)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> par1 =
        std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      current_statement__ = 1;
      par1 = context__.vals_r("par1");
      out__.write_free_lub(0, 1, par1);
      std::vector<local_scalar_t__> par2 =
        std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      current_statement__ = 2;
      par2 = context__.vals_r("par2");
      out__.write_free_lb(0, par2);
      std::vector<local_scalar_t__> par3 =
        std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      current_statement__ = 3;
      par3 = context__.vals_r("par3");
      out__.write(par3);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"par1", "par2", "par3"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"a", "b", "d", "k", "BMD", "expr"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    nlevels_a)},
                std::vector<size_t>{static_cast<size_t>(nlevels_BMD)},
                std::vector<size_t>{static_cast<size_t>(nlevels_d)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(nlevels_a)},
             std::vector<size_t>{static_cast<size_t>(nlevels_b)},
             std::vector<size_t>{static_cast<size_t>(nlevels_d)},
             std::vector<size_t>{static_cast<size_t>(nlevels_BMD)},
             std::vector<size_t>{static_cast<size_t>(nlevels_BMD)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
      param_names__.emplace_back(std::string() + "par1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
      param_names__.emplace_back(std::string() + "par2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
      param_names__.emplace_back(std::string() + "par3" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        param_names__.emplace_back(std::string() + "a" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_b; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        param_names__.emplace_back(std::string() + "d" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        param_names__.emplace_back(std::string() + "k" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        param_names__.emplace_back(std::string() + "BMD" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "expr");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
      param_names__.emplace_back(std::string() + "par1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
      param_names__.emplace_back(std::string() + "par2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
      param_names__.emplace_back(std::string() + "par3" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        param_names__.emplace_back(std::string() + "a" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_b; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        param_names__.emplace_back(std::string() + "d" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        param_names__.emplace_back(std::string() + "k" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        param_names__.emplace_back(std::string() + "BMD" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "expr");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"par1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_BMD) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_d) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_b) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_d) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_BMD) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"BMD\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_BMD) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"expr\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"par1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_BMD) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_d) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_b) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_d) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_BMD) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"BMD\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nlevels_BMD) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"expr\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((nlevels_a + nlevels_BMD) + nlevels_d);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((nlevels_a + nlevels_b) + nlevels_d) + nlevels_BMD) + nlevels_BMD)
      + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((nlevels_a + nlevels_BMD) + nlevels_d);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((nlevels_a + nlevels_b) + nlevels_d) + nlevels_BMD) + nlevels_BMD)
      + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mP4_Q_COV_namespace::model_mP4_Q_COV;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mP4_Q_COV_namespace::profiles__;
}
#endif
#endif
