// Generated by rstantools.  Do not edit by hand.

/*
    BMABMDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMABMDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BMABMDR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_mE4COV_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 44, column 2 to column 32)",
                                                      " (in 'string', line 45, column 2 to column 34)",
                                                      " (in 'string', line 46, column 2 to column 38)",
                                                      " (in 'string', line 47, column 2 to column 47)",
                                                      " (in 'string', line 48, column 2 to column 23)",
                                                      " (in 'string', line 49, column 2 to column 27)",
                                                      " (in 'string', line 52, column 2 to column 20)",
                                                      " (in 'string', line 53, column 2 to column 20)",
                                                      " (in 'string', line 54, column 2 to column 20)",
                                                      " (in 'string', line 55, column 2 to column 12)",
                                                      " (in 'string', line 56, column 2 to column 20)",
                                                      " (in 'string', line 57, column 2 to column 22)",
                                                      " (in 'string', line 58, column 2 to column 25)",
                                                      " (in 'string', line 59, column 2 to column 32)",
                                                      " (in 'string', line 60, column 2 to column 23)",
                                                      " (in 'string', line 63, column 4 to column 26)",
                                                      " (in 'string', line 62, column 24 to line 64, column 3)",
                                                      " (in 'string', line 62, column 2 to line 64, column 3)",
                                                      " (in 'string', line 69, column 4 to column 36)",
                                                      " (in 'string', line 68, column 25 to line 70, column 3)",
                                                      " (in 'string', line 68, column 8 to line 70, column 3)",
                                                      " (in 'string', line 67, column 4 to column 25)",
                                                      " (in 'string', line 66, column 19 to line 68, column 3)",
                                                      " (in 'string', line 66, column 2 to line 70, column 3)",
                                                      " (in 'string', line 72, column 4 to column 24)",
                                                      " (in 'string', line 76, column 6 to column 36)",
                                                      " (in 'string', line 75, column 46 to line 77, column 5)",
                                                      " (in 'string', line 75, column 10 to line 77, column 5)",
                                                      " (in 'string', line 74, column 6 to column 23)",
                                                      " (in 'string', line 73, column 40 to line 75, column 5)",
                                                      " (in 'string', line 73, column 4 to line 77, column 5)",
                                                      " (in 'string', line 78, column 4 to column 31)",
                                                      " (in 'string', line 71, column 24 to line 79, column 3)",
                                                      " (in 'string', line 71, column 2 to line 79, column 3)",
                                                      " (in 'string', line 82, column 4 to column 32)",
                                                      " (in 'string', line 81, column 28 to line 83, column 3)",
                                                      " (in 'string', line 81, column 2 to line 83, column 3)",
                                                      " (in 'string', line 86, column 4 to column 26)",
                                                      " (in 'string', line 85, column 26 to line 87, column 3)",
                                                      " (in 'string', line 85, column 2 to line 87, column 3)",
                                                      " (in 'string', line 93, column 6 to column 60)",
                                                      " (in 'string', line 92, column 46 to line 94, column 5)",
                                                      " (in 'string', line 92, column 10 to line 94, column 5)",
                                                      " (in 'string', line 91, column 6 to column 34)",
                                                      " (in 'string', line 90, column 40 to line 92, column 5)",
                                                      " (in 'string', line 90, column 4 to line 94, column 5)",
                                                      " (in 'string', line 89, column 24 to line 95, column 3)",
                                                      " (in 'string', line 89, column 2 to line 95, column 3)",
                                                      " (in 'string', line 142, column 8 to column 69)",
                                                      " (in 'string', line 141, column 30 to line 143, column 7)",
                                                      " (in 'string', line 141, column 12 to line 143, column 7)",
                                                      " (in 'string', line 140, column 8 to column 52)",
                                                      " (in 'string', line 139, column 30 to line 141, column 7)",
                                                      " (in 'string', line 139, column 12 to line 143, column 7)",
                                                      " (in 'string', line 138, column 8 to column 69)",
                                                      " (in 'string', line 137, column 30 to line 139, column 7)",
                                                      " (in 'string', line 137, column 12 to line 143, column 7)",
                                                      " (in 'string', line 136, column 8 to column 52)",
                                                      " (in 'string', line 135, column 24 to line 137, column 7)",
                                                      " (in 'string', line 135, column 6 to line 143, column 7)",
                                                      " (in 'string', line 134, column 26 to line 144, column 5)",
                                                      " (in 'string', line 134, column 4 to line 144, column 5)",
                                                      " (in 'string', line 133, column 63 to line 145, column 3)",
                                                      " (in 'string', line 133, column 9 to line 145, column 3)",
                                                      " (in 'string', line 130, column 8 to column 67)",
                                                      " (in 'string', line 129, column 30 to line 131, column 7)",
                                                      " (in 'string', line 129, column 12 to line 131, column 7)",
                                                      " (in 'string', line 128, column 8 to column 51)",
                                                      " (in 'string', line 127, column 30 to line 129, column 7)",
                                                      " (in 'string', line 127, column 12 to line 131, column 7)",
                                                      " (in 'string', line 126, column 8 to column 67)",
                                                      " (in 'string', line 125, column 30 to line 127, column 7)",
                                                      " (in 'string', line 125, column 12 to line 131, column 7)",
                                                      " (in 'string', line 124, column 8 to column 51)",
                                                      " (in 'string', line 123, column 24 to line 125, column 7)",
                                                      " (in 'string', line 123, column 6 to line 131, column 7)",
                                                      " (in 'string', line 122, column 26 to line 132, column 5)",
                                                      " (in 'string', line 122, column 4 to line 132, column 5)",
                                                      " (in 'string', line 121, column 64 to line 133, column 3)",
                                                      " (in 'string', line 121, column 9 to line 145, column 3)",
                                                      " (in 'string', line 118, column 8 to column 67)",
                                                      " (in 'string', line 117, column 30 to line 119, column 7)",
                                                      " (in 'string', line 117, column 12 to line 119, column 7)",
                                                      " (in 'string', line 116, column 8 to column 50)",
                                                      " (in 'string', line 115, column 30 to line 117, column 7)",
                                                      " (in 'string', line 115, column 12 to line 119, column 7)",
                                                      " (in 'string', line 114, column 8 to column 67)",
                                                      " (in 'string', line 113, column 30 to line 115, column 7)",
                                                      " (in 'string', line 113, column 12 to line 119, column 7)",
                                                      " (in 'string', line 112, column 8 to column 50)",
                                                      " (in 'string', line 111, column 24 to line 113, column 7)",
                                                      " (in 'string', line 111, column 6 to line 119, column 7)",
                                                      " (in 'string', line 110, column 26 to line 120, column 5)",
                                                      " (in 'string', line 110, column 4 to line 120, column 5)",
                                                      " (in 'string', line 109, column 65 to line 121, column 3)",
                                                      " (in 'string', line 109, column 9 to line 145, column 3)",
                                                      " (in 'string', line 106, column 8 to column 65)",
                                                      " (in 'string', line 105, column 30 to line 107, column 7)",
                                                      " (in 'string', line 105, column 12 to line 107, column 7)",
                                                      " (in 'string', line 104, column 8 to column 49)",
                                                      " (in 'string', line 103, column 30 to line 105, column 7)",
                                                      " (in 'string', line 103, column 12 to line 107, column 7)",
                                                      " (in 'string', line 102, column 8 to column 65)",
                                                      " (in 'string', line 101, column 30 to line 103, column 7)",
                                                      " (in 'string', line 101, column 12 to line 107, column 7)",
                                                      " (in 'string', line 100, column 8 to column 49)",
                                                      " (in 'string', line 99, column 24 to line 101, column 7)",
                                                      " (in 'string', line 99, column 6 to line 107, column 7)",
                                                      " (in 'string', line 98, column 26 to line 108, column 5)",
                                                      " (in 'string', line 98, column 4 to line 108, column 5)",
                                                      " (in 'string', line 97, column 59 to line 109, column 3)",
                                                      " (in 'string', line 97, column 2 to line 145, column 3)",
                                                      " (in 'string', line 150, column 4 to column 78)",
                                                      " (in 'string', line 149, column 23 to line 151, column 3)",
                                                      " (in 'string', line 149, column 2 to line 151, column 3)",
                                                      " (in 'string', line 154, column 4 to column 78)",
                                                      " (in 'string', line 153, column 25 to line 155, column 3)",
                                                      " (in 'string', line 153, column 2 to line 155, column 3)",
                                                      " (in 'string', line 158, column 4 to column 51)",
                                                      " (in 'string', line 157, column 27 to line 159, column 3)",
                                                      " (in 'string', line 157, column 2 to line 159, column 3)",
                                                      " (in 'string', line 162, column 53 to column 59)",
                                                      " (in 'string', line 162, column 4 to column 61)",
                                                      " (in 'string', line 161, column 23 to line 163, column 3)",
                                                      " (in 'string', line 161, column 2 to line 163, column 3)",
                                                      " (in 'string', line 165, column 2 to column 73)",
                                                      " (in 'string', line 242, column 8 to line 244, column 119)",
                                                      " (in 'string', line 241, column 28 to line 245, column 9)",
                                                      " (in 'string', line 241, column 8 to line 245, column 9)",
                                                      " (in 'string', line 240, column 20 to line 246, column 7)",
                                                      " (in 'string', line 240, column 6 to line 246, column 7)",
                                                      " (in 'string', line 239, column 47 to line 247, column 5)",
                                                      " (in 'string', line 239, column 11 to line 247, column 5)",
                                                      " (in 'string', line 234, column 8 to line 236, column 107)",
                                                      " (in 'string', line 233, column 28 to line 237, column 9)",
                                                      " (in 'string', line 233, column 8 to line 237, column 9)",
                                                      " (in 'string', line 232, column 20 to line 238, column 7)",
                                                      " (in 'string', line 232, column 6 to line 238, column 7)",
                                                      " (in 'string', line 231, column 40 to line 239, column 5)",
                                                      " (in 'string', line 231, column 4 to line 247, column 5)",
                                                      " (in 'string', line 229, column 9 to line 248, column 3)",
                                                      " (in 'string', line 222, column 10 to line 225, column 51)",
                                                      " (in 'string', line 221, column 28 to line 226, column 9)",
                                                      " (in 'string', line 221, column 8 to line 226, column 9)",
                                                      " (in 'string', line 220, column 20 to line 227, column 7)",
                                                      " (in 'string', line 220, column 6 to line 227, column 7)",
                                                      " (in 'string', line 219, column 46 to line 228, column 5)",
                                                      " (in 'string', line 219, column 10 to line 228, column 5)",
                                                      " (in 'string', line 213, column 10 to line 216, column 39)",
                                                      " (in 'string', line 212, column 28 to line 217, column 9)",
                                                      " (in 'string', line 212, column 8 to line 217, column 9)",
                                                      " (in 'string', line 211, column 20 to line 218, column 7)",
                                                      " (in 'string', line 211, column 6 to line 218, column 7)",
                                                      " (in 'string', line 210, column 40 to line 219, column 5)",
                                                      " (in 'string', line 210, column 4 to line 228, column 5)",
                                                      " (in 'string', line 208, column 85 to line 229, column 3)",
                                                      " (in 'string', line 208, column 9 to line 248, column 3)",
                                                      " (in 'string', line 201, column 10 to line 204, column 51)",
                                                      " (in 'string', line 200, column 28 to line 205, column 9)",
                                                      " (in 'string', line 200, column 8 to line 205, column 9)",
                                                      " (in 'string', line 199, column 20 to line 206, column 7)",
                                                      " (in 'string', line 199, column 6 to line 206, column 7)",
                                                      " (in 'string', line 198, column 47 to line 207, column 5)",
                                                      " (in 'string', line 198, column 11 to line 207, column 5)",
                                                      " (in 'string', line 192, column 10 to line 195, column 39)",
                                                      " (in 'string', line 191, column 28 to line 196, column 9)",
                                                      " (in 'string', line 191, column 8 to line 196, column 9)",
                                                      " (in 'string', line 190, column 20 to line 197, column 7)",
                                                      " (in 'string', line 190, column 6 to line 197, column 7)",
                                                      " (in 'string', line 189, column 40 to line 198, column 5)",
                                                      " (in 'string', line 189, column 4 to line 207, column 5)",
                                                      " (in 'string', line 187, column 86 to line 208, column 3)",
                                                      " (in 'string', line 187, column 9 to line 248, column 3)",
                                                      " (in 'string', line 180, column 10 to line 183, column 50)",
                                                      " (in 'string', line 179, column 28 to line 184, column 9)",
                                                      " (in 'string', line 179, column 8 to line 184, column 9)",
                                                      " (in 'string', line 178, column 20 to line 185, column 7)",
                                                      " (in 'string', line 178, column 6 to line 185, column 7)",
                                                      " (in 'string', line 177, column 46 to line 186, column 5)",
                                                      " (in 'string', line 177, column 10 to line 186, column 5)",
                                                      " (in 'string', line 171, column 10 to line 174, column 38)",
                                                      " (in 'string', line 170, column 28 to line 175, column 9)",
                                                      " (in 'string', line 170, column 8 to line 175, column 9)",
                                                      " (in 'string', line 169, column 20 to line 176, column 7)",
                                                      " (in 'string', line 169, column 6 to line 176, column 7)",
                                                      " (in 'string', line 168, column 40 to line 177, column 5)",
                                                      " (in 'string', line 168, column 4 to line 186, column 5)",
                                                      " (in 'string', line 166, column 78 to line 187, column 3)",
                                                      " (in 'string', line 166, column 2 to line 248, column 3)",
                                                      " (in 'string', line 15, column 2 to column 8)",
                                                      " (in 'string', line 17, column 2 to column 14)",
                                                      " (in 'string', line 18, column 2 to column 16)",
                                                      " (in 'string', line 19, column 2 to column 18)",
                                                      " (in 'string', line 20, column 2 to column 16)",
                                                      " (in 'string', line 21, column 2 to column 20)",
                                                      " (in 'string', line 22, column 2 to column 16)",
                                                      " (in 'string', line 23, column 9 to column 10)",
                                                      " (in 'string', line 23, column 2 to column 14)",
                                                      " (in 'string', line 24, column 9 to column 10)",
                                                      " (in 'string', line 24, column 2 to column 14)",
                                                      " (in 'string', line 25, column 9 to column 10)",
                                                      " (in 'string', line 25, column 2 to column 14)",
                                                      " (in 'string', line 26, column 9 to column 10)",
                                                      " (in 'string', line 26, column 2 to column 15)",
                                                      " (in 'string', line 27, column 9 to column 10)",
                                                      " (in 'string', line 27, column 12 to column 19)",
                                                      " (in 'string', line 27, column 2 to column 29)",
                                                      " (in 'string', line 28, column 2 to column 9)",
                                                      " (in 'string', line 29, column 2 to column 13)",
                                                      " (in 'string', line 30, column 11 to column 18)",
                                                      " (in 'string', line 30, column 2 to column 28)",
                                                      " (in 'string', line 31, column 11 to column 18)",
                                                      " (in 'string', line 31, column 2 to column 28)",
                                                      " (in 'string', line 32, column 11 to column 18)",
                                                      " (in 'string', line 32, column 2 to column 28)",
                                                      " (in 'string', line 33, column 11 to column 18)",
                                                      " (in 'string', line 33, column 2 to column 27)",
                                                      " (in 'string', line 34, column 11 to column 18)",
                                                      " (in 'string', line 34, column 2 to column 27)",
                                                      " (in 'string', line 35, column 2 to column 27)",
                                                      " (in 'string', line 36, column 2 to column 16)",
                                                      " (in 'string', line 37, column 2 to column 38)",
                                                      " (in 'string', line 38, column 2 to column 9)",
                                                      " (in 'string', line 39, column 2 to column 38)",
                                                      " (in 'string', line 40, column 2 to column 9)",
                                                      " (in 'string', line 41, column 2 to column 14)",
                                                      " (in 'string', line 44, column 21 to column 30)",
                                                      " (in 'string', line 45, column 21 to column 32)",
                                                      " (in 'string', line 46, column 23 to column 36)",
                                                      " (in 'string', line 47, column 32 to column 45)",
                                                      " (in 'string', line 48, column 12 to column 21)",
                                                      " (in 'string', line 49, column 12 to column 25)",
                                                      " (in 'string', line 52, column 9 to column 18)",
                                                      " (in 'string', line 53, column 9 to column 18)",
                                                      " (in 'string', line 54, column 9 to column 18)",
                                                      " (in 'string', line 56, column 9 to column 18)",
                                                      " (in 'string', line 57, column 9 to column 20)",
                                                      " (in 'string', line 58, column 14 to column 23)",
                                                      " (in 'string', line 59, column 17 to column 30)",
                                                      " (in 'string', line 60, column 12 to column 21)",
                                                      " (in 'string', line 3, column 4 to column 12)",
                                                      " (in 'string', line 4, column 4 to column 12)",
                                                      " (in 'string', line 5, column 4 to column 12)",
                                                      " (in 'string', line 6, column 4 to column 12)",
                                                      " (in 'string', line 7, column 4 to column 39)",
                                                      " (in 'string', line 8, column 4 to column 38)",
                                                      " (in 'string', line 9, column 4 to column 41)",
                                                      " (in 'string', line 10, column 4 to column 28)",
                                                      " (in 'string', line 11, column 4 to column 31)",
                                                      " (in 'string', line 2, column 74 to line 12, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
pert_dist_lpdf(const T0__& theta, const T1__& alpha, const T2__& beta,
               const T3__& lb, const T4__& ub, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x1;
    x1 = DUMMY_VAR__;
    
    local_scalar_t__ x2;
    x2 = DUMMY_VAR__;
    
    local_scalar_t__ x3;
    x3 = DUMMY_VAR__;
    
    local_scalar_t__ x4;
    x4 = DUMMY_VAR__;
    
    current_statement__ = 245;
    x1 = ((alpha - 1) * stan::math::log((theta - lb)));
    current_statement__ = 246;
    x2 = ((beta - 1) * stan::math::log((ub - theta)));
    current_statement__ = 247;
    x3 = (((alpha + beta) - 1) * stan::math::log((ub - lb)));
    current_statement__ = 248;
    x4 = lbeta(alpha, beta);
    current_statement__ = 249;
    return (((x1 + x2) - x3) - x4);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct pert_dist_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
operator()(const T0__& theta, const T1__& alpha, const T2__& beta,
           const T3__& lb, const T4__& ub, std::ostream* pstream__)  const 
{
return pert_dist_lpdf<propto__>(theta, alpha, beta, lb, ub, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_mE4COV final : public model_base_crtp<model_mE4COV> {
private:
  int N;
  int nlevels;
  int nlevels_a;
  int nlevels_BMD;
  int nlevels_d;
  int nlevels_sigma;
  int nlevels_b;
  Eigen::Matrix<double, -1, 1> n;
  Eigen::Matrix<double, -1, 1> x;
  Eigen::Matrix<double, -1, 1> m;
  Eigen::Matrix<double, -1, 1> s2;
  Eigen::Matrix<double, -1, -1> trt_ind;
  double q;
  double shift;
  Eigen::Matrix<double, -1, -1> priormu;
  Eigen::Matrix<double, -1, -1> priorlb;
  Eigen::Matrix<double, -1, -1> priorub;
  Eigen::Matrix<double, -1, -1> shape1;
  Eigen::Matrix<double, -1, -1> shape2;
  Eigen::Matrix<double, -1, -1> priorSigma;
  int data_type;
  int is_increasing;
  double L;
  int is_decreasing;
  double U;
  double truncd;
 
public:
  ~model_mE4COV() { }
  
  inline std::string model_name() const final { return "model_mE4COV"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_mE4COV(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_mE4COV_namespace::model_mE4COV";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 190;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 190;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 191;
      context__.validate_dims("data initialization","nlevels","int",
          context__.to_vec());
      nlevels = std::numeric_limits<int>::min();
      
      current_statement__ = 191;
      nlevels = context__.vals_i("nlevels")[(1 - 1)];
      current_statement__ = 192;
      context__.validate_dims("data initialization","nlevels_a","int",
          context__.to_vec());
      nlevels_a = std::numeric_limits<int>::min();
      
      current_statement__ = 192;
      nlevels_a = context__.vals_i("nlevels_a")[(1 - 1)];
      current_statement__ = 193;
      context__.validate_dims("data initialization","nlevels_BMD","int",
          context__.to_vec());
      nlevels_BMD = std::numeric_limits<int>::min();
      
      current_statement__ = 193;
      nlevels_BMD = context__.vals_i("nlevels_BMD")[(1 - 1)];
      current_statement__ = 194;
      context__.validate_dims("data initialization","nlevels_d","int",
          context__.to_vec());
      nlevels_d = std::numeric_limits<int>::min();
      
      current_statement__ = 194;
      nlevels_d = context__.vals_i("nlevels_d")[(1 - 1)];
      current_statement__ = 195;
      context__.validate_dims("data initialization","nlevels_sigma","int",
          context__.to_vec());
      nlevels_sigma = std::numeric_limits<int>::min();
      
      current_statement__ = 195;
      nlevels_sigma = context__.vals_i("nlevels_sigma")[(1 - 1)];
      current_statement__ = 196;
      context__.validate_dims("data initialization","nlevels_b","int",
          context__.to_vec());
      nlevels_b = std::numeric_limits<int>::min();
      
      current_statement__ = 196;
      nlevels_b = context__.vals_i("nlevels_b")[(1 - 1)];
      current_statement__ = 197;
      validate_non_negative_index("n", "N", N);
      current_statement__ = 198;
      context__.validate_dims("data initialization","n","double",
          context__.to_vec(N));
      n = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(n, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> n_flat__;
        current_statement__ = 198;
        assign(n_flat__, nil_index_list(), context__.vals_r("n"),
          "assigning variable n_flat__");
        current_statement__ = 198;
        pos__ = 1;
        current_statement__ = 198;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 198;
          assign(n, cons_list(index_uni(sym1__), nil_index_list()),
            n_flat__[(pos__ - 1)], "assigning variable n");
          current_statement__ = 198;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 199;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 200;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N));
      x = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 200;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 200;
        pos__ = 1;
        current_statement__ = 200;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 200;
          assign(x, cons_list(index_uni(sym1__), nil_index_list()),
            x_flat__[(pos__ - 1)], "assigning variable x");
          current_statement__ = 200;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 201;
      validate_non_negative_index("m", "N", N);
      current_statement__ = 202;
      context__.validate_dims("data initialization","m","double",
          context__.to_vec(N));
      m = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(m, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> m_flat__;
        current_statement__ = 202;
        assign(m_flat__, nil_index_list(), context__.vals_r("m"),
          "assigning variable m_flat__");
        current_statement__ = 202;
        pos__ = 1;
        current_statement__ = 202;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 202;
          assign(m, cons_list(index_uni(sym1__), nil_index_list()),
            m_flat__[(pos__ - 1)], "assigning variable m");
          current_statement__ = 202;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 203;
      validate_non_negative_index("s2", "N", N);
      current_statement__ = 204;
      context__.validate_dims("data initialization","s2","double",
          context__.to_vec(N));
      s2 = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(s2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> s2_flat__;
        current_statement__ = 204;
        assign(s2_flat__, nil_index_list(), context__.vals_r("s2"),
          "assigning variable s2_flat__");
        current_statement__ = 204;
        pos__ = 1;
        current_statement__ = 204;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 204;
          assign(s2, cons_list(index_uni(sym1__), nil_index_list()),
            s2_flat__[(pos__ - 1)], "assigning variable s2");
          current_statement__ = 204;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 205;
      validate_non_negative_index("trt_ind", "N", N);
      current_statement__ = 206;
      validate_non_negative_index("trt_ind", "nlevels", nlevels);
      current_statement__ = 207;
      context__.validate_dims("data initialization","trt_ind","double",
          context__.to_vec(N, nlevels));
      trt_ind = Eigen::Matrix<double, -1, -1>(N, nlevels);
      stan::math::fill(trt_ind, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> trt_ind_flat__;
        current_statement__ = 207;
        assign(trt_ind_flat__, nil_index_list(), context__.vals_r("trt_ind"),
          "assigning variable trt_ind_flat__");
        current_statement__ = 207;
        pos__ = 1;
        current_statement__ = 207;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 207;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 207;
            assign(trt_ind,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              trt_ind_flat__[(pos__ - 1)], "assigning variable trt_ind");
            current_statement__ = 207;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 208;
      context__.validate_dims("data initialization","q","double",
          context__.to_vec());
      q = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 208;
      q = context__.vals_r("q")[(1 - 1)];
      current_statement__ = 209;
      context__.validate_dims("data initialization","shift","double",
          context__.to_vec());
      shift = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 209;
      shift = context__.vals_r("shift")[(1 - 1)];
      current_statement__ = 210;
      validate_non_negative_index("priormu", "nlevels", nlevels);
      current_statement__ = 211;
      context__.validate_dims("data initialization","priormu","double",
          context__.to_vec(5, nlevels));
      priormu = Eigen::Matrix<double, -1, -1>(5, nlevels);
      stan::math::fill(priormu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priormu_flat__;
        current_statement__ = 211;
        assign(priormu_flat__, nil_index_list(), context__.vals_r("priormu"),
          "assigning variable priormu_flat__");
        current_statement__ = 211;
        pos__ = 1;
        current_statement__ = 211;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 211;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 211;
            assign(priormu,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priormu_flat__[(pos__ - 1)], "assigning variable priormu");
            current_statement__ = 211;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 212;
      validate_non_negative_index("priorlb", "nlevels", nlevels);
      current_statement__ = 213;
      context__.validate_dims("data initialization","priorlb","double",
          context__.to_vec(5, nlevels));
      priorlb = Eigen::Matrix<double, -1, -1>(5, nlevels);
      stan::math::fill(priorlb, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorlb_flat__;
        current_statement__ = 213;
        assign(priorlb_flat__, nil_index_list(), context__.vals_r("priorlb"),
          "assigning variable priorlb_flat__");
        current_statement__ = 213;
        pos__ = 1;
        current_statement__ = 213;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 213;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 213;
            assign(priorlb,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priorlb_flat__[(pos__ - 1)], "assigning variable priorlb");
            current_statement__ = 213;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 214;
      validate_non_negative_index("priorub", "nlevels", nlevels);
      current_statement__ = 215;
      context__.validate_dims("data initialization","priorub","double",
          context__.to_vec(5, nlevels));
      priorub = Eigen::Matrix<double, -1, -1>(5, nlevels);
      stan::math::fill(priorub, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorub_flat__;
        current_statement__ = 215;
        assign(priorub_flat__, nil_index_list(), context__.vals_r("priorub"),
          "assigning variable priorub_flat__");
        current_statement__ = 215;
        pos__ = 1;
        current_statement__ = 215;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 215;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 215;
            assign(priorub,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priorub_flat__[(pos__ - 1)], "assigning variable priorub");
            current_statement__ = 215;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 216;
      validate_non_negative_index("shape1", "nlevels", nlevels);
      current_statement__ = 217;
      context__.validate_dims("data initialization","shape1","double",
          context__.to_vec(5, nlevels));
      shape1 = Eigen::Matrix<double, -1, -1>(5, nlevels);
      stan::math::fill(shape1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> shape1_flat__;
        current_statement__ = 217;
        assign(shape1_flat__, nil_index_list(), context__.vals_r("shape1"),
          "assigning variable shape1_flat__");
        current_statement__ = 217;
        pos__ = 1;
        current_statement__ = 217;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 217;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 217;
            assign(shape1,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              shape1_flat__[(pos__ - 1)], "assigning variable shape1");
            current_statement__ = 217;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 218;
      validate_non_negative_index("shape2", "nlevels", nlevels);
      current_statement__ = 219;
      context__.validate_dims("data initialization","shape2","double",
          context__.to_vec(5, nlevels));
      shape2 = Eigen::Matrix<double, -1, -1>(5, nlevels);
      stan::math::fill(shape2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> shape2_flat__;
        current_statement__ = 219;
        assign(shape2_flat__, nil_index_list(), context__.vals_r("shape2"),
          "assigning variable shape2_flat__");
        current_statement__ = 219;
        pos__ = 1;
        current_statement__ = 219;
        for (int sym1__ = 1; sym1__ <= nlevels; ++sym1__) {
          current_statement__ = 219;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 219;
            assign(shape2,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              shape2_flat__[(pos__ - 1)], "assigning variable shape2");
            current_statement__ = 219;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 220;
      context__.validate_dims("data initialization","priorSigma","double",
          context__.to_vec(5, 5));
      priorSigma = Eigen::Matrix<double, -1, -1>(5, 5);
      stan::math::fill(priorSigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> priorSigma_flat__;
        current_statement__ = 220;
        assign(priorSigma_flat__, nil_index_list(),
          context__.vals_r("priorSigma"),
          "assigning variable priorSigma_flat__");
        current_statement__ = 220;
        pos__ = 1;
        current_statement__ = 220;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 220;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 220;
            assign(priorSigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              priorSigma_flat__[(pos__ - 1)], "assigning variable priorSigma");
            current_statement__ = 220;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 220;
      current_statement__ = 220;
      check_cov_matrix(function__, "priorSigma", priorSigma);
      current_statement__ = 221;
      context__.validate_dims("data initialization","data_type","int",
          context__.to_vec());
      data_type = std::numeric_limits<int>::min();
      
      current_statement__ = 221;
      data_type = context__.vals_i("data_type")[(1 - 1)];
      current_statement__ = 222;
      context__.validate_dims("data initialization","is_increasing","int",
          context__.to_vec());
      is_increasing = std::numeric_limits<int>::min();
      
      current_statement__ = 222;
      is_increasing = context__.vals_i("is_increasing")[(1 - 1)];
      current_statement__ = 222;
      current_statement__ = 222;
      check_greater_or_equal(function__, "is_increasing", is_increasing, 0);
      current_statement__ = 222;
      current_statement__ = 222;
      check_less_or_equal(function__, "is_increasing", is_increasing, 1);
      current_statement__ = 223;
      context__.validate_dims("data initialization","L","double",
          context__.to_vec());
      L = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 223;
      L = context__.vals_r("L")[(1 - 1)];
      current_statement__ = 224;
      context__.validate_dims("data initialization","is_decreasing","int",
          context__.to_vec());
      is_decreasing = std::numeric_limits<int>::min();
      
      current_statement__ = 224;
      is_decreasing = context__.vals_i("is_decreasing")[(1 - 1)];
      current_statement__ = 224;
      current_statement__ = 224;
      check_greater_or_equal(function__, "is_decreasing", is_decreasing, 0);
      current_statement__ = 224;
      current_statement__ = 224;
      check_less_or_equal(function__, "is_decreasing", is_decreasing, 1);
      current_statement__ = 225;
      context__.validate_dims("data initialization","U","double",
          context__.to_vec());
      U = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 225;
      U = context__.vals_r("U")[(1 - 1)];
      current_statement__ = 226;
      context__.validate_dims("data initialization","truncd","double",
          context__.to_vec());
      truncd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 226;
      truncd = context__.vals_r("truncd")[(1 - 1)];
      current_statement__ = 227;
      validate_non_negative_index("par1", "nlevels_a", nlevels_a);
      current_statement__ = 228;
      validate_non_negative_index("par2", "nlevels_BMD", nlevels_BMD);
      current_statement__ = 229;
      validate_non_negative_index("pars3i", "is_increasing", is_increasing);
      current_statement__ = 230;
      validate_non_negative_index("pars3d", "is_decreasing", is_decreasing);
      current_statement__ = 231;
      validate_non_negative_index("par4", "nlevels_d", nlevels_d);
      current_statement__ = 232;
      validate_non_negative_index("par5", "nlevels_sigma", nlevels_sigma);
      current_statement__ = 233;
      validate_non_negative_index("b", "nlevels_b", nlevels_b);
      current_statement__ = 234;
      validate_non_negative_index("a", "nlevels_a", nlevels_a);
      current_statement__ = 235;
      validate_non_negative_index("c", "nlevels_a", nlevels_a);
      current_statement__ = 236;
      validate_non_negative_index("d", "nlevels_d", nlevels_d);
      current_statement__ = 237;
      validate_non_negative_index("k", "nlevels_BMD", nlevels_BMD);
      current_statement__ = 238;
      validate_non_negative_index("mu_inf", "nlevels_a", nlevels_a);
      current_statement__ = 239;
      validate_non_negative_index("invsigma2", "nlevels_sigma", nlevels_sigma);
      current_statement__ = 240;
      validate_non_negative_index("mu_0", "nlevels_a", nlevels_a);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += nlevels_a;
      num_params_r__ += nlevels_BMD;
      num_params_r__ += is_increasing;
      num_params_r__ += is_decreasing;
      num_params_r__ += nlevels_d;
      num_params_r__ += nlevels_sigma;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_mE4COV_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> par1;
      par1 = std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        current_statement__ = 1;
        assign(par1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par1");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(par1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(par1[(sym1__ - 1)], 0, lp__),
            "assigning variable par1");
        } else {
          current_statement__ = 1;
          assign(par1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(par1[(sym1__ - 1)], 0),
            "assigning variable par1");
        }}
      std::vector<local_scalar_t__> par2;
      par2 = std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 2;
        assign(par2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(par2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(par2[(sym1__ - 1)], 0, lp__),
            "assigning variable par2");
        } else {
          current_statement__ = 2;
          assign(par2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(par2[(sym1__ - 1)], 0),
            "assigning variable par2");
        }}
      std::vector<local_scalar_t__> pars3i;
      pars3i = std::vector<local_scalar_t__>(is_increasing, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        current_statement__ = 3;
        assign(pars3i, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable pars3i");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(pars3i, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(pars3i[(sym1__ - 1)], 0, lp__),
            "assigning variable pars3i");
        } else {
          current_statement__ = 3;
          assign(pars3i, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(pars3i[(sym1__ - 1)], 0),
            "assigning variable pars3i");
        }}
      std::vector<local_scalar_t__> pars3d;
      pars3d = std::vector<local_scalar_t__>(is_decreasing, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        current_statement__ = 4;
        assign(pars3d, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable pars3d");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(pars3d, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(pars3d[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable pars3d");
        } else {
          current_statement__ = 4;
          assign(pars3d, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(pars3d[(sym1__ - 1)], 0, 1),
            "assigning variable pars3d");
        }}
      std::vector<local_scalar_t__> par4;
      par4 = std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        current_statement__ = 5;
        assign(par4, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par4");}
      std::vector<local_scalar_t__> par5;
      par5 = std::vector<local_scalar_t__>(nlevels_sigma, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
        current_statement__ = 6;
        assign(par5, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par5");}
      std::vector<local_scalar_t__> b;
      b = std::vector<local_scalar_t__>(nlevels_b, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> a;
      a = std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> c;
      c = std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      
      local_scalar_t__ par3;
      par3 = DUMMY_VAR__;
      
      std::vector<local_scalar_t__> d;
      d = std::vector<local_scalar_t__>(nlevels_d, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> k;
      k = std::vector<local_scalar_t__>(nlevels_BMD, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> mu_inf;
      mu_inf = std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> invsigma2;
      invsigma2 = std::vector<local_scalar_t__>(nlevels_sigma, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> mu_0;
      mu_0 = std::vector<local_scalar_t__>(nlevels_a, DUMMY_VAR__);
      
      current_statement__ = 18;
      for (int mn = 1; mn <= nlevels_d; ++mn) {
        current_statement__ = 16;
        assign(d, cons_list(index_uni(mn), nil_index_list()),
          stan::math::exp(par4[(mn - 1)]), "assigning variable d");}
      current_statement__ = 24;
      if (is_increasing) {
        current_statement__ = 22;
        par3 = (L + pars3i[(1 - 1)]);
      } else {
        current_statement__ = 21;
        if (is_decreasing) {
          current_statement__ = 19;
          par3 = (L + ((U - L) * pars3d[(1 - 1)]));
        } 
      }
      current_statement__ = 34;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 25;
        assign(mu_0, cons_list(index_uni(mn), nil_index_list()),
          par1[(mn - 1)], "assigning variable mu_0");
        current_statement__ = 31;
        if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
            logical_eq(data_type, 3)))) {
          current_statement__ = 29;
          assign(a, cons_list(index_uni(mn), nil_index_list()),
            par1[(mn - 1)], "assigning variable a");
        } else {
          current_statement__ = 28;
          if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
              logical_eq(data_type, 4)))) {
            current_statement__ = 26;
            assign(a, cons_list(index_uni(mn), nil_index_list()),
              (stan::math::log(par1[(mn - 1)]) - shift),
              "assigning variable a");
          } 
        }
        current_statement__ = 32;
        assign(mu_inf, cons_list(index_uni(mn), nil_index_list()),
          (par1[(mn - 1)] * par3), "assigning variable mu_inf");}
      current_statement__ = 37;
      for (int mn = 1; mn <= nlevels_sigma; ++mn) {
        current_statement__ = 35;
        assign(invsigma2, cons_list(index_uni(mn), nil_index_list()),
          stan::math::exp(par5[(mn - 1)]), "assigning variable invsigma2");}
      current_statement__ = 40;
      for (int mn = 1; mn <= nlevels_BMD; ++mn) {
        current_statement__ = 38;
        assign(k, cons_list(index_uni(mn), nil_index_list()),
          stan::math::log(par2[(mn - 1)]), "assigning variable k");}
      current_statement__ = 48;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 46;
        if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
            logical_eq(data_type, 3)))) {
          current_statement__ = 44;
          assign(c, cons_list(index_uni(mn), nil_index_list()),
            (mu_inf[(mn - 1)] / mu_0[(mn - 1)]), "assigning variable c");
        } else {
          current_statement__ = 43;
          if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
              logical_eq(data_type, 4)))) {
            current_statement__ = 41;
            assign(c, cons_list(index_uni(mn), nil_index_list()),
              ((stan::math::log(mu_inf[(mn - 1)]) - shift) /
                (stan::math::log(mu_0[(mn - 1)]) - shift)),
              "assigning variable c");
          } 
        }}
      current_statement__ = 112;
      if ((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) &&
          primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(
          logical_eq(nlevels_BMD, 1)))) {
        current_statement__ = 110;
        for (int mn = 1; mn <= nlevels_b; ++mn) {
          current_statement__ = 108;
          if (logical_eq(data_type, 1)) {
            current_statement__ = 106;
            assign(b, cons_list(index_uni(mn), nil_index_list()),
              (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                stan::math::log((1 - (q / (c[(1 - 1)] - 1))))),
              "assigning variable b");
          } else {
            current_statement__ = 105;
            if (logical_eq(data_type, 2)) {
              current_statement__ = 103;
              assign(b, cons_list(index_uni(mn), nil_index_list()),
                (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                  stan::math::log(
                    (1 -
                      (stan::math::log((1 + q)) /
                        (a[(1 - 1)] * (c[(1 - 1)] - 1)))))),
                "assigning variable b");
            } else {
              current_statement__ = 102;
              if (logical_eq(data_type, 3)) {
                current_statement__ = 100;
                assign(b, cons_list(index_uni(mn), nil_index_list()),
                  (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                    stan::math::log((1 + (q / (c[(1 - 1)] - 1))))),
                  "assigning variable b");
              } else {
                current_statement__ = 99;
                if (logical_eq(data_type, 4)) {
                  current_statement__ = 97;
                  assign(b, cons_list(index_uni(mn), nil_index_list()),
                    (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                      stan::math::log(
                        (1 -
                          (stan::math::log((1 - q)) /
                            (a[(1 - 1)] * (c[(1 - 1)] - 1)))))),
                    "assigning variable b");
                } 
              }
            }
          }}
      } else {
        current_statement__ = 96;
        if ((primitive_value((primitive_value(logical_gt(nlevels_a, 1)) &&
            primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(
            logical_eq(nlevels_BMD, 1)))) {
          current_statement__ = 94;
          for (int mn = 1; mn <= nlevels_b; ++mn) {
            current_statement__ = 92;
            if (logical_eq(data_type, 1)) {
              current_statement__ = 90;
              assign(b, cons_list(index_uni(mn), nil_index_list()),
                (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                  stan::math::log((1 - (q / (c[(mn - 1)] - 1))))),
                "assigning variable b");
            } else {
              current_statement__ = 89;
              if (logical_eq(data_type, 2)) {
                current_statement__ = 87;
                assign(b, cons_list(index_uni(mn), nil_index_list()),
                  (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                    stan::math::log(
                      (1 -
                        (stan::math::log((1 + q)) /
                          (a[(mn - 1)] * (c[(mn - 1)] - 1)))))),
                  "assigning variable b");
              } else {
                current_statement__ = 86;
                if (logical_eq(data_type, 3)) {
                  current_statement__ = 84;
                  assign(b, cons_list(index_uni(mn), nil_index_list()),
                    (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                      stan::math::log((1 + (q / (c[(mn - 1)] - 1))))),
                    "assigning variable b");
                } else {
                  current_statement__ = 83;
                  if (logical_eq(data_type, 4)) {
                    current_statement__ = 81;
                    assign(b, cons_list(index_uni(mn), nil_index_list()),
                      (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                        stan::math::log(
                          (1 -
                            (stan::math::log((1 - q)) /
                              (a[(mn - 1)] * (c[(mn - 1)] - 1)))))),
                      "assigning variable b");
                  } 
                }
              }
            }}
        } else {
          current_statement__ = 80;
          if ((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) &&
              primitive_value(logical_gt(nlevels_d, 1)))) && primitive_value(
              logical_gt(nlevels_BMD, 1)))) {
            current_statement__ = 78;
            for (int mn = 1; mn <= nlevels_b; ++mn) {
              current_statement__ = 76;
              if (logical_eq(data_type, 1)) {
                current_statement__ = 74;
                assign(b, cons_list(index_uni(mn), nil_index_list()),
                  (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                    stan::math::log((1 - (q / (c[(1 - 1)] - 1))))),
                  "assigning variable b");
              } else {
                current_statement__ = 73;
                if (logical_eq(data_type, 2)) {
                  current_statement__ = 71;
                  assign(b, cons_list(index_uni(mn), nil_index_list()),
                    (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                      stan::math::log(
                        (1 -
                          (stan::math::log((1 + q)) /
                            (a[(1 - 1)] * (c[(1 - 1)] - 1)))))),
                    "assigning variable b");
                } else {
                  current_statement__ = 70;
                  if (logical_eq(data_type, 3)) {
                    current_statement__ = 68;
                    assign(b, cons_list(index_uni(mn), nil_index_list()),
                      (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                        stan::math::log((1 + (q / (c[(1 - 1)] - 1))))),
                      "assigning variable b");
                  } else {
                    current_statement__ = 67;
                    if (logical_eq(data_type, 4)) {
                      current_statement__ = 65;
                      assign(b, cons_list(index_uni(mn), nil_index_list()),
                        (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                          stan::math::log(
                            (1 -
                              (stan::math::log((1 - q)) /
                                (a[(1 - 1)] * (c[(1 - 1)] - 1)))))),
                        "assigning variable b");
                    } 
                  }
                }
              }}
          } else {
            current_statement__ = 64;
            if ((primitive_value((primitive_value(logical_gt(nlevels_a, 1))
                && primitive_value(logical_gt(nlevels_d, 1)))) &&
                primitive_value(logical_gt(nlevels_BMD, 1)))) {
              current_statement__ = 62;
              for (int mn = 1; mn <= nlevels_b; ++mn) {
                current_statement__ = 60;
                if (logical_eq(data_type, 1)) {
                  current_statement__ = 58;
                  assign(b, cons_list(index_uni(mn), nil_index_list()),
                    (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                      stan::math::log((1 - (q / (c[(mn - 1)] - 1))))),
                    "assigning variable b");
                } else {
                  current_statement__ = 57;
                  if (logical_eq(data_type, 2)) {
                    current_statement__ = 55;
                    assign(b, cons_list(index_uni(mn), nil_index_list()),
                      (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                        stan::math::log(
                          (1 -
                            (stan::math::log((1 + q)) /
                              (a[(mn - 1)] * (c[(mn - 1)] - 1)))))),
                      "assigning variable b");
                  } else {
                    current_statement__ = 54;
                    if (logical_eq(data_type, 3)) {
                      current_statement__ = 52;
                      assign(b, cons_list(index_uni(mn), nil_index_list()),
                        (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                          stan::math::log((1 + (q / (c[(mn - 1)] - 1))))),
                        "assigning variable b");
                    } else {
                      current_statement__ = 51;
                      if (logical_eq(data_type, 4)) {
                        current_statement__ = 49;
                        assign(b, cons_list(index_uni(mn), nil_index_list()),
                          (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                            stan::math::log(
                              (1 -
                                (stan::math::log((1 - q)) /
                                  (a[(mn - 1)] * (c[(mn - 1)] - 1)))))),
                          "assigning variable b");
                      } 
                    }
                  }
                }}
            } 
          }
        }
      }
      {
        current_statement__ = 115;
        for (int i = 1; i <= nlevels_a; ++i) {
          current_statement__ = 113;
          lp_accum__.add(
            pert_dist_lpdf<propto__>(par1[(i - 1)],
              rvalue(shape1,
                cons_list(index_uni(1),
                  cons_list(index_uni(i), nil_index_list())), "shape1"),
              rvalue(shape2,
                cons_list(index_uni(1),
                  cons_list(index_uni(i), nil_index_list())), "shape2"),
              rvalue(priorlb,
                cons_list(index_uni(1),
                  cons_list(index_uni(i), nil_index_list())), "priorlb"),
              rvalue(priorub,
                cons_list(index_uni(1),
                  cons_list(index_uni(i), nil_index_list())), "priorub"), pstream__));
        }
        current_statement__ = 118;
        for (int i = 1; i <= nlevels_BMD; ++i) {
          current_statement__ = 116;
          lp_accum__.add(
            pert_dist_lpdf<propto__>(par2[(i - 1)],
              rvalue(shape1,
                cons_list(index_uni(2),
                  cons_list(index_uni(i), nil_index_list())), "shape1"),
              rvalue(shape2,
                cons_list(index_uni(2),
                  cons_list(index_uni(i), nil_index_list())), "shape2"),
              rvalue(priorlb,
                cons_list(index_uni(2),
                  cons_list(index_uni(i), nil_index_list())), "priorlb"),
              rvalue(priorub,
                cons_list(index_uni(2),
                  cons_list(index_uni(i), nil_index_list())), "priorub"), pstream__));
        }
        current_statement__ = 121;
        for (int i = 1; i <= nlevels_sigma; ++i) {
          current_statement__ = 119;
          lp_accum__.add(
            normal_lpdf<propto__>(par5[(i - 1)],
              rvalue(priormu,
                cons_list(index_uni(5),
                  cons_list(index_uni(i), nil_index_list())), "priormu"),
              rvalue(priorSigma,
                cons_list(index_uni(5),
                  cons_list(index_uni(5), nil_index_list())), "priorSigma")));
        }
        current_statement__ = 125;
        for (int i = 1; i <= nlevels_d; ++i) {
          current_statement__ = 122;
          if (logical_gt(par4[(i - 1)], truncd)) {
            current_statement__ = 122;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 122;
            lp_accum__.add(
              -normal_cdf_log(truncd,
                 rvalue(priormu,
                   cons_list(index_uni(4),
                     cons_list(index_uni(i), nil_index_list())), "priormu"),
                 rvalue(priorSigma,
                   cons_list(index_uni(4),
                     cons_list(index_uni(4), nil_index_list())),
                   "priorSigma")));
          }
          current_statement__ = 123;
          lp_accum__.add(
            normal_lpdf<propto__>(par4[(i - 1)],
              rvalue(priormu,
                cons_list(index_uni(4),
                  cons_list(index_uni(i), nil_index_list())), "priormu"),
              rvalue(priorSigma,
                cons_list(index_uni(4),
                  cons_list(index_uni(4), nil_index_list())), "priorSigma")));
        }
        current_statement__ = 126;
        lp_accum__.add(
          pert_dist_lpdf<propto__>(par3,
            rvalue(shape1,
              cons_list(index_uni(3),
                cons_list(index_uni(1), nil_index_list())), "shape1"),
            rvalue(shape2,
              cons_list(index_uni(3),
                cons_list(index_uni(1), nil_index_list())), "shape2"),
            rvalue(priorlb,
              cons_list(index_uni(3),
                cons_list(index_uni(1), nil_index_list())), "priorlb"),
            rvalue(priorub,
              cons_list(index_uni(3),
                cons_list(index_uni(1), nil_index_list())), "priorub"), pstream__));
        current_statement__ = 189;
        if ((primitive_value((primitive_value((primitive_value(
            logical_gt(nlevels_d, 1)) && primitive_value(
            logical_gt(nlevels_BMD, 1)))) && primitive_value(
            logical_eq(nlevels_a, 1)))) && primitive_value(
            logical_eq(nlevels_sigma, 1)))) {
          current_statement__ = 187;
          if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
              logical_eq(data_type, 3)))) {
            current_statement__ = 185;
            for (int i = 1; i <= N; ++i) {
              current_statement__ = 183;
              for (int mn = 1; mn <= nlevels; ++mn) {
                current_statement__ = 181;
                lp_accum__.add(
                  ((((((-0.5 * n[(i - 1)]) *
                        stan::math::log((2 * stan::math::pi()))) +
                       ((0.5 * n[(i - 1)]) *
                         stan::math::log(invsigma2[(1 - 1)]))) -
                      (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) *
                        invsigma2[(1 - 1)])) -
                     (((0.5 * n[(i - 1)]) *
                        square(
                          ((m[(i - 1)] - a[(1 - 1)]) -
                            ((a[(1 - 1)] * (c[(1 - 1)] - 1)) *
                              (1 -
                                stan::math::exp(
                                  (-b[(mn - 1)] *
                                    pow(x[(i - 1)], d[(mn - 1)])))))))) *
                       invsigma2[(1 - 1)])) *
                    rvalue(trt_ind,
                      cons_list(index_uni(i),
                        cons_list(index_uni(mn), nil_index_list())),
                      "trt_ind")));}}
          } else {
            current_statement__ = 180;
            if ((primitive_value(logical_eq(data_type, 2)) ||
                primitive_value(logical_eq(data_type, 4)))) {
              current_statement__ = 178;
              for (int i = 1; i <= N; ++i) {
                current_statement__ = 176;
                for (int mn = 1; mn <= nlevels; ++mn) {
                  current_statement__ = 174;
                  lp_accum__.add(
                    (((((((-0.5 * n[(i - 1)]) *
                           stan::math::log((2 * stan::math::pi()))) +
                          ((0.5 * n[(i - 1)]) *
                            stan::math::log(invsigma2[(1 - 1)]))) -
                         (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) *
                           invsigma2[(1 - 1)])) -
                        (((0.5 * n[(i - 1)]) *
                           square(
                             ((m[(i - 1)] - a[(1 - 1)]) -
                               ((a[(1 - 1)] * (c[(1 - 1)] - 1)) *
                                 (1 -
                                   stan::math::exp(
                                     (-b[(mn - 1)] *
                                       pow(x[(i - 1)], d[(mn - 1)])))))))) *
                          invsigma2[(1 - 1)])) - (m[(i - 1)] * n[(i - 1)])) *
                      rvalue(trt_ind,
                        cons_list(index_uni(i),
                          cons_list(index_uni(mn), nil_index_list())),
                        "trt_ind")));}}
            } 
          }
        } else {
          current_statement__ = 173;
          if ((primitive_value((primitive_value((primitive_value(
              logical_gt(nlevels_a, 1)) && primitive_value(
              logical_gt(nlevels_sigma, 1)))) && primitive_value(
              logical_eq(nlevels_BMD, 1)))) && primitive_value(
              logical_eq(nlevels_d, 1)))) {
            current_statement__ = 171;
            if ((primitive_value(logical_eq(data_type, 1)) ||
                primitive_value(logical_eq(data_type, 3)))) {
              current_statement__ = 169;
              for (int i = 1; i <= N; ++i) {
                current_statement__ = 167;
                for (int mn = 1; mn <= nlevels; ++mn) {
                  current_statement__ = 165;
                  lp_accum__.add(
                    ((((((-0.5 * n[(i - 1)]) *
                          stan::math::log((2 * stan::math::pi()))) +
                         ((0.5 * n[(i - 1)]) *
                           stan::math::log(invsigma2[(mn - 1)]))) -
                        (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) *
                          invsigma2[(mn - 1)])) -
                       (((0.5 * n[(i - 1)]) *
                          square(
                            ((m[(i - 1)] - a[(mn - 1)]) -
                              ((a[(mn - 1)] * (c[(mn - 1)] - 1)) *
                                (1 -
                                  stan::math::exp(
                                    (-b[(mn - 1)] *
                                      pow(x[(i - 1)], d[(1 - 1)])))))))) *
                         invsigma2[(mn - 1)])) *
                      rvalue(trt_ind,
                        cons_list(index_uni(i),
                          cons_list(index_uni(mn), nil_index_list())),
                        "trt_ind")));}}
            } else {
              current_statement__ = 164;
              if ((primitive_value(logical_eq(data_type, 2)) ||
                  primitive_value(logical_eq(data_type, 4)))) {
                current_statement__ = 162;
                for (int i = 1; i <= N; ++i) {
                  current_statement__ = 160;
                  for (int mn = 1; mn <= nlevels; ++mn) {
                    current_statement__ = 158;
                    lp_accum__.add(
                      (((((((-0.5 * n[(i - 1)]) *
                             stan::math::log((2 * stan::math::pi()))) +
                            ((0.5 * n[(i - 1)]) *
                              stan::math::log(invsigma2[(mn - 1)]))) -
                           (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) *
                             invsigma2[(mn - 1)])) -
                          (((0.5 * n[(i - 1)]) *
                             square(
                               ((m[(i - 1)] - a[(mn - 1)]) -
                                 ((a[(mn - 1)] * (c[(mn - 1)] - 1)) *
                                   (1 -
                                     stan::math::exp(
                                       (-b[(mn - 1)] *
                                         pow(x[(i - 1)], d[(1 - 1)])))))))) *
                            invsigma2[(mn - 1)])) -
                         (m[(i - 1)] * n[(i - 1)])) *
                        rvalue(trt_ind,
                          cons_list(index_uni(i),
                            cons_list(index_uni(mn), nil_index_list())),
                          "trt_ind")));}}
              } 
            }
          } else {
            current_statement__ = 157;
            if ((primitive_value((primitive_value((primitive_value(
                logical_gt(nlevels_d, 1)) && primitive_value(
                logical_gt(nlevels_BMD, 1)))) && primitive_value(
                logical_gt(nlevels_a, 1)))) && primitive_value(
                logical_gt(nlevels_sigma, 1)))) {
              current_statement__ = 155;
              if ((primitive_value(logical_eq(data_type, 1)) ||
                  primitive_value(logical_eq(data_type, 3)))) {
                current_statement__ = 153;
                for (int i = 1; i <= N; ++i) {
                  current_statement__ = 151;
                  for (int mn = 1; mn <= nlevels; ++mn) {
                    current_statement__ = 149;
                    lp_accum__.add(
                      ((((((-0.5 * n[(i - 1)]) *
                            stan::math::log((2 * stan::math::pi()))) +
                           ((0.5 * n[(i - 1)]) *
                             stan::math::log(invsigma2[(mn - 1)]))) -
                          (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) *
                            invsigma2[(mn - 1)])) -
                         (((0.5 * n[(i - 1)]) *
                            square(
                              ((m[(i - 1)] - a[(mn - 1)]) -
                                ((a[(mn - 1)] * (c[(mn - 1)] - 1)) *
                                  (1 -
                                    stan::math::exp(
                                      (-b[(mn - 1)] *
                                        pow(x[(i - 1)], d[(mn - 1)])))))))) *
                           invsigma2[(mn - 1)])) *
                        rvalue(trt_ind,
                          cons_list(index_uni(i),
                            cons_list(index_uni(mn), nil_index_list())),
                          "trt_ind")));}}
              } else {
                current_statement__ = 148;
                if ((primitive_value(logical_eq(data_type, 2)) ||
                    primitive_value(logical_eq(data_type, 4)))) {
                  current_statement__ = 146;
                  for (int i = 1; i <= N; ++i) {
                    current_statement__ = 144;
                    for (int mn = 1; mn <= nlevels; ++mn) {
                      current_statement__ = 142;
                      lp_accum__.add(
                        (((((((-0.5 * n[(i - 1)]) *
                               stan::math::log((2 * stan::math::pi()))) +
                              ((0.5 * n[(i - 1)]) *
                                stan::math::log(invsigma2[(mn - 1)]))) -
                             (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) *
                               invsigma2[(mn - 1)])) -
                            (((0.5 * n[(i - 1)]) *
                               square(
                                 ((m[(i - 1)] - a[(mn - 1)]) -
                                   ((a[(mn - 1)] * (c[(mn - 1)] - 1)) *
                                     (1 -
                                       stan::math::exp(
                                         (-b[(mn - 1)] *
                                           pow(x[(i - 1)], d[(mn - 1)]))))))))
                              * invsigma2[(mn - 1)])) -
                           (m[(i - 1)] * n[(i - 1)])) *
                          rvalue(trt_ind,
                            cons_list(index_uni(i),
                              cons_list(index_uni(mn), nil_index_list())),
                            "trt_ind")));}}
                } 
              }
            } else {
              current_statement__ = 140;
              if ((primitive_value(logical_eq(data_type, 1)) ||
                  primitive_value(logical_eq(data_type, 3)))) {
                current_statement__ = 138;
                for (int i = 1; i <= N; ++i) {
                  current_statement__ = 136;
                  for (int mn = 1; mn <= nlevels; ++mn) {
                    current_statement__ = 134;
                    lp_accum__.add(
                      ((((((-0.5 * n[(i - 1)]) *
                            stan::math::log((2 * stan::math::pi()))) +
                           ((0.5 * n[(i - 1)]) *
                             stan::math::log(invsigma2[(1 - 1)]))) -
                          (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) *
                            invsigma2[(1 - 1)])) -
                         (((0.5 * n[(i - 1)]) *
                            square(
                              ((m[(i - 1)] - a[(1 - 1)]) -
                                ((a[(1 - 1)] * (c[(1 - 1)] - 1)) *
                                  (1 -
                                    stan::math::exp(
                                      (-b[(1 - 1)] *
                                        pow(x[(i - 1)], d[(1 - 1)])))))))) *
                           invsigma2[(1 - 1)])) *
                        rvalue(trt_ind,
                          cons_list(index_uni(i),
                            cons_list(index_uni(mn), nil_index_list())),
                          "trt_ind")));}}
              } else {
                current_statement__ = 133;
                if ((primitive_value(logical_eq(data_type, 2)) ||
                    primitive_value(logical_eq(data_type, 4)))) {
                  current_statement__ = 131;
                  for (int i = 1; i <= N; ++i) {
                    current_statement__ = 129;
                    for (int mn = 1; mn <= nlevels; ++mn) {
                      current_statement__ = 127;
                      lp_accum__.add(
                        (((((((-0.5 * n[(i - 1)]) *
                               stan::math::log((2 * stan::math::pi()))) +
                              ((0.5 * n[(i - 1)]) *
                                stan::math::log(invsigma2[(1 - 1)]))) -
                             (((0.5 * (n[(i - 1)] - 1)) * s2[(i - 1)]) *
                               invsigma2[(1 - 1)])) -
                            (((0.5 * n[(i - 1)]) *
                               square(
                                 ((m[(i - 1)] - a[(1 - 1)]) -
                                   ((a[(1 - 1)] * (c[(1 - 1)] - 1)) *
                                     (1 -
                                       stan::math::exp(
                                         (-b[(1 - 1)] *
                                           pow(x[(i - 1)], d[(1 - 1)]))))))))
                              * invsigma2[(1 - 1)])) -
                           (m[(i - 1)] * n[(i - 1)])) *
                          rvalue(trt_ind,
                            cons_list(index_uni(i),
                              cons_list(index_uni(mn), nil_index_list())),
                            "trt_ind")));}}
                } 
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_mE4COV_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> par1;
      par1 = std::vector<double>(nlevels_a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        current_statement__ = 1;
        assign(par1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par1");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        current_statement__ = 1;
        assign(par1, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(par1[(sym1__ - 1)], 0),
          "assigning variable par1");}
      std::vector<double> par2;
      par2 = std::vector<double>(nlevels_BMD, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 2;
        assign(par2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 2;
        assign(par2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(par2[(sym1__ - 1)], 0),
          "assigning variable par2");}
      std::vector<double> pars3i;
      pars3i = std::vector<double>(is_increasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        current_statement__ = 3;
        assign(pars3i, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable pars3i");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        current_statement__ = 3;
        assign(pars3i, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(pars3i[(sym1__ - 1)], 0),
          "assigning variable pars3i");}
      std::vector<double> pars3d;
      pars3d = std::vector<double>(is_decreasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        current_statement__ = 4;
        assign(pars3d, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable pars3d");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        current_statement__ = 4;
        assign(pars3d, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(pars3d[(sym1__ - 1)], 0, 1),
          "assigning variable pars3d");}
      std::vector<double> par4;
      par4 = std::vector<double>(nlevels_d, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        current_statement__ = 5;
        assign(par4, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par4");}
      std::vector<double> par5;
      par5 = std::vector<double>(nlevels_sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
        current_statement__ = 6;
        assign(par5, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable par5");}
      std::vector<double> b;
      b = std::vector<double>(nlevels_b, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> a;
      a = std::vector<double>(nlevels_a, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> c;
      c = std::vector<double>(nlevels_a, std::numeric_limits<double>::quiet_NaN());
      
      double par3;
      par3 = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<double> d;
      d = std::vector<double>(nlevels_d, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> k;
      k = std::vector<double>(nlevels_BMD, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> mu_inf;
      mu_inf = std::vector<double>(nlevels_a, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> invsigma2;
      invsigma2 = std::vector<double>(nlevels_sigma, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> mu_0;
      mu_0 = std::vector<double>(nlevels_a, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        vars__.emplace_back(par1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        vars__.emplace_back(par2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        vars__.emplace_back(pars3i[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        vars__.emplace_back(pars3d[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        vars__.emplace_back(par4[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
        vars__.emplace_back(par5[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 18;
      for (int mn = 1; mn <= nlevels_d; ++mn) {
        current_statement__ = 16;
        assign(d, cons_list(index_uni(mn), nil_index_list()),
          stan::math::exp(par4[(mn - 1)]), "assigning variable d");}
      current_statement__ = 24;
      if (is_increasing) {
        current_statement__ = 22;
        par3 = (L + pars3i[(1 - 1)]);
      } else {
        current_statement__ = 21;
        if (is_decreasing) {
          current_statement__ = 19;
          par3 = (L + ((U - L) * pars3d[(1 - 1)]));
        } 
      }
      current_statement__ = 34;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 25;
        assign(mu_0, cons_list(index_uni(mn), nil_index_list()),
          par1[(mn - 1)], "assigning variable mu_0");
        current_statement__ = 31;
        if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
            logical_eq(data_type, 3)))) {
          current_statement__ = 29;
          assign(a, cons_list(index_uni(mn), nil_index_list()),
            par1[(mn - 1)], "assigning variable a");
        } else {
          current_statement__ = 28;
          if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
              logical_eq(data_type, 4)))) {
            current_statement__ = 26;
            assign(a, cons_list(index_uni(mn), nil_index_list()),
              (stan::math::log(par1[(mn - 1)]) - shift),
              "assigning variable a");
          } 
        }
        current_statement__ = 32;
        assign(mu_inf, cons_list(index_uni(mn), nil_index_list()),
          (par1[(mn - 1)] * par3), "assigning variable mu_inf");}
      current_statement__ = 37;
      for (int mn = 1; mn <= nlevels_sigma; ++mn) {
        current_statement__ = 35;
        assign(invsigma2, cons_list(index_uni(mn), nil_index_list()),
          stan::math::exp(par5[(mn - 1)]), "assigning variable invsigma2");}
      current_statement__ = 40;
      for (int mn = 1; mn <= nlevels_BMD; ++mn) {
        current_statement__ = 38;
        assign(k, cons_list(index_uni(mn), nil_index_list()),
          stan::math::log(par2[(mn - 1)]), "assigning variable k");}
      current_statement__ = 48;
      for (int mn = 1; mn <= nlevels_a; ++mn) {
        current_statement__ = 46;
        if ((primitive_value(logical_eq(data_type, 1)) || primitive_value(
            logical_eq(data_type, 3)))) {
          current_statement__ = 44;
          assign(c, cons_list(index_uni(mn), nil_index_list()),
            (mu_inf[(mn - 1)] / mu_0[(mn - 1)]), "assigning variable c");
        } else {
          current_statement__ = 43;
          if ((primitive_value(logical_eq(data_type, 2)) || primitive_value(
              logical_eq(data_type, 4)))) {
            current_statement__ = 41;
            assign(c, cons_list(index_uni(mn), nil_index_list()),
              ((stan::math::log(mu_inf[(mn - 1)]) - shift) /
                (stan::math::log(mu_0[(mn - 1)]) - shift)),
              "assigning variable c");
          } 
        }}
      current_statement__ = 112;
      if ((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) &&
          primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(
          logical_eq(nlevels_BMD, 1)))) {
        current_statement__ = 110;
        for (int mn = 1; mn <= nlevels_b; ++mn) {
          current_statement__ = 108;
          if (logical_eq(data_type, 1)) {
            current_statement__ = 106;
            assign(b, cons_list(index_uni(mn), nil_index_list()),
              (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                stan::math::log((1 - (q / (c[(1 - 1)] - 1))))),
              "assigning variable b");
          } else {
            current_statement__ = 105;
            if (logical_eq(data_type, 2)) {
              current_statement__ = 103;
              assign(b, cons_list(index_uni(mn), nil_index_list()),
                (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                  stan::math::log(
                    (1 -
                      (stan::math::log((1 + q)) /
                        (a[(1 - 1)] * (c[(1 - 1)] - 1)))))),
                "assigning variable b");
            } else {
              current_statement__ = 102;
              if (logical_eq(data_type, 3)) {
                current_statement__ = 100;
                assign(b, cons_list(index_uni(mn), nil_index_list()),
                  (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                    stan::math::log((1 + (q / (c[(1 - 1)] - 1))))),
                  "assigning variable b");
              } else {
                current_statement__ = 99;
                if (logical_eq(data_type, 4)) {
                  current_statement__ = 97;
                  assign(b, cons_list(index_uni(mn), nil_index_list()),
                    (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                      stan::math::log(
                        (1 -
                          (stan::math::log((1 - q)) /
                            (a[(1 - 1)] * (c[(1 - 1)] - 1)))))),
                    "assigning variable b");
                } 
              }
            }
          }}
      } else {
        current_statement__ = 96;
        if ((primitive_value((primitive_value(logical_gt(nlevels_a, 1)) &&
            primitive_value(logical_eq(nlevels_d, 1)))) && primitive_value(
            logical_eq(nlevels_BMD, 1)))) {
          current_statement__ = 94;
          for (int mn = 1; mn <= nlevels_b; ++mn) {
            current_statement__ = 92;
            if (logical_eq(data_type, 1)) {
              current_statement__ = 90;
              assign(b, cons_list(index_uni(mn), nil_index_list()),
                (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                  stan::math::log((1 - (q / (c[(mn - 1)] - 1))))),
                "assigning variable b");
            } else {
              current_statement__ = 89;
              if (logical_eq(data_type, 2)) {
                current_statement__ = 87;
                assign(b, cons_list(index_uni(mn), nil_index_list()),
                  (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                    stan::math::log(
                      (1 -
                        (stan::math::log((1 + q)) /
                          (a[(mn - 1)] * (c[(mn - 1)] - 1)))))),
                  "assigning variable b");
              } else {
                current_statement__ = 86;
                if (logical_eq(data_type, 3)) {
                  current_statement__ = 84;
                  assign(b, cons_list(index_uni(mn), nil_index_list()),
                    (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                      stan::math::log((1 + (q / (c[(mn - 1)] - 1))))),
                    "assigning variable b");
                } else {
                  current_statement__ = 83;
                  if (logical_eq(data_type, 4)) {
                    current_statement__ = 81;
                    assign(b, cons_list(index_uni(mn), nil_index_list()),
                      (-stan::math::exp((-k[(1 - 1)] * d[(1 - 1)])) *
                        stan::math::log(
                          (1 -
                            (stan::math::log((1 - q)) /
                              (a[(mn - 1)] * (c[(mn - 1)] - 1)))))),
                      "assigning variable b");
                  } 
                }
              }
            }}
        } else {
          current_statement__ = 80;
          if ((primitive_value((primitive_value(logical_eq(nlevels_a, 1)) &&
              primitive_value(logical_gt(nlevels_d, 1)))) && primitive_value(
              logical_gt(nlevels_BMD, 1)))) {
            current_statement__ = 78;
            for (int mn = 1; mn <= nlevels_b; ++mn) {
              current_statement__ = 76;
              if (logical_eq(data_type, 1)) {
                current_statement__ = 74;
                assign(b, cons_list(index_uni(mn), nil_index_list()),
                  (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                    stan::math::log((1 - (q / (c[(1 - 1)] - 1))))),
                  "assigning variable b");
              } else {
                current_statement__ = 73;
                if (logical_eq(data_type, 2)) {
                  current_statement__ = 71;
                  assign(b, cons_list(index_uni(mn), nil_index_list()),
                    (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                      stan::math::log(
                        (1 -
                          (stan::math::log((1 + q)) /
                            (a[(1 - 1)] * (c[(1 - 1)] - 1)))))),
                    "assigning variable b");
                } else {
                  current_statement__ = 70;
                  if (logical_eq(data_type, 3)) {
                    current_statement__ = 68;
                    assign(b, cons_list(index_uni(mn), nil_index_list()),
                      (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                        stan::math::log((1 + (q / (c[(1 - 1)] - 1))))),
                      "assigning variable b");
                  } else {
                    current_statement__ = 67;
                    if (logical_eq(data_type, 4)) {
                      current_statement__ = 65;
                      assign(b, cons_list(index_uni(mn), nil_index_list()),
                        (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                          stan::math::log(
                            (1 -
                              (stan::math::log((1 - q)) /
                                (a[(1 - 1)] * (c[(1 - 1)] - 1)))))),
                        "assigning variable b");
                    } 
                  }
                }
              }}
          } else {
            current_statement__ = 64;
            if ((primitive_value((primitive_value(logical_gt(nlevels_a, 1))
                && primitive_value(logical_gt(nlevels_d, 1)))) &&
                primitive_value(logical_gt(nlevels_BMD, 1)))) {
              current_statement__ = 62;
              for (int mn = 1; mn <= nlevels_b; ++mn) {
                current_statement__ = 60;
                if (logical_eq(data_type, 1)) {
                  current_statement__ = 58;
                  assign(b, cons_list(index_uni(mn), nil_index_list()),
                    (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                      stan::math::log((1 - (q / (c[(mn - 1)] - 1))))),
                    "assigning variable b");
                } else {
                  current_statement__ = 57;
                  if (logical_eq(data_type, 2)) {
                    current_statement__ = 55;
                    assign(b, cons_list(index_uni(mn), nil_index_list()),
                      (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                        stan::math::log(
                          (1 -
                            (stan::math::log((1 + q)) /
                              (a[(mn - 1)] * (c[(mn - 1)] - 1)))))),
                      "assigning variable b");
                  } else {
                    current_statement__ = 54;
                    if (logical_eq(data_type, 3)) {
                      current_statement__ = 52;
                      assign(b, cons_list(index_uni(mn), nil_index_list()),
                        (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                          stan::math::log((1 + (q / (c[(mn - 1)] - 1))))),
                        "assigning variable b");
                    } else {
                      current_statement__ = 51;
                      if (logical_eq(data_type, 4)) {
                        current_statement__ = 49;
                        assign(b, cons_list(index_uni(mn), nil_index_list()),
                          (-stan::math::exp((-k[(mn - 1)] * d[(mn - 1)])) *
                            stan::math::log(
                              (1 -
                                (stan::math::log((1 - q)) /
                                  (a[(mn - 1)] * (c[(mn - 1)] - 1)))))),
                          "assigning variable b");
                      } 
                    }
                  }
                }}
            } 
          }
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= nlevels_b; ++sym1__) {
          vars__.emplace_back(b[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
          vars__.emplace_back(a[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
          vars__.emplace_back(c[(sym1__ - 1)]);}
        vars__.emplace_back(par3);
        for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
          vars__.emplace_back(d[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
          vars__.emplace_back(k[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
          vars__.emplace_back(mu_inf[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
          vars__.emplace_back(invsigma2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
          vars__.emplace_back(mu_0[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> par1;
      par1 = std::vector<double>(nlevels_a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(par1, nil_index_list(), context__.vals_r("par1"),
        "assigning variable par1");
      std::vector<double> par1_free__;
      par1_free__ = std::vector<double>(nlevels_a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        current_statement__ = 1;
        assign(par1_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(par1[(sym1__ - 1)], 0),
          "assigning variable par1_free__");}
      std::vector<double> par2;
      par2 = std::vector<double>(nlevels_BMD, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(par2, nil_index_list(), context__.vals_r("par2"),
        "assigning variable par2");
      std::vector<double> par2_free__;
      par2_free__ = std::vector<double>(nlevels_BMD, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        current_statement__ = 2;
        assign(par2_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(par2[(sym1__ - 1)], 0),
          "assigning variable par2_free__");}
      std::vector<double> pars3i;
      pars3i = std::vector<double>(is_increasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(pars3i, nil_index_list(), context__.vals_r("pars3i"),
        "assigning variable pars3i");
      std::vector<double> pars3i_free__;
      pars3i_free__ = std::vector<double>(is_increasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        current_statement__ = 3;
        assign(pars3i_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(pars3i[(sym1__ - 1)], 0),
          "assigning variable pars3i_free__");}
      std::vector<double> pars3d;
      pars3d = std::vector<double>(is_decreasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(pars3d, nil_index_list(), context__.vals_r("pars3d"),
        "assigning variable pars3d");
      std::vector<double> pars3d_free__;
      pars3d_free__ = std::vector<double>(is_decreasing, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        current_statement__ = 4;
        assign(pars3d_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(pars3d[(sym1__ - 1)], 0, 1),
          "assigning variable pars3d_free__");}
      std::vector<double> par4;
      par4 = std::vector<double>(nlevels_d, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(par4, nil_index_list(), context__.vals_r("par4"),
        "assigning variable par4");
      std::vector<double> par5;
      par5 = std::vector<double>(nlevels_sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(par5, nil_index_list(), context__.vals_r("par5"),
        "assigning variable par5");
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        vars__.emplace_back(par1_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        vars__.emplace_back(par2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
        vars__.emplace_back(pars3i_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
        vars__.emplace_back(pars3d_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        vars__.emplace_back(par4[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
        vars__.emplace_back(par5[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("par1");
    names__.emplace_back("par2");
    names__.emplace_back("pars3i");
    names__.emplace_back("pars3d");
    names__.emplace_back("par4");
    names__.emplace_back("par5");
    names__.emplace_back("b");
    names__.emplace_back("a");
    names__.emplace_back("c");
    names__.emplace_back("par3");
    names__.emplace_back("d");
    names__.emplace_back("k");
    names__.emplace_back("mu_inf");
    names__.emplace_back("invsigma2");
    names__.emplace_back("mu_0");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_a)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_BMD)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(is_increasing)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(is_decreasing)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_d)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(nlevels_sigma)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_b)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_a)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_a)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_d)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_BMD)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_a)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(nlevels_sigma)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nlevels_a)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pars3i" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pars3d" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par4" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par5" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nlevels_b; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "par3");
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "d" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_inf" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "invsigma2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_0" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= is_increasing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pars3i" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= is_decreasing; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pars3d" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par4" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "par5" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nlevels_b; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "par3");
      for (int sym1__ = 1; sym1__ <= nlevels_d; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "d" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_BMD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_inf" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_sigma; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "invsigma2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlevels_a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_0" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"par1\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_BMD << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3i\",\"type\":{\"name\":\"array\",\"length\":" << is_increasing << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3d\",\"type\":{\"name\":\"array\",\"length\":" << is_decreasing << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par4\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_d << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par5\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_sigma << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_b << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_d << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_BMD << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_inf\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_sigma << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"par1\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par2\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_BMD << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3i\",\"type\":{\"name\":\"array\",\"length\":" << is_increasing << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pars3d\",\"type\":{\"name\":\"array\",\"length\":" << is_decreasing << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par4\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_d << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"par5\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_sigma << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_b << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"par3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_d << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_BMD << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_inf\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"invsigma2\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_sigma << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"array\",\"length\":" << nlevels_a << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_mE4COV_namespace::model_mE4COV;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mE4COV_namespace::profiles__;
}
#endif
#endif
