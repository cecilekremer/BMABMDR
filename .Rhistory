seed=123,
pvec=pvec,
plot=F)
# MA estimates
FLBMD$MA
# model weights
round(FLBMD$weights,4)
# model-specific fit
FLBMD$E4_N
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
FLBMD$bf
# output as dataframe/list
BMDWeights(FLBMD, 'continuous')
summary.BMADR(FLBMD)
# plot output
pFLBMD = plot.BMADR(FLBMD, weight_type = "LP", include_data = T, all = F, title = '')
# plot prior vs posterior
plot_prior(FLBMD, data_N$data, "E4_N", parms = T)
SBMD = sampling_MA(data_N, data_LN,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec,
plot=F)
warnings()
# MA estimates
SBMD$MA_bridge_sampling
SBMD$MA_laplace
# convergence & divergence
SBMD$convergence
SBMD$divergences*100 # percentage of iterations that were divergent
# model-specific fit
SBMD$E4_N
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
SBMD$bf
# output as dataframe/list
BMDWeights(SBMD, 'continuous')
summary.BMADR(SBMD)
# plot output
pSBMD = plot.BMADR(SBMD, weight_type = "BS", include_data = T, all = F, title = '')
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
library(BMABMDR)
library(gamlss)
## available models?
get_models('continuous')
get_models('quantal')
dose = c(0,6.25,12.5,25,50,100)
mean = c(10.87143,10.16669,10.81050,10.41179,12.38305,18.47681)
sd = c(1.804554,1.805939,3.858265,1.626007,2.045695,2.322449)
n = rep(10,6)
summ.data = data.frame(x = dose, y = mean, s = sd, n = n)
plot(summ.data$x, summ.data$y, type = 'l')
# Test for dose-response effect
anydoseresponseN(summ.data$x, summ.data$y, summ.data$s, summ.data$n) # normal distribution
anydoseresponseLN(summ.data$x, summ.data$y, summ.data$s, summ.data$n) # lognormal distribution
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = c(rep(1,8), rep(1,8))
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q)
data_LN = PREP_DATA_LN(summ.data,
sumstats = T,
q = q)
FLBMD=full.laplace_MA(data_N,
data_LN,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec,
plot=F)
# MA estimates
FLBMD$MA
# model weights
round(FLBMD$weights,4)
# model-specific fit
FLBMD$E4_N
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
FLBMD$bf
# output as dataframe/list
BMDWeights(FLBMD, 'continuous')
summary.BMADR(FLBMD)
# plot output
pFLBMD = plot.BMADR(FLBMD, weight_type = "LP", include_data = T, all = F, title = '')
pFLBMD$BMDs
pFLBMD$weights
pFLBMD$model_fit_N
pFLBMD$model_fit_LN
pFLBMD$model_fit
pFLBMD$MA_fit
# plot prior vs posterior
plot_prior(FLBMD, data_N$data, "E4_N", parms = T)
plot_prior(FLBMD, data_N$data, "E4_N", parms = F)
plot_prior(FLBMD, data_N$data, "P4_N", parms = T)
plot_prior(FLBMD, data_LN$data, "L4_LN", parms = T)
SBMD = sampling_MA(data_N, data_LN,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec,
plot=F)
# MA estimates
SBMD$MA_bridge_sampling
SBMD$MA_laplace
# convergence & divergence
SBMD$convergence
SBMD$divergences*100 # percentage of iterations that were divergent
# model-specific fit
SBMD$E4_N
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
SBMD$bf
# output as dataframe/list
BMDWeights(SBMD, 'continuous')
summary.BMADR(SBMD)
# plot output
pSBMD = plot.BMADR(SBMD, weight_type = "BS", include_data = T, all = F, title = '')
pSBMD$BMDs
pSBMD$weights
pSBMD$model_fit_N
pSBMD$model_fit_LN
pSBMD$model_fit
pSBMD$MA_fit
# plot prior vs posterior
plot_prior(SBMD, data_N$data, "E4_N", parms = T)
plot_prior(SBMD, data_LN$data, "P4_LN", parms = T)
dose = c(0, 5, 15, 50, 100)
y = c(0, 4, 6, 5, 12)
n = c(20, 20, 20, 20, 20)
summ.data = data.frame(x = dose, y = y, n = n)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = rep(1,8)
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_Q = PREP_DATA_QA(summ.data,
sumstats = T,
q = q)
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
# MA estimates
FLBMD_Q$MA
# model weights
round(FLBMD_Q$weights,4)
# model-specific fit
FLBMD_Q$E4_Q
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
FLBMD_Q$bf
# output as dataframe/list
BMDWeights(FLBMD_Q, 'quantal')
summary.BMADRQ(FLBMD_Q)
# plot output
pFLBMD_Q = plot.BMADRQ(FLBMD_Q, weight_type = "LP", include_data = T, all = F, title = '')
pFLBMD_Q$BMDs
pFLBMD_Q$weights
pFLBMD_Q$model_fit
pFLBMD_Q$MA_fit
# plot prior vs posterior
plot_priorQ(FLBMD_Q, data_Q$data, "E4_Q")
plot_priorQ(FLBMD_Q, data_Q$data, "P4_Q")
plot_priorQ(FLBMD_Q, data_Q$data, "L4_Q")
pFLBMD_Q$model_fit
plot_priorQ(FLBMD_Q, data_Q$data, "P4_Q")
plot_priorQ(FLBMD_Q, data_Q$data, "L4_Q")
SBMD_Q = samplingQ_MA(data_Q,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec)
warnings()
# MA estimates
SBMD_Q$MA_bridge_sampling
SBMD_Q$MA_laplace
# convergence & divergence
SBMD_Q$convergence
SBMD_Q$divergences*100 # percentage of iterations that were divergent
# output as dataframe/list
BMDWeights(SBMD_Q, 'quantal')
summary.BMADRQ(SBMD_Q)
# plot output
pSBMD_Q = plot.BMADRQ(SBMD_Q, weight_type = "BS", include_data = T, all = F, title = '')
pSBMD_Q$BMDs
pSBMD_Q$weights
pSBMD_Q$model_fit
pSBMD_Q$MA_fit
# plot prior vs posterior
plot_priorQ(SBMD_Q, data_Q$data, "E4_Q")
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
??BMABMDR::get_models
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
rstan_config() # recompile stan models
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
rm(list=ls())
# install package from zip file
install.packages("~/GitHub/BMABMDR_0.0.0.9013.tar.gz", repos = NULL, type = "source")
rm(list=ls())
library(BMABMDR)
library(gamlss)
## available models?
get_models('continuous')
get_models('quantal')
dose = c(0,6.25,12.5,25,50,100)
mean = c(10.87143,10.16669,10.81050,10.41179,12.38305,18.47681)
sd = c(1.804554,1.805939,3.858265,1.626007,2.045695,2.322449)
n = rep(10,6)
summ.data = data.frame(x = dose, y = mean, s = sd, n = n)
plot(summ.data$x, summ.data$y, type = 'l')
# Test for dose-response effect
anydoseresponseN(summ.data$x, summ.data$y, summ.data$s, summ.data$n) # normal distribution
anydoseresponseLN(summ.data$x, summ.data$y, summ.data$s, summ.data$n) # lognormal distribution
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = c(rep(1,8), rep(1,8))
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q)
data_LN = PREP_DATA_LN(summ.data,
sumstats = T,
q = q)
FLBMD=full.laplace_MA(data_N,
data_LN,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec,
plot=F)
# MA estimates
FLBMD$MA
# model weights
round(FLBMD$weights,4)
# model-specific fit
FLBMD$E4_N
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
FLBMD$bf
# output as dataframe/list
BMDWeights(FLBMD, 'continuous')
summary.BMADR(FLBMD)
# plot output
pFLBMD = plot.BMADR(FLBMD, weight_type = "LP", include_data = T, all = F, title = '')
pFLBMD$BMDs
pFLBMD$weights
pFLBMD$model_fit_N
pFLBMD$model_fit_LN
pFLBMD$model_fit
pFLBMD$MA_fit
?PREP_DATA_N
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q,
prior.d = 'N11',
extended = T)
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q,
prior.d = 'EPA',
extended = T)
# plot prior vs posterior
plot_prior(FLBMD, data_N$data, "E4_N", parms = T)
SBMD = sampling_MA(data_N, data_LN,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec,
plot=F)
warnings()
# MA estimates
SBMD$MA_bridge_sampling
SBMD$MA_laplace
# convergence & divergence
SBMD$convergence
SBMD$divergences*100 # percentage of iterations that were divergent
# model-specific fit
SBMD$E4_N
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
SBMD$bf
# output as dataframe/list
BMDWeights(SBMD, 'continuous')
summary.BMADR(SBMD)
# plot output
pSBMD = plot.BMADR(SBMD, weight_type = "BS", include_data = T, all = F, title = '')
pSBMD$BMDs
pSBMD$weights
pSBMD$model_fit_N
pSBMD$model_fit_LN
pSBMD$model_fit
pSBMD$MA_fit
# plot prior vs posterior
plot_prior(SBMD, data_N$data, "E4_N", parms = T)
plot_prior(SBMD, data_LN$data, "P4_LN", parms = T)
dose = c(0, 5, 15, 50, 100)
y = c(0, 4, 6, 5, 12)
n = c(20, 20, 20, 20, 20)
summ.data = data.frame(x = dose, y = y, n = n)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = rep(1,8)
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_Q = PREP_DATA_QA(summ.data,
sumstats = T,
q = q)
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
# MA estimates
FLBMD_Q$MA
# model weights
round(FLBMD_Q$weights,4)
# model-specific fit
FLBMD_Q$E4_Q
# output as dataframe/list
BMDWeights(FLBMD_Q, 'quantal')
summary.BMADRQ(FLBMD_Q)
# plot output
pFLBMD_Q = plot.BMADRQ(FLBMD_Q, weight_type = "LP", include_data = T, all = F, title = '')
pFLBMD_Q$BMDs
pFLBMD_Q$weights
pFLBMD_Q$model_fit
pFLBMD_Q$MA_fit
# plot prior vs posterior
plot_priorQ(FLBMD_Q, data_Q$data, "E4_Q")
plot_priorQ(FLBMD_Q, data_Q$data, "P4_Q")
plot_priorQ(FLBMD_Q, data_Q$data, "L4_Q")
# plot prior vs posterior
plot_prior(SBMD, data_N$data, "E4_N", parms = T)
SBMD_Q = samplingQ_MA(data_Q,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec)
# MA estimates
SBMD_Q$MA_bridge_sampling
SBMD_Q$MA_laplace
# convergence & divergence
SBMD_Q$convergence
SBMD_Q$divergences*100 # percentage of iterations that were divergent
# output as dataframe/list
BMDWeights(SBMD_Q, 'quantal')
summary.BMADRQ(SBMD_Q)
# plot output
pSBMD_Q = plot.BMADRQ(SBMD_Q, weight_type = "BS", include_data = T, all = F, title = '')
pSBMD_Q$BMDs
pSBMD_Q$weights
pSBMD_Q$model_fit
pSBMD_Q$MA_fit
# plot prior vs posterior
plot_priorQ(SBMD_Q, data_Q$data, "E4_Q")
clusterdata <- data.frame(
dose = c(rep(c(0, 0.2, 0.6, 6, 60, 120), c(26, 22, 24, 26, 19, 16))),
y = c(1,1,0,0,0,0,0,2,1,3,0,0,0,0,0,0, 0, 1,0,0,0,0,
2,0,1,0,3, 0,3,0,1,0,1,1,0,4,0,0,1, 0,  0,  0,  0,  2,  0,  0,  0,
0,  0,  0,  4,  0,  4,  0,  1,  0,  0,  0,  0,1,  3, 1,  0,  0,  5,
0,  0,  1,  5,  0,  1,  0,  0,  6,  0,  1,  1,  0, 2,  0,  0,  0,  1,
11,  0,  5,  5,  0,  3,  0,  0,  3,  0,  0,  0,  2,  5,  3,  6,  1,  1, 10,  3,
4,  2,  3,  2,  2,  2,  9,  3,  2,  1,  0,  1,  3,  2, 3,  3,  7,  0,
5,  3,  2,  6,  3,  1,  2,  6,  3,  3, 2,  2),
n = c(12,12,12,13,1, 13,10,14, 12, 12, 14, 13, 12, 11, 15, 14, 11, 11, 12, 11, 14, 12, 13, 13, 14, 13,
8, 14, 10, 13, 14, 12, 10, 10, 11, 10, 12, 12, 14, 14,  9,  8, 12,  9, 13,  9, 13, 12, 12, 13, 10,
13,  9, 11,  9, 10, 12, 14,  5,  9,  9,  8,  7, 13, 14, 12, 13, 15, 11, 11,  7, 14,  8,  9, 12,
6,  9,  9, 13, 10,  4,  8, 10, 11,  7, 10, 10,  7, 12,  7, 11, 14,  4,  7,  6,  2,  5,  9,  6,  1,
1, 10,  3,  4,  3,  5,  2,  4,  2,  9,  3,  6,  1,  4,  1, 10,  2, 3,  3,  7,  1,  5,  3,  2,  6,
8,  1,  2,  6,  3,  3,  2, 2),
liter = c(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1)
)
clusterdataQ <- PREP_DATA_QA(data = clusterdata, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE)
pw <- rep(1, 8)
### Laplace Approximation
testbb_laplace <- full.laplaceQ_MA(data.Q = clusterdataQ, prior.weights = pw)
dose = c(0,6.25,12.5,25,50,100)
mean = c(10.87143,10.16669,10.81050,10.41179,12.38305,18.47681)
sd = c(1.804554,1.805939,3.858265,1.626007,2.045695,2.322449)
n = rep(10,6)
q = 0.1
summ.data = data.frame(x = dose, y = mean, s = sd, n = n)
plot(summ.data$x, summ.data$y, type = 'l')
## Bartlett test
# normal distribution
b.Normal <- bartlett(summ.data$s, summ.data$n)
b.Normal
# lognormal distribution
# first convert arithmetic to geometric summary stats
summ.data.LN <- data.frame(x = dose,
y = log(NtoLN(summ.data$y, summ.data$s)[1:length(dose)]),
s = log(NtoLN(summ.data$y, summ.data$s)[(length(dose)+1):(2*length(dose))]),
n = n
)
b.Lognormal <- bartlett(summ.data.LN$s, summ.data.LN$n)
b.Lognormal
rm(list=ls())
library(BMABMDR)
library(gamlss)
# install package from zip file
install.packages("~/GitHub/BMABMDR_0.0.0.9013.tar.gz", repos = NULL, type = "source")
