lines(seq(0,20,1), best.stats1[4, 1:21], col = 5, lwd = 3, lty = 3)
lines(seq(0,20,1), best.stats1[5, 1:21], col = 6, lwd = 3, lty = 3)
plot(seq(0,10,1), target.features[22:32], type = 'l', xlab = 'Number of female partners in the last 6 months',
ylab = 'Proportion of Sialon II participants (N = 361)', col = 1,
ylim = c(0,1))
# for(i in 1:length(best.ids)){
#   lines(seq(0,10,1), best.stats1[i, 22:32], col = i+1, lwd = 1, lty = 3)
# }
lines(seq(0,10,1), best.stats1[1, 22:32], col = 2, lwd = 3, lty = 3)
lines(seq(0,10,1), best.stats1[2, 22:32], col = 3, lwd = 3, lty = 3)
lines(seq(0,10,1), best.stats1[3, 22:32], col = 4, lwd = 3, lty = 3)
lines(seq(0,10,1), best.stats1[4, 22:32], col = 5, lwd = 3, lty = 3)
lines(seq(0,10,1), best.stats1[5, 22:32], col = 6, lwd = 3, lty = 3)
par(mfrow = c(1,1))
plot(seq(0,5,1), target.features[1:6], type = 'l', xlab = 'Number of male partners in the last 6 months',
ylab = 'Proportion of Sialon II participants (N = 361)', col = 1,
ylim = c(0,0.35))
lines(seq(0,5,1), best.stats1[1, 1:6], col = 2, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[2, 1:6], col = 3, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[3, 1:6], col = 4, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[4, 1:6], col = 5, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[5, 1:6], col = 6, lwd = 3, lty = 3)
## Heterosexual partners
best.stats1[, 34:54]
plot(seq(0,5,1), best.stats1[1, 34:39], type = 'l', xlab = 'Number of heterosexual partners in the last 6 months',
ylab = 'Proportion of simulated population', col = 1,
ylim = c(0,0.8))
lines(seq(0,5,1), best.stats1[2, 34:39], col = 2, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[3, 34:39], col = 3, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[4, 34:39], col = 4, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[5, 34:39], col = 5, lwd = 3, lty = 3)
## Prop MSMW - MSMO - hetero
best.stats1[,33]
best.stats1[,55:57]
# Prop hetero with 0-1-2 partners in past 6m
best.stats1[,34:36]
# best fit?
best.stats1[1, c(1:6, 22:24, 33, 34:36)]
best.stats1[3, c(1:6, 22:24, 33, 34:36)]
best.stats1[, c(1:6, 22:24, 33, 34:36)]
library(rstan)
rstan_options(auto_write = TRUE)
?rstan_config
library('rstantools')
library('usethis')
library('roxygen2')
?rstan_config
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/mingw64/bin/")
Sys.setenv(BINPREF = "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\rtools43\\usr", old_path, sep=";")
new_path <- paste("C:\\rtools43\\x86_64-w64-mingw32.static.posix\\bin", old_path, sep = ";")
# new_path <- paste(old_path, "C:\\rtools43\\mingw32\\bin;C:\\rtools43\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
library('rstantools')
library('usethis')
library('roxygen2')
rstan_options(auto_write = TRUE)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/mingw64/bin/")
Sys.setenv(BINPREF = "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\rtools43\\usr", old_path, sep=";")
new_path <- paste("C:\\rtools43\\x86_64-w64-mingw32.static.posix\\bin", old_path, sep = ";")
# new_path <- paste(old_path, "C:\\rtools43\\mingw32\\bin;C:\\rtools43\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
?Rcpp::compileAttributes
## update src files
rstantools::rstan_config()
Rcpp::compileAttributes()
library(BMABMDR)
packageVersion('BMABMDR')
Rcpp::compileAttributes()
library(BMABMDR)
packageVersion('BMABMDR')
file.path(Sys.getenv("HOME"), ".R")
file.exists(dotR)
## edit global Makevars.win
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) { dir.create(dotR) }
MAKEVARS <- file.path(dotR, "Makevars.win")
if (!file.exists(MAKEVARS)) { file.create(MAKEVARS) }
cat("\nCXX14=g++ -std=c++1y",
"CXX14FLAGS += -Wno-unused-variable -Wno-unused-function -Wno-unknown-pragmas -Wno-ignored-attributes -Wno-deprecated -Wno-pedantic",
"PKG_CPPFLAGS += -DUSE_STANC3\n", file = MAKEVARS, sep = "\n", append = TRUE)
file.exists(dotR)
MAKEVARS
file.path(dotR, "Makevars.win")
?compile_dll
pkgbuild::compile_dll(quiet = TRUE)
library('rstantools')
library('usethis')
library('roxygen2')
# rstan_options(auto_write = TRUE)
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# https://cran.r-project.org/bin/windows/base/howto-R-4.3.html
## Not working -> install 'V8' package -> TRY AGAIN
# library('V8')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/mingw64/bin/")
Sys.setenv(BINPREF = "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\rtools43\\usr", old_path, sep=";")
new_path <- paste("C:\\rtools43\\x86_64-w64-mingw32.static.posix\\bin", old_path, sep = ";")
# new_path <- paste(old_path, "C:\\rtools43\\mingw32\\bin;C:\\rtools43\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
#### UPDATE PACKAGE in development
## update src files
rstantools::rstan_config()
Rcpp::compileAttributes()
pkgbuild::compile_dll(quiet = TRUE)
## create documentation (this uses load_pkgload() to simulate package loading, on the condition that it is already compiled)
# can be changed to roxygenize(load_code = load_source()) to just source all files in the /R directory (doesn't need compilation)
roxygen2::roxygenize()
warnings()
predict.BMADR
library(BMABMDR)
summary.BMADR
## check if needs recompiling (normally only if a Stan file changes; i.e. there is a source or header file newer than the dll)
pkgbuild::needs_compile()
pkgbuild::compile_dll(quiet = TRUE)
# update documentation
roxygen2::roxygenize()
warnings()
packageVersion('BMABMDR')
## check if R code is updated when changed
rstan_config() # does this create new cpp files?? (in /src)
pkgbuild::compile_dll(quiet = TRUE)
?compile_dll
## check if needs recompiling (normally only if a Stan file changes; i.e. there is a source or header file newer than the dll)
pkgbuild::needs_compile()
## check if needs recompiling (normally only if a Stan file changes; i.e. there is a source or header file newer than the dll)
if(pkgbuild::needs_compile()){
# normally compile_dll() detects whether it is needed or not, but doesn't seem to work in practice?
## check if R code is updated when changed
rstan_config() # does this create new cpp files?? (in /src)
pkgbuild::compile_dll(quiet = TRUE)
}
# update documentation
roxygen2::roxygenize()
library(BMABMDR)
packageVersion('BMABMDR')
outLP
pkgbuild::needs_compile()
## check if needs recompiling (normally only if a Stan file changes; i.e. there is a source or header file newer than the dll)
if(pkgbuild::needs_compile()){
# normally compile_dll() detects whether it is needed or not, but doesn't seem to work in practice?
## check if R code is updated when changed
rstan_config() # does this create new cpp files?? (in /src)
pkgbuild::compile_dll(quiet = TRUE)
}
# update documentation
roxygen2::roxygenize()
library(BMABMDR)
outLP
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/mingw64/bin/")
Sys.setenv(BINPREF = "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\rtools43\\usr", old_path, sep=";")
new_path <- gsub('C:\\rtools40\\usr\\bin;C:\\rtools40\\usr\\bin;', '', old_path, fixed = T)
new_path <- paste("C:\\rtools43\\x86_64-w64-mingw32.static.posix\\bin", new_path, sep = ";")
# new_path <- paste(old_path, "C:\\rtools43\\mingw32\\bin;C:\\rtools43\\mingw64\\bin", sep=";")
Sys.setenv(PATH = new_path)
Sys.getenv("PATH")
## update src files
rstantools::rstan_config()
Rcpp::compileAttributes()
## compile package
pkgbuild::compile_dll(quiet = TRUE)
?Rcpp::compileAttributes
library('rstantools')
library('usethis')
library('roxygen2')
# rstan_options(auto_write = TRUE)
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# https://cran.r-project.org/bin/windows/base/howto-R-4.3.html
## Not working -> install 'V8' package -> TRY AGAIN
# library('V8')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/mingw64/bin/")
Sys.setenv(BINPREF = "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\rtools43\\usr", old_path, sep=";")
new_path <- gsub('C:\\rtools40\\usr\\bin;C:\\rtools40\\usr\\bin;', '', old_path, fixed = T)
new_path <- paste("C:\\rtools43\\x86_64-w64-mingw32.static.posix\\bin", new_path, sep = ";")
# new_path <- paste(old_path, "C:\\rtools43\\mingw32\\bin;C:\\rtools43\\mingw64\\bin", sep=";")
Sys.setenv(PATH = new_path)
#### UPDATE PACKAGE in development
## update src files
rstantools::rstan_config()
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/mingw64/bin/")
Sys.setenv(BINPREF = "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\rtools43\\usr", old_path, sep=";")
new_path <- gsub('C:\\rtools40\\usr\\bin;C:\\rtools40\\usr\\bin;', '', old_path, fixed = T)
new_path <- paste("C:\\rtools43\\x86_64-w64-mingw32.static.posix\\bin", new_path, sep = ";")
# new_path <- paste(old_path, "C:\\rtools43\\mingw32\\bin;C:\\rtools43\\mingw64\\bin", sep=";")
Sys.setenv(PATH = new_path)
## update src files
rstantools::rstan_config()
## compile package
pkgbuild::compile_dll(quiet = TRUE)
pkgbuild::needs_compile()
Sys.getenv("RTOOLS43_HOME")
readLines("~./R/Makevars.win")
readLines("~/R/Makevars.win")
readLines("~/.R/Makevars.win")
readLines("~/.Renviron")
readLines("~/.Rprofile")
system("touch foo.cpp")
system("R CMD SHLIB foo.cpp")
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/mingw64/bin/")
Sys.setenv(BINPREF = "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/")
readLines("~/.Renviron")
readLines("~/.Rprofile")
readLines("~/.Rprofile")
readLines("~/.Renviron")
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\rtools43\\usr", old_path, sep=";")
new_path <- gsub('C:\\rtools40\\usr\\bin;C:\\rtools40\\usr\\bin;', '', old_path, fixed = T)
new_path <- paste("C:\\rtools43\\x86_64-w64-mingw32.static.posix\\bin", new_path, sep = ";")
# new_path <- paste(old_path, "C:\\rtools43\\mingw32\\bin;C:\\rtools43\\mingw64\\bin", sep=";")
Sys.setenv(PATH = new_path)
Sys.getenv("PATH")
cat("CXX14FLAGS += -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",file = "~/.R/Makevars.win", sep = "\n", append = FALSE)
library(rstan)
example(stan_model,run.dontrun=TRUE,verbose=TRUE)
Sys.getenv("BINPREF")
Sys.getenv("PATH")
Sys.which("make")
readLines("~/.Renviron")
readLines("~/.Rprofile")
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/"
Sys.getenv("PATH")
## update src files
rstantools::rstan_config()
pkgbuild::needs_compile()
## compile package
pkgbuild::compile_dll(quiet = TRUE)
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/"
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR - v12 310322/')
list.files(all.files=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/"
Sys.getenv("PATH")
## update src files
rstantools::rstan_config()
## compile package
pkgbuild::compile_dll(quiet = TRUE)
?compile_dll
Sys.getenv("R_MAKEVARS_USER")
library('rstantools')
library('usethis')
library('roxygen2')
# rstan_options(auto_write = TRUE)
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# https://cran.r-project.org/bin/windows/base/howto-R-4.3.html
## Not working -> install 'V8' package -> TRY AGAIN
# library('V8')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
# old_path <- Sys.getenv("PATH")
# new_path <- gsub('C:\\rtools40\\usr\\bin;C:\\rtools40\\usr\\bin;', '', old_path, fixed = T)
# new_path <- paste("C:\\rtools43\\x86_64-w64-mingw32.static.posix\\bin", new_path, sep = ";")
# new_path <- paste(old_path, "C:\\rtools43\\mingw32\\bin;C:\\rtools43\\mingw64\\bin", sep=";")
# Sys.setenv(PATH = new_path)
#### UPDATE PACKAGE in development
## update src files
rstantools::rstan_config()
# Rcpp::compileAttributes()
## edit global Makevars.win (already like this)
# dotR <- file.path(Sys.getenv("HOME"), ".R")
# if (!file.exists(dotR)) { dir.create(dotR) }
# MAKEVARS <- file.path(dotR, "Makevars.win")
# if (!file.exists(MAKEVARS)) { file.create(MAKEVARS) }
# cat("\nCXX14=g++ -std=c++1y",
#     "CXX14FLAGS += -Wno-unused-variable -Wno-unused-function -Wno-unknown-pragmas -Wno-ignored-attributes -Wno-deprecated -Wno-pedantic",
#     "PKG_CPPFLAGS += -DUSE_STANC3\n", file = MAKEVARS, sep = "\n", append = TRUE)
## compile package
pkgbuild::compile_dll(quiet = TRUE)
library('rstantools')
library('usethis')
library('roxygen2')
# rstan_options(auto_write = TRUE)
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# https://cran.r-project.org/bin/windows/base/howto-R-4.3.html
## Not working -> install 'V8' package -> TRY AGAIN
# library('V8')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
# old_path <- Sys.getenv("PATH")
# new_path <- gsub('C:\\rtools40\\usr\\bin;C:\\rtools40\\usr\\bin;', '', old_path, fixed = T)
# new_path <- paste("C:\\rtools43\\x86_64-w64-mingw32.static.posix\\bin", new_path, sep = ";")
# new_path <- paste(old_path, "C:\\rtools43\\mingw32\\bin;C:\\rtools43\\mingw64\\bin", sep=";")
# Sys.setenv(PATH = new_path)
#### UPDATE PACKAGE in development
## update src files
rstantools::rstan_config()
# Rcpp::compileAttributes()
## edit global Makevars.win (already like this)
# dotR <- file.path(Sys.getenv("HOME"), ".R")
# if (!file.exists(dotR)) { dir.create(dotR) }
# MAKEVARS <- file.path(dotR, "Makevars.win")
# if (!file.exists(MAKEVARS)) { file.create(MAKEVARS) }
# cat("\nCXX14=g++ -std=c++1y",
#     "CXX14FLAGS += -Wno-unused-variable -Wno-unused-function -Wno-unknown-pragmas -Wno-ignored-attributes -Wno-deprecated -Wno-pedantic",
#     "PKG_CPPFLAGS += -DUSE_STANC3\n", file = MAKEVARS, sep = "\n", append = TRUE)
## Added '-g0' to ~/.R/Makevars file .. see if that works
## compile package
pkgbuild::compile_dll(quiet = TRUE)
?clean_dll
pkgbuild::needs_compile()
# normally compile_dll() detects whether it is needed or not, but doesn't seem to work in practice?
## check if R code is updated when changed
pkgbuild::clean_dll()
file.exists(file.path(Sys.getenv('HOME'), '.R', 'Makevars.win'))
tools::makevars_site()
tools::makevars_user()
library('rstantools')
library('usethis')
library('roxygen2')
# rstan_options(auto_write = TRUE)
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# https://cran.r-project.org/bin/windows/base/howto-R-4.3.html
## Not working -> install 'V8' package -> TRY AGAIN
# library('V8')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools43/x86_64-w64-mingw32.static.posix/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
## update src files
rstantools::rstan_config()
# normally compile_dll() detects whether it is needed or not, but doesn't seem to work in practice?
## check if R code is updated when changed
pkgbuild::clean_dll()
## compile package
pkgbuild::compile_dll(quiet = TRUE)
# normally compile_dll() detects whether it is needed or not, but doesn't seem to work in practice?
## check if R code is updated when changed
pkgbuild::clean_dll()
pkgbuild::compile_dll(quiet = TRUE)
# normally compile_dll() detects whether it is needed or not, but doesn't seem to work in practice?
## check if R code is updated when changed
pkgbuild::clean_dll()
pkgbuild::compile_dll(quiet = TRUE)
# normally compile_dll() detects whether it is needed or not, but doesn't seem to work in practice?
## check if R code is updated when changed
pkgbuild::clean_dll()
pkgbuild::compile_dll(quiet = TRUE)
Sys.which(make)
Sys.which("make")
makeconf_path()
rstan::makeconf_path()
Sys.getenv("BINPREF")
Sys.getenv("M_ARCH")
Sys.getenv("DEBUGFLAG")
Sys.getenv("CXX11FLAGS")
install.packages(c("posterior", "withr"))
# normally compile_dll() detects whether it is needed or not, but doesn't seem to work in practice?
## check if R code is updated when changed
pkgbuild::clean_dll()
pkgbuild::compile_dll(quiet = TRUE)
packageVersion('rstan')
example(stan_model, package = "rstan", run.dontrun = TRUE)
rstan_options(auto_write = TRUE)
# normally compile_dll() detects whether it is needed or not, but doesn't seem to work in practice?
## check if R code is updated when changed
pkgbuild::clean_dll()
pkgbuild::compile_dll(quiet = TRUE)
# normally compile_dll() detects whether it is needed or not, but doesn't seem to work in practice?
## check if R code is updated when changed
pkgbuild::clean_dll()
pkgbuild::compile_dll(quiet = TRUE)
# normally compile_dll() detects whether it is needed or not, but doesn't seem to work in practice?
## check if R code is updated when changed
pkgbuild::clean_dll()
pkgbuild::compile_dll(quiet = TRUE)
library(diffr)
diffr('~/GitHub/BMABMDR/.github/workflows/build_binary_macos.yml', '~/GitHub/BMABMDR/.github/workflows/build_binary_macos2.yml')
